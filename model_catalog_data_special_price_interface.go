/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataSpecialPriceInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataSpecialPriceInterface{}

// CatalogDataSpecialPriceInterface Product Special Price Interface is used to encapsulate data that can be processed by efficient price API.
type CatalogDataSpecialPriceInterface struct {
	// Product special price value.
	Price float32 `json:"price"`
	// ID of store, that contains special price value.
	StoreId int32 `json:"store_id"`
	// SKU of product, that contains special price value.
	Sku string `json:"sku"`
	// Start date for special price in Y-m-d H:i:s format.
	PriceFrom string `json:"price_from"`
	// End date for special price in Y-m-d H:i:s format.
	PriceTo string `json:"price_to"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\SpecialPriceInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataSpecialPriceInterface CatalogDataSpecialPriceInterface

// NewCatalogDataSpecialPriceInterface instantiates a new CatalogDataSpecialPriceInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataSpecialPriceInterface(price float32, storeId int32, sku string, priceFrom string, priceTo string) *CatalogDataSpecialPriceInterface {
	this := CatalogDataSpecialPriceInterface{}
	this.Price = price
	this.StoreId = storeId
	this.Sku = sku
	this.PriceFrom = priceFrom
	this.PriceTo = priceTo
	return &this
}

// NewCatalogDataSpecialPriceInterfaceWithDefaults instantiates a new CatalogDataSpecialPriceInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataSpecialPriceInterfaceWithDefaults() *CatalogDataSpecialPriceInterface {
	this := CatalogDataSpecialPriceInterface{}
	return &this
}

// GetPrice returns the Price field value
func (o *CatalogDataSpecialPriceInterface) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *CatalogDataSpecialPriceInterface) SetPrice(v float32) {
	o.Price = v
}

// GetStoreId returns the StoreId field value
func (o *CatalogDataSpecialPriceInterface) GetStoreId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetStoreIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreId, true
}

// SetStoreId sets field value
func (o *CatalogDataSpecialPriceInterface) SetStoreId(v int32) {
	o.StoreId = v
}

// GetSku returns the Sku field value
func (o *CatalogDataSpecialPriceInterface) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *CatalogDataSpecialPriceInterface) SetSku(v string) {
	o.Sku = v
}

// GetPriceFrom returns the PriceFrom field value
func (o *CatalogDataSpecialPriceInterface) GetPriceFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceFrom
}

// GetPriceFromOk returns a tuple with the PriceFrom field value
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetPriceFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceFrom, true
}

// SetPriceFrom sets field value
func (o *CatalogDataSpecialPriceInterface) SetPriceFrom(v string) {
	o.PriceFrom = v
}

// GetPriceTo returns the PriceTo field value
func (o *CatalogDataSpecialPriceInterface) GetPriceTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceTo
}

// GetPriceToOk returns a tuple with the PriceTo field value
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetPriceToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceTo, true
}

// SetPriceTo sets field value
func (o *CatalogDataSpecialPriceInterface) SetPriceTo(v string) {
	o.PriceTo = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataSpecialPriceInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataSpecialPriceInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataSpecialPriceInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataSpecialPriceInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogDataSpecialPriceInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataSpecialPriceInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	toSerialize["store_id"] = o.StoreId
	toSerialize["sku"] = o.Sku
	toSerialize["price_from"] = o.PriceFrom
	toSerialize["price_to"] = o.PriceTo
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataSpecialPriceInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
		"store_id",
		"sku",
		"price_from",
		"price_to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataSpecialPriceInterface := _CatalogDataSpecialPriceInterface{}

	err = json.Unmarshal(data, &varCatalogDataSpecialPriceInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataSpecialPriceInterface(varCatalogDataSpecialPriceInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "price")
		delete(additionalProperties, "store_id")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "price_from")
		delete(additionalProperties, "price_to")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataSpecialPriceInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataSpecialPriceInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataSpecialPriceInterface struct {
	value *CatalogDataSpecialPriceInterface
	isSet bool
}

func (v NullableCatalogDataSpecialPriceInterface) Get() *CatalogDataSpecialPriceInterface {
	return v.value
}

func (v *NullableCatalogDataSpecialPriceInterface) Set(val *CatalogDataSpecialPriceInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataSpecialPriceInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataSpecialPriceInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataSpecialPriceInterface(val *CatalogDataSpecialPriceInterface) *NullableCatalogDataSpecialPriceInterface {
	return &NullableCatalogDataSpecialPriceInterface{value: val, isSet: true}
}

func (v NullableCatalogDataSpecialPriceInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataSpecialPriceInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
