/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogInventoryDataStockStatusInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogInventoryDataStockStatusInterface{}

// CatalogInventoryDataStockStatusInterface Interface StockStatusInterface
type CatalogInventoryDataStockStatusInterface struct {
	ProductId   int32                                  `json:"product_id"`
	StockId     int32                                  `json:"stock_id"`
	Qty         int32                                  `json:"qty"`
	StockStatus int32                                  `json:"stock_status"`
	StockItem   CatalogInventoryDataStockItemInterface `json:"stock_item"`
	// ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockStatusInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogInventoryDataStockStatusInterface CatalogInventoryDataStockStatusInterface

// NewCatalogInventoryDataStockStatusInterface instantiates a new CatalogInventoryDataStockStatusInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogInventoryDataStockStatusInterface(productId int32, stockId int32, qty int32, stockStatus int32, stockItem CatalogInventoryDataStockItemInterface) *CatalogInventoryDataStockStatusInterface {
	this := CatalogInventoryDataStockStatusInterface{}
	this.ProductId = productId
	this.StockId = stockId
	this.Qty = qty
	this.StockStatus = stockStatus
	this.StockItem = stockItem
	return &this
}

// NewCatalogInventoryDataStockStatusInterfaceWithDefaults instantiates a new CatalogInventoryDataStockStatusInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogInventoryDataStockStatusInterfaceWithDefaults() *CatalogInventoryDataStockStatusInterface {
	this := CatalogInventoryDataStockStatusInterface{}
	return &this
}

// GetProductId returns the ProductId field value
func (o *CatalogInventoryDataStockStatusInterface) GetProductId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetProductIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CatalogInventoryDataStockStatusInterface) SetProductId(v int32) {
	o.ProductId = v
}

// GetStockId returns the StockId field value
func (o *CatalogInventoryDataStockStatusInterface) GetStockId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StockId
}

// GetStockIdOk returns a tuple with the StockId field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetStockIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StockId, true
}

// SetStockId sets field value
func (o *CatalogInventoryDataStockStatusInterface) SetStockId(v int32) {
	o.StockId = v
}

// GetQty returns the Qty field value
func (o *CatalogInventoryDataStockStatusInterface) GetQty() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetQtyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *CatalogInventoryDataStockStatusInterface) SetQty(v int32) {
	o.Qty = v
}

// GetStockStatus returns the StockStatus field value
func (o *CatalogInventoryDataStockStatusInterface) GetStockStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StockStatus
}

// GetStockStatusOk returns a tuple with the StockStatus field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetStockStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StockStatus, true
}

// SetStockStatus sets field value
func (o *CatalogInventoryDataStockStatusInterface) SetStockStatus(v int32) {
	o.StockStatus = v
}

// GetStockItem returns the StockItem field value
func (o *CatalogInventoryDataStockStatusInterface) GetStockItem() CatalogInventoryDataStockItemInterface {
	if o == nil {
		var ret CatalogInventoryDataStockItemInterface
		return ret
	}

	return o.StockItem
}

// GetStockItemOk returns a tuple with the StockItem field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetStockItemOk() (*CatalogInventoryDataStockItemInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StockItem, true
}

// SetStockItem sets field value
func (o *CatalogInventoryDataStockStatusInterface) SetStockItem(v CatalogInventoryDataStockItemInterface) {
	o.StockItem = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogInventoryDataStockStatusInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogInventoryDataStockStatusInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogInventoryDataStockStatusInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogInventoryDataStockStatusInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogInventoryDataStockStatusInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogInventoryDataStockStatusInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product_id"] = o.ProductId
	toSerialize["stock_id"] = o.StockId
	toSerialize["qty"] = o.Qty
	toSerialize["stock_status"] = o.StockStatus
	toSerialize["stock_item"] = o.StockItem
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogInventoryDataStockStatusInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product_id",
		"stock_id",
		"qty",
		"stock_status",
		"stock_item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogInventoryDataStockStatusInterface := _CatalogInventoryDataStockStatusInterface{}

	err = json.Unmarshal(data, &varCatalogInventoryDataStockStatusInterface)

	if err != nil {
		return err
	}

	*o = CatalogInventoryDataStockStatusInterface(varCatalogInventoryDataStockStatusInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "product_id")
		delete(additionalProperties, "stock_id")
		delete(additionalProperties, "qty")
		delete(additionalProperties, "stock_status")
		delete(additionalProperties, "stock_item")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogInventoryDataStockStatusInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogInventoryDataStockStatusInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogInventoryDataStockStatusInterface struct {
	value *CatalogInventoryDataStockStatusInterface
	isSet bool
}

func (v NullableCatalogInventoryDataStockStatusInterface) Get() *CatalogInventoryDataStockStatusInterface {
	return v.value
}

func (v *NullableCatalogInventoryDataStockStatusInterface) Set(val *CatalogInventoryDataStockStatusInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogInventoryDataStockStatusInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogInventoryDataStockStatusInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogInventoryDataStockStatusInterface(val *CatalogInventoryDataStockStatusInterface) *NullableCatalogInventoryDataStockStatusInterface {
	return &NullableCatalogInventoryDataStockStatusInterface{value: val, isSet: true}
}

func (v NullableCatalogInventoryDataStockStatusInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogInventoryDataStockStatusInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
