/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerDataRegionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerDataRegionInterface{}

// CustomerDataRegionInterface Customer address region interface.
type CustomerDataRegionInterface struct {
	// Region code
	RegionCode string `json:"region_code"`
	// Region
	Region string `json:"region"`
	// Region id
	RegionId int32 `json:"region_id"`
	// ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerDataRegionInterface CustomerDataRegionInterface

// NewCustomerDataRegionInterface instantiates a new CustomerDataRegionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerDataRegionInterface(regionCode string, region string, regionId int32) *CustomerDataRegionInterface {
	this := CustomerDataRegionInterface{}
	this.RegionCode = regionCode
	this.Region = region
	this.RegionId = regionId
	return &this
}

// NewCustomerDataRegionInterfaceWithDefaults instantiates a new CustomerDataRegionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerDataRegionInterfaceWithDefaults() *CustomerDataRegionInterface {
	this := CustomerDataRegionInterface{}
	return &this
}

// GetRegionCode returns the RegionCode field value
func (o *CustomerDataRegionInterface) GetRegionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value
// and a boolean to check if the value has been set.
func (o *CustomerDataRegionInterface) GetRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCode, true
}

// SetRegionCode sets field value
func (o *CustomerDataRegionInterface) SetRegionCode(v string) {
	o.RegionCode = v
}

// GetRegion returns the Region field value
func (o *CustomerDataRegionInterface) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CustomerDataRegionInterface) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CustomerDataRegionInterface) SetRegion(v string) {
	o.Region = v
}

// GetRegionId returns the RegionId field value
func (o *CustomerDataRegionInterface) GetRegionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *CustomerDataRegionInterface) GetRegionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *CustomerDataRegionInterface) SetRegionId(v int32) {
	o.RegionId = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CustomerDataRegionInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDataRegionInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CustomerDataRegionInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CustomerDataRegionInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CustomerDataRegionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerDataRegionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region_code"] = o.RegionCode
	toSerialize["region"] = o.Region
	toSerialize["region_id"] = o.RegionId
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerDataRegionInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region_code",
		"region",
		"region_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerDataRegionInterface := _CustomerDataRegionInterface{}

	err = json.Unmarshal(data, &varCustomerDataRegionInterface)

	if err != nil {
		return err
	}

	*o = CustomerDataRegionInterface(varCustomerDataRegionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "region_code")
		delete(additionalProperties, "region")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CustomerDataRegionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CustomerDataRegionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCustomerDataRegionInterface struct {
	value *CustomerDataRegionInterface
	isSet bool
}

func (v NullableCustomerDataRegionInterface) Get() *CustomerDataRegionInterface {
	return v.value
}

func (v *NullableCustomerDataRegionInterface) Set(val *CustomerDataRegionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerDataRegionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerDataRegionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerDataRegionInterface(val *CustomerDataRegionInterface) *NullableCustomerDataRegionInterface {
	return &NullableCustomerDataRegionInterface{value: val, isSet: true}
}

func (v NullableCustomerDataRegionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerDataRegionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
