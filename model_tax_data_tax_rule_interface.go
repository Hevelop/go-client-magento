/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxDataTaxRuleInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxDataTaxRuleInterface{}

// TaxDataTaxRuleInterface Tax rule interface.
type TaxDataTaxRuleInterface struct {
	// Id
	Id *int32 `json:"id,omitempty"`
	// Tax rule code
	Code string `json:"code"`
	// Priority
	Priority int32 `json:"priority"`
	// Sort order.
	Position int32 `json:"position"`
	// Customer tax class id
	CustomerTaxClassIds []int32 `json:"customer_tax_class_ids"`
	// Product tax class id
	ProductTaxClassIds []int32 `json:"product_tax_class_ids"`
	// Tax rate ids
	TaxRateIds []int32 `json:"tax_rate_ids"`
	// Calculate subtotal.
	CalculateSubtotal *bool `json:"calculate_subtotal,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaxDataTaxRuleInterface TaxDataTaxRuleInterface

// NewTaxDataTaxRuleInterface instantiates a new TaxDataTaxRuleInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxDataTaxRuleInterface(code string, priority int32, position int32, customerTaxClassIds []int32, productTaxClassIds []int32, taxRateIds []int32) *TaxDataTaxRuleInterface {
	this := TaxDataTaxRuleInterface{}
	this.Code = code
	this.Priority = priority
	this.Position = position
	this.CustomerTaxClassIds = customerTaxClassIds
	this.ProductTaxClassIds = productTaxClassIds
	this.TaxRateIds = taxRateIds
	return &this
}

// NewTaxDataTaxRuleInterfaceWithDefaults instantiates a new TaxDataTaxRuleInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxDataTaxRuleInterfaceWithDefaults() *TaxDataTaxRuleInterface {
	this := TaxDataTaxRuleInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxDataTaxRuleInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxDataTaxRuleInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxDataTaxRuleInterface) SetId(v int32) {
	o.Id = &v
}

// GetCode returns the Code field value
func (o *TaxDataTaxRuleInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TaxDataTaxRuleInterface) SetCode(v string) {
	o.Code = v
}

// GetPriority returns the Priority field value
func (o *TaxDataTaxRuleInterface) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *TaxDataTaxRuleInterface) SetPriority(v int32) {
	o.Priority = v
}

// GetPosition returns the Position field value
func (o *TaxDataTaxRuleInterface) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *TaxDataTaxRuleInterface) SetPosition(v int32) {
	o.Position = v
}

// GetCustomerTaxClassIds returns the CustomerTaxClassIds field value
func (o *TaxDataTaxRuleInterface) GetCustomerTaxClassIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.CustomerTaxClassIds
}

// GetCustomerTaxClassIdsOk returns a tuple with the CustomerTaxClassIds field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetCustomerTaxClassIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerTaxClassIds, true
}

// SetCustomerTaxClassIds sets field value
func (o *TaxDataTaxRuleInterface) SetCustomerTaxClassIds(v []int32) {
	o.CustomerTaxClassIds = v
}

// GetProductTaxClassIds returns the ProductTaxClassIds field value
func (o *TaxDataTaxRuleInterface) GetProductTaxClassIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ProductTaxClassIds
}

// GetProductTaxClassIdsOk returns a tuple with the ProductTaxClassIds field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetProductTaxClassIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductTaxClassIds, true
}

// SetProductTaxClassIds sets field value
func (o *TaxDataTaxRuleInterface) SetProductTaxClassIds(v []int32) {
	o.ProductTaxClassIds = v
}

// GetTaxRateIds returns the TaxRateIds field value
func (o *TaxDataTaxRuleInterface) GetTaxRateIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.TaxRateIds
}

// GetTaxRateIdsOk returns a tuple with the TaxRateIds field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetTaxRateIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRateIds, true
}

// SetTaxRateIds sets field value
func (o *TaxDataTaxRuleInterface) SetTaxRateIds(v []int32) {
	o.TaxRateIds = v
}

// GetCalculateSubtotal returns the CalculateSubtotal field value if set, zero value otherwise.
func (o *TaxDataTaxRuleInterface) GetCalculateSubtotal() bool {
	if o == nil || IsNil(o.CalculateSubtotal) {
		var ret bool
		return ret
	}
	return *o.CalculateSubtotal
}

// GetCalculateSubtotalOk returns a tuple with the CalculateSubtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetCalculateSubtotalOk() (*bool, bool) {
	if o == nil || IsNil(o.CalculateSubtotal) {
		return nil, false
	}
	return o.CalculateSubtotal, true
}

// HasCalculateSubtotal returns a boolean if a field has been set.
func (o *TaxDataTaxRuleInterface) HasCalculateSubtotal() bool {
	if o != nil && !IsNil(o.CalculateSubtotal) {
		return true
	}

	return false
}

// SetCalculateSubtotal gets a reference to the given bool and assigns it to the CalculateSubtotal field.
func (o *TaxDataTaxRuleInterface) SetCalculateSubtotal(v bool) {
	o.CalculateSubtotal = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *TaxDataTaxRuleInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRuleInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *TaxDataTaxRuleInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *TaxDataTaxRuleInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o TaxDataTaxRuleInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxDataTaxRuleInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["code"] = o.Code
	toSerialize["priority"] = o.Priority
	toSerialize["position"] = o.Position
	toSerialize["customer_tax_class_ids"] = o.CustomerTaxClassIds
	toSerialize["product_tax_class_ids"] = o.ProductTaxClassIds
	toSerialize["tax_rate_ids"] = o.TaxRateIds
	if !IsNil(o.CalculateSubtotal) {
		toSerialize["calculate_subtotal"] = o.CalculateSubtotal
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaxDataTaxRuleInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"priority",
		"position",
		"customer_tax_class_ids",
		"product_tax_class_ids",
		"tax_rate_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxDataTaxRuleInterface := _TaxDataTaxRuleInterface{}

	err = json.Unmarshal(data, &varTaxDataTaxRuleInterface)

	if err != nil {
		return err
	}

	*o = TaxDataTaxRuleInterface(varTaxDataTaxRuleInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "position")
		delete(additionalProperties, "customer_tax_class_ids")
		delete(additionalProperties, "product_tax_class_ids")
		delete(additionalProperties, "tax_rate_ids")
		delete(additionalProperties, "calculate_subtotal")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *TaxDataTaxRuleInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *TaxDataTaxRuleInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableTaxDataTaxRuleInterface struct {
	value *TaxDataTaxRuleInterface
	isSet bool
}

func (v NullableTaxDataTaxRuleInterface) Get() *TaxDataTaxRuleInterface {
	return v.value
}

func (v *NullableTaxDataTaxRuleInterface) Set(val *TaxDataTaxRuleInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxDataTaxRuleInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxDataTaxRuleInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxDataTaxRuleInterface(val *TaxDataTaxRuleInterface) *NullableTaxDataTaxRuleInterface {
	return &NullableTaxDataTaxRuleInterface{value: val, isSet: true}
}

func (v NullableTaxDataTaxRuleInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxDataTaxRuleInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
