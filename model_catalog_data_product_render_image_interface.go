/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataProductRenderImageInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductRenderImageInterface{}

// CatalogDataProductRenderImageInterface Product Render image interface. Represents physical characteristics of image, that can be used in product listing or product view
type CatalogDataProductRenderImageInterface struct {
	// Image url
	Url string `json:"url"`
	// Image code
	Code string `json:"code"`
	// Image height
	Height float32 `json:"height"`
	// Image width in px
	Width float32 `json:"width"`
	// Image label
	Label string `json:"label"`
	// Resize width
	ResizedWidth float32 `json:"resized_width"`
	// Resize height
	ResizedHeight float32 `json:"resized_height"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataProductRenderImageInterface CatalogDataProductRenderImageInterface

// NewCatalogDataProductRenderImageInterface instantiates a new CatalogDataProductRenderImageInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductRenderImageInterface(url string, code string, height float32, width float32, label string, resizedWidth float32, resizedHeight float32) *CatalogDataProductRenderImageInterface {
	this := CatalogDataProductRenderImageInterface{}
	this.Url = url
	this.Code = code
	this.Height = height
	this.Width = width
	this.Label = label
	this.ResizedWidth = resizedWidth
	this.ResizedHeight = resizedHeight
	return &this
}

// NewCatalogDataProductRenderImageInterfaceWithDefaults instantiates a new CatalogDataProductRenderImageInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductRenderImageInterfaceWithDefaults() *CatalogDataProductRenderImageInterface {
	this := CatalogDataProductRenderImageInterface{}
	return &this
}

// GetUrl returns the Url field value
func (o *CatalogDataProductRenderImageInterface) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CatalogDataProductRenderImageInterface) SetUrl(v string) {
	o.Url = v
}

// GetCode returns the Code field value
func (o *CatalogDataProductRenderImageInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CatalogDataProductRenderImageInterface) SetCode(v string) {
	o.Code = v
}

// GetHeight returns the Height field value
func (o *CatalogDataProductRenderImageInterface) GetHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *CatalogDataProductRenderImageInterface) SetHeight(v float32) {
	o.Height = v
}

// GetWidth returns the Width field value
func (o *CatalogDataProductRenderImageInterface) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *CatalogDataProductRenderImageInterface) SetWidth(v float32) {
	o.Width = v
}

// GetLabel returns the Label field value
func (o *CatalogDataProductRenderImageInterface) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CatalogDataProductRenderImageInterface) SetLabel(v string) {
	o.Label = v
}

// GetResizedWidth returns the ResizedWidth field value
func (o *CatalogDataProductRenderImageInterface) GetResizedWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ResizedWidth
}

// GetResizedWidthOk returns a tuple with the ResizedWidth field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetResizedWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResizedWidth, true
}

// SetResizedWidth sets field value
func (o *CatalogDataProductRenderImageInterface) SetResizedWidth(v float32) {
	o.ResizedWidth = v
}

// GetResizedHeight returns the ResizedHeight field value
func (o *CatalogDataProductRenderImageInterface) GetResizedHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ResizedHeight
}

// GetResizedHeightOk returns a tuple with the ResizedHeight field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetResizedHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResizedHeight, true
}

// SetResizedHeight sets field value
func (o *CatalogDataProductRenderImageInterface) SetResizedHeight(v float32) {
	o.ResizedHeight = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataProductRenderImageInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderImageInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataProductRenderImageInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataProductRenderImageInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogDataProductRenderImageInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductRenderImageInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["code"] = o.Code
	toSerialize["height"] = o.Height
	toSerialize["width"] = o.Width
	toSerialize["label"] = o.Label
	toSerialize["resized_width"] = o.ResizedWidth
	toSerialize["resized_height"] = o.ResizedHeight
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductRenderImageInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"code",
		"height",
		"width",
		"label",
		"resized_width",
		"resized_height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataProductRenderImageInterface := _CatalogDataProductRenderImageInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductRenderImageInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductRenderImageInterface(varCatalogDataProductRenderImageInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "code")
		delete(additionalProperties, "height")
		delete(additionalProperties, "width")
		delete(additionalProperties, "label")
		delete(additionalProperties, "resized_width")
		delete(additionalProperties, "resized_height")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductRenderImageInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductRenderImageInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductRenderImageInterface struct {
	value *CatalogDataProductRenderImageInterface
	isSet bool
}

func (v NullableCatalogDataProductRenderImageInterface) Get() *CatalogDataProductRenderImageInterface {
	return v.value
}

func (v *NullableCatalogDataProductRenderImageInterface) Set(val *CatalogDataProductRenderImageInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductRenderImageInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductRenderImageInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductRenderImageInterface(val *CatalogDataProductRenderImageInterface) *NullableCatalogDataProductRenderImageInterface {
	return &NullableCatalogDataProductRenderImageInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductRenderImageInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductRenderImageInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
