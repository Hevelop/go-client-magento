/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the PutV1CategoriesCategoryIdMoveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutV1CategoriesCategoryIdMoveRequest{}

// PutV1CategoriesCategoryIdMoveRequest struct for PutV1CategoriesCategoryIdMoveRequest
type PutV1CategoriesCategoryIdMoveRequest struct {
	ParentId             int32  `json:"parentId"`
	AfterId              *int32 `json:"afterId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PutV1CategoriesCategoryIdMoveRequest PutV1CategoriesCategoryIdMoveRequest

// NewPutV1CategoriesCategoryIdMoveRequest instantiates a new PutV1CategoriesCategoryIdMoveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutV1CategoriesCategoryIdMoveRequest(parentId int32) *PutV1CategoriesCategoryIdMoveRequest {
	this := PutV1CategoriesCategoryIdMoveRequest{}
	this.ParentId = parentId
	return &this
}

// NewPutV1CategoriesCategoryIdMoveRequestWithDefaults instantiates a new PutV1CategoriesCategoryIdMoveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutV1CategoriesCategoryIdMoveRequestWithDefaults() *PutV1CategoriesCategoryIdMoveRequest {
	this := PutV1CategoriesCategoryIdMoveRequest{}
	return &this
}

// GetParentId returns the ParentId field value
func (o *PutV1CategoriesCategoryIdMoveRequest) GetParentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *PutV1CategoriesCategoryIdMoveRequest) GetParentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *PutV1CategoriesCategoryIdMoveRequest) SetParentId(v int32) {
	o.ParentId = v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *PutV1CategoriesCategoryIdMoveRequest) GetAfterId() int32 {
	if o == nil || IsNil(o.AfterId) {
		var ret int32
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutV1CategoriesCategoryIdMoveRequest) GetAfterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AfterId) {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *PutV1CategoriesCategoryIdMoveRequest) HasAfterId() bool {
	if o != nil && !IsNil(o.AfterId) {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given int32 and assigns it to the AfterId field.
func (o *PutV1CategoriesCategoryIdMoveRequest) SetAfterId(v int32) {
	o.AfterId = &v
}

func (o PutV1CategoriesCategoryIdMoveRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutV1CategoriesCategoryIdMoveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parentId"] = o.ParentId
	if !IsNil(o.AfterId) {
		toSerialize["afterId"] = o.AfterId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PutV1CategoriesCategoryIdMoveRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parentId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutV1CategoriesCategoryIdMoveRequest := _PutV1CategoriesCategoryIdMoveRequest{}

	err = json.Unmarshal(data, &varPutV1CategoriesCategoryIdMoveRequest)

	if err != nil {
		return err
	}

	*o = PutV1CategoriesCategoryIdMoveRequest(varPutV1CategoriesCategoryIdMoveRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "afterId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PutV1CategoriesCategoryIdMoveRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *PutV1CategoriesCategoryIdMoveRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullablePutV1CategoriesCategoryIdMoveRequest struct {
	value *PutV1CategoriesCategoryIdMoveRequest
	isSet bool
}

func (v NullablePutV1CategoriesCategoryIdMoveRequest) Get() *PutV1CategoriesCategoryIdMoveRequest {
	return v.value
}

func (v *NullablePutV1CategoriesCategoryIdMoveRequest) Set(val *PutV1CategoriesCategoryIdMoveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutV1CategoriesCategoryIdMoveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutV1CategoriesCategoryIdMoveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutV1CategoriesCategoryIdMoveRequest(val *PutV1CategoriesCategoryIdMoveRequest) *NullablePutV1CategoriesCategoryIdMoveRequest {
	return &NullablePutV1CategoriesCategoryIdMoveRequest{value: val, isSet: true}
}

func (v NullablePutV1CategoriesCategoryIdMoveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutV1CategoriesCategoryIdMoveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
