/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the FrameworkSearchFilterGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworkSearchFilterGroup{}

// FrameworkSearchFilterGroup Groups two or more filters together using a logical OR
type FrameworkSearchFilterGroup struct {
	// A list of filters in this group
	Filters              []FrameworkFilter `json:"filters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FrameworkSearchFilterGroup FrameworkSearchFilterGroup

// NewFrameworkSearchFilterGroup instantiates a new FrameworkSearchFilterGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworkSearchFilterGroup() *FrameworkSearchFilterGroup {
	this := FrameworkSearchFilterGroup{}
	return &this
}

// NewFrameworkSearchFilterGroupWithDefaults instantiates a new FrameworkSearchFilterGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworkSearchFilterGroupWithDefaults() *FrameworkSearchFilterGroup {
	this := FrameworkSearchFilterGroup{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *FrameworkSearchFilterGroup) GetFilters() []FrameworkFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []FrameworkFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworkSearchFilterGroup) GetFiltersOk() ([]FrameworkFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *FrameworkSearchFilterGroup) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FrameworkFilter and assigns it to the Filters field.
func (o *FrameworkSearchFilterGroup) SetFilters(v []FrameworkFilter) {
	o.Filters = v
}

func (o FrameworkSearchFilterGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworkSearchFilterGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FrameworkSearchFilterGroup) UnmarshalJSON(data []byte) (err error) {
	varFrameworkSearchFilterGroup := _FrameworkSearchFilterGroup{}

	err = json.Unmarshal(data, &varFrameworkSearchFilterGroup)

	if err != nil {
		return err
	}

	*o = FrameworkSearchFilterGroup(varFrameworkSearchFilterGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *FrameworkSearchFilterGroup) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *FrameworkSearchFilterGroup) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableFrameworkSearchFilterGroup struct {
	value *FrameworkSearchFilterGroup
	isSet bool
}

func (v NullableFrameworkSearchFilterGroup) Get() *FrameworkSearchFilterGroup {
	return v.value
}

func (v *NullableFrameworkSearchFilterGroup) Set(val *FrameworkSearchFilterGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworkSearchFilterGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworkSearchFilterGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworkSearchFilterGroup(val *FrameworkSearchFilterGroup) *NullableFrameworkSearchFilterGroup {
	return &NullableFrameworkSearchFilterGroup{value: val, isSet: true}
}

func (v NullableFrameworkSearchFilterGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworkSearchFilterGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
