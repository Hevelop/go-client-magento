/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataCategoryAttributeInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataCategoryAttributeInterface{}

// CatalogDataCategoryAttributeInterface
type CatalogDataCategoryAttributeInterface struct {
	// WYSIWYG flag
	IsWysiwygEnabled *bool `json:"is_wysiwyg_enabled,omitempty"`
	// The HTML tags are allowed on the frontend
	IsHtmlAllowedOnFront *bool `json:"is_html_allowed_on_front,omitempty"`
	// It is used for sorting in product listing
	UsedForSortBy *bool `json:"used_for_sort_by,omitempty"`
	// It used in layered navigation
	IsFilterable *bool `json:"is_filterable,omitempty"`
	// It is used in search results layered navigation
	IsFilterableInSearch *bool `json:"is_filterable_in_search,omitempty"`
	// It is used in catalog product grid
	IsUsedInGrid *bool `json:"is_used_in_grid,omitempty"`
	// It is visible in catalog product grid
	IsVisibleInGrid *bool `json:"is_visible_in_grid,omitempty"`
	// It is filterable in catalog product grid
	IsFilterableInGrid *bool `json:"is_filterable_in_grid,omitempty"`
	// Position
	Position *int32 `json:"position,omitempty"`
	// Apply to value for the element
	ApplyTo []string `json:"apply_to,omitempty"`
	// The attribute can be used in Quick Search
	IsSearchable *string `json:"is_searchable,omitempty"`
	// The attribute can be used in Advanced Search
	IsVisibleInAdvancedSearch *string `json:"is_visible_in_advanced_search,omitempty"`
	// The attribute can be compared on the frontend
	IsComparable *string `json:"is_comparable,omitempty"`
	// The attribute can be used for promo rules
	IsUsedForPromoRules *string `json:"is_used_for_promo_rules,omitempty"`
	// The attribute is visible on the frontend
	IsVisibleOnFront *string `json:"is_visible_on_front,omitempty"`
	// The attribute can be used in product listing
	UsedInProductListing *string `json:"used_in_product_listing,omitempty"`
	// Attribute is visible on frontend.
	IsVisible *bool `json:"is_visible,omitempty"`
	// Attribute scope
	Scope *string `json:"scope,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface
	ExtensionAttributes map[string]interface{} `json:"extension_attributes,omitempty"`
	// Id of the attribute.
	AttributeId *int32 `json:"attribute_id,omitempty"`
	// Code of the attribute.
	AttributeCode string `json:"attribute_code"`
	// HTML for input element.
	FrontendInput string `json:"frontend_input"`
	// Entity type id
	EntityTypeId string `json:"entity_type_id"`
	// Attribute is required.
	IsRequired bool `json:"is_required"`
	// Options of the attribute (key => value pairs for select)
	Options []EavDataAttributeOptionInterface `json:"options,omitempty"`
	// Current attribute has been defined by a user.
	IsUserDefined *bool `json:"is_user_defined,omitempty"`
	// Frontend label for default store
	DefaultFrontendLabel *string `json:"default_frontend_label,omitempty"`
	// Frontend label for each store
	FrontendLabels []EavDataAttributeFrontendLabelInterface `json:"frontend_labels"`
	// The note attribute for the element.
	Note *string `json:"note,omitempty"`
	// Backend type.
	BackendType *string `json:"backend_type,omitempty"`
	// Backend model
	BackendModel *string `json:"backend_model,omitempty"`
	// Source model
	SourceModel *string `json:"source_model,omitempty"`
	// Default value for the element.
	DefaultValue *string `json:"default_value,omitempty"`
	// This is a unique attribute
	IsUnique *string `json:"is_unique,omitempty"`
	// Frontend class of attribute
	FrontendClass *string `json:"frontend_class,omitempty"`
	// Validation rules.
	ValidationRules []EavDataAttributeValidationRuleInterface `json:"validation_rules,omitempty"`
	// Custom attributes values.
	CustomAttributes     []FrameworkAttributeInterface `json:"custom_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataCategoryAttributeInterface CatalogDataCategoryAttributeInterface

// NewCatalogDataCategoryAttributeInterface instantiates a new CatalogDataCategoryAttributeInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataCategoryAttributeInterface(attributeCode string, frontendInput string, entityTypeId string, isRequired bool, frontendLabels []EavDataAttributeFrontendLabelInterface) *CatalogDataCategoryAttributeInterface {
	this := CatalogDataCategoryAttributeInterface{}
	this.AttributeCode = attributeCode
	this.FrontendInput = frontendInput
	this.EntityTypeId = entityTypeId
	this.IsRequired = isRequired
	this.FrontendLabels = frontendLabels
	return &this
}

// NewCatalogDataCategoryAttributeInterfaceWithDefaults instantiates a new CatalogDataCategoryAttributeInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataCategoryAttributeInterfaceWithDefaults() *CatalogDataCategoryAttributeInterface {
	this := CatalogDataCategoryAttributeInterface{}
	return &this
}

// GetIsWysiwygEnabled returns the IsWysiwygEnabled field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsWysiwygEnabled() bool {
	if o == nil || IsNil(o.IsWysiwygEnabled) {
		var ret bool
		return ret
	}
	return *o.IsWysiwygEnabled
}

// GetIsWysiwygEnabledOk returns a tuple with the IsWysiwygEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsWysiwygEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWysiwygEnabled) {
		return nil, false
	}
	return o.IsWysiwygEnabled, true
}

// HasIsWysiwygEnabled returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsWysiwygEnabled() bool {
	if o != nil && !IsNil(o.IsWysiwygEnabled) {
		return true
	}

	return false
}

// SetIsWysiwygEnabled gets a reference to the given bool and assigns it to the IsWysiwygEnabled field.
func (o *CatalogDataCategoryAttributeInterface) SetIsWysiwygEnabled(v bool) {
	o.IsWysiwygEnabled = &v
}

// GetIsHtmlAllowedOnFront returns the IsHtmlAllowedOnFront field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsHtmlAllowedOnFront() bool {
	if o == nil || IsNil(o.IsHtmlAllowedOnFront) {
		var ret bool
		return ret
	}
	return *o.IsHtmlAllowedOnFront
}

// GetIsHtmlAllowedOnFrontOk returns a tuple with the IsHtmlAllowedOnFront field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsHtmlAllowedOnFrontOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHtmlAllowedOnFront) {
		return nil, false
	}
	return o.IsHtmlAllowedOnFront, true
}

// HasIsHtmlAllowedOnFront returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsHtmlAllowedOnFront() bool {
	if o != nil && !IsNil(o.IsHtmlAllowedOnFront) {
		return true
	}

	return false
}

// SetIsHtmlAllowedOnFront gets a reference to the given bool and assigns it to the IsHtmlAllowedOnFront field.
func (o *CatalogDataCategoryAttributeInterface) SetIsHtmlAllowedOnFront(v bool) {
	o.IsHtmlAllowedOnFront = &v
}

// GetUsedForSortBy returns the UsedForSortBy field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetUsedForSortBy() bool {
	if o == nil || IsNil(o.UsedForSortBy) {
		var ret bool
		return ret
	}
	return *o.UsedForSortBy
}

// GetUsedForSortByOk returns a tuple with the UsedForSortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetUsedForSortByOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedForSortBy) {
		return nil, false
	}
	return o.UsedForSortBy, true
}

// HasUsedForSortBy returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasUsedForSortBy() bool {
	if o != nil && !IsNil(o.UsedForSortBy) {
		return true
	}

	return false
}

// SetUsedForSortBy gets a reference to the given bool and assigns it to the UsedForSortBy field.
func (o *CatalogDataCategoryAttributeInterface) SetUsedForSortBy(v bool) {
	o.UsedForSortBy = &v
}

// GetIsFilterable returns the IsFilterable field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterable() bool {
	if o == nil || IsNil(o.IsFilterable) {
		var ret bool
		return ret
	}
	return *o.IsFilterable
}

// GetIsFilterableOk returns a tuple with the IsFilterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFilterable) {
		return nil, false
	}
	return o.IsFilterable, true
}

// HasIsFilterable returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsFilterable() bool {
	if o != nil && !IsNil(o.IsFilterable) {
		return true
	}

	return false
}

// SetIsFilterable gets a reference to the given bool and assigns it to the IsFilterable field.
func (o *CatalogDataCategoryAttributeInterface) SetIsFilterable(v bool) {
	o.IsFilterable = &v
}

// GetIsFilterableInSearch returns the IsFilterableInSearch field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterableInSearch() bool {
	if o == nil || IsNil(o.IsFilterableInSearch) {
		var ret bool
		return ret
	}
	return *o.IsFilterableInSearch
}

// GetIsFilterableInSearchOk returns a tuple with the IsFilterableInSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterableInSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFilterableInSearch) {
		return nil, false
	}
	return o.IsFilterableInSearch, true
}

// HasIsFilterableInSearch returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsFilterableInSearch() bool {
	if o != nil && !IsNil(o.IsFilterableInSearch) {
		return true
	}

	return false
}

// SetIsFilterableInSearch gets a reference to the given bool and assigns it to the IsFilterableInSearch field.
func (o *CatalogDataCategoryAttributeInterface) SetIsFilterableInSearch(v bool) {
	o.IsFilterableInSearch = &v
}

// GetIsUsedInGrid returns the IsUsedInGrid field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsUsedInGrid() bool {
	if o == nil || IsNil(o.IsUsedInGrid) {
		var ret bool
		return ret
	}
	return *o.IsUsedInGrid
}

// GetIsUsedInGridOk returns a tuple with the IsUsedInGrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsUsedInGridOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsedInGrid) {
		return nil, false
	}
	return o.IsUsedInGrid, true
}

// HasIsUsedInGrid returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsUsedInGrid() bool {
	if o != nil && !IsNil(o.IsUsedInGrid) {
		return true
	}

	return false
}

// SetIsUsedInGrid gets a reference to the given bool and assigns it to the IsUsedInGrid field.
func (o *CatalogDataCategoryAttributeInterface) SetIsUsedInGrid(v bool) {
	o.IsUsedInGrid = &v
}

// GetIsVisibleInGrid returns the IsVisibleInGrid field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleInGrid() bool {
	if o == nil || IsNil(o.IsVisibleInGrid) {
		var ret bool
		return ret
	}
	return *o.IsVisibleInGrid
}

// GetIsVisibleInGridOk returns a tuple with the IsVisibleInGrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleInGridOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisibleInGrid) {
		return nil, false
	}
	return o.IsVisibleInGrid, true
}

// HasIsVisibleInGrid returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsVisibleInGrid() bool {
	if o != nil && !IsNil(o.IsVisibleInGrid) {
		return true
	}

	return false
}

// SetIsVisibleInGrid gets a reference to the given bool and assigns it to the IsVisibleInGrid field.
func (o *CatalogDataCategoryAttributeInterface) SetIsVisibleInGrid(v bool) {
	o.IsVisibleInGrid = &v
}

// GetIsFilterableInGrid returns the IsFilterableInGrid field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterableInGrid() bool {
	if o == nil || IsNil(o.IsFilterableInGrid) {
		var ret bool
		return ret
	}
	return *o.IsFilterableInGrid
}

// GetIsFilterableInGridOk returns a tuple with the IsFilterableInGrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsFilterableInGridOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFilterableInGrid) {
		return nil, false
	}
	return o.IsFilterableInGrid, true
}

// HasIsFilterableInGrid returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsFilterableInGrid() bool {
	if o != nil && !IsNil(o.IsFilterableInGrid) {
		return true
	}

	return false
}

// SetIsFilterableInGrid gets a reference to the given bool and assigns it to the IsFilterableInGrid field.
func (o *CatalogDataCategoryAttributeInterface) SetIsFilterableInGrid(v bool) {
	o.IsFilterableInGrid = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *CatalogDataCategoryAttributeInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetApplyTo returns the ApplyTo field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetApplyTo() []string {
	if o == nil || IsNil(o.ApplyTo) {
		var ret []string
		return ret
	}
	return o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetApplyToOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplyTo) {
		return nil, false
	}
	return o.ApplyTo, true
}

// HasApplyTo returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasApplyTo() bool {
	if o != nil && !IsNil(o.ApplyTo) {
		return true
	}

	return false
}

// SetApplyTo gets a reference to the given []string and assigns it to the ApplyTo field.
func (o *CatalogDataCategoryAttributeInterface) SetApplyTo(v []string) {
	o.ApplyTo = v
}

// GetIsSearchable returns the IsSearchable field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsSearchable() string {
	if o == nil || IsNil(o.IsSearchable) {
		var ret string
		return ret
	}
	return *o.IsSearchable
}

// GetIsSearchableOk returns a tuple with the IsSearchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsSearchableOk() (*string, bool) {
	if o == nil || IsNil(o.IsSearchable) {
		return nil, false
	}
	return o.IsSearchable, true
}

// HasIsSearchable returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsSearchable() bool {
	if o != nil && !IsNil(o.IsSearchable) {
		return true
	}

	return false
}

// SetIsSearchable gets a reference to the given string and assigns it to the IsSearchable field.
func (o *CatalogDataCategoryAttributeInterface) SetIsSearchable(v string) {
	o.IsSearchable = &v
}

// GetIsVisibleInAdvancedSearch returns the IsVisibleInAdvancedSearch field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleInAdvancedSearch() string {
	if o == nil || IsNil(o.IsVisibleInAdvancedSearch) {
		var ret string
		return ret
	}
	return *o.IsVisibleInAdvancedSearch
}

// GetIsVisibleInAdvancedSearchOk returns a tuple with the IsVisibleInAdvancedSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleInAdvancedSearchOk() (*string, bool) {
	if o == nil || IsNil(o.IsVisibleInAdvancedSearch) {
		return nil, false
	}
	return o.IsVisibleInAdvancedSearch, true
}

// HasIsVisibleInAdvancedSearch returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsVisibleInAdvancedSearch() bool {
	if o != nil && !IsNil(o.IsVisibleInAdvancedSearch) {
		return true
	}

	return false
}

// SetIsVisibleInAdvancedSearch gets a reference to the given string and assigns it to the IsVisibleInAdvancedSearch field.
func (o *CatalogDataCategoryAttributeInterface) SetIsVisibleInAdvancedSearch(v string) {
	o.IsVisibleInAdvancedSearch = &v
}

// GetIsComparable returns the IsComparable field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsComparable() string {
	if o == nil || IsNil(o.IsComparable) {
		var ret string
		return ret
	}
	return *o.IsComparable
}

// GetIsComparableOk returns a tuple with the IsComparable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsComparableOk() (*string, bool) {
	if o == nil || IsNil(o.IsComparable) {
		return nil, false
	}
	return o.IsComparable, true
}

// HasIsComparable returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsComparable() bool {
	if o != nil && !IsNil(o.IsComparable) {
		return true
	}

	return false
}

// SetIsComparable gets a reference to the given string and assigns it to the IsComparable field.
func (o *CatalogDataCategoryAttributeInterface) SetIsComparable(v string) {
	o.IsComparable = &v
}

// GetIsUsedForPromoRules returns the IsUsedForPromoRules field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsUsedForPromoRules() string {
	if o == nil || IsNil(o.IsUsedForPromoRules) {
		var ret string
		return ret
	}
	return *o.IsUsedForPromoRules
}

// GetIsUsedForPromoRulesOk returns a tuple with the IsUsedForPromoRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsUsedForPromoRulesOk() (*string, bool) {
	if o == nil || IsNil(o.IsUsedForPromoRules) {
		return nil, false
	}
	return o.IsUsedForPromoRules, true
}

// HasIsUsedForPromoRules returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsUsedForPromoRules() bool {
	if o != nil && !IsNil(o.IsUsedForPromoRules) {
		return true
	}

	return false
}

// SetIsUsedForPromoRules gets a reference to the given string and assigns it to the IsUsedForPromoRules field.
func (o *CatalogDataCategoryAttributeInterface) SetIsUsedForPromoRules(v string) {
	o.IsUsedForPromoRules = &v
}

// GetIsVisibleOnFront returns the IsVisibleOnFront field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleOnFront() string {
	if o == nil || IsNil(o.IsVisibleOnFront) {
		var ret string
		return ret
	}
	return *o.IsVisibleOnFront
}

// GetIsVisibleOnFrontOk returns a tuple with the IsVisibleOnFront field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleOnFrontOk() (*string, bool) {
	if o == nil || IsNil(o.IsVisibleOnFront) {
		return nil, false
	}
	return o.IsVisibleOnFront, true
}

// HasIsVisibleOnFront returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsVisibleOnFront() bool {
	if o != nil && !IsNil(o.IsVisibleOnFront) {
		return true
	}

	return false
}

// SetIsVisibleOnFront gets a reference to the given string and assigns it to the IsVisibleOnFront field.
func (o *CatalogDataCategoryAttributeInterface) SetIsVisibleOnFront(v string) {
	o.IsVisibleOnFront = &v
}

// GetUsedInProductListing returns the UsedInProductListing field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetUsedInProductListing() string {
	if o == nil || IsNil(o.UsedInProductListing) {
		var ret string
		return ret
	}
	return *o.UsedInProductListing
}

// GetUsedInProductListingOk returns a tuple with the UsedInProductListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetUsedInProductListingOk() (*string, bool) {
	if o == nil || IsNil(o.UsedInProductListing) {
		return nil, false
	}
	return o.UsedInProductListing, true
}

// HasUsedInProductListing returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasUsedInProductListing() bool {
	if o != nil && !IsNil(o.UsedInProductListing) {
		return true
	}

	return false
}

// SetUsedInProductListing gets a reference to the given string and assigns it to the UsedInProductListing field.
func (o *CatalogDataCategoryAttributeInterface) SetUsedInProductListing(v string) {
	o.UsedInProductListing = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *CatalogDataCategoryAttributeInterface) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CatalogDataCategoryAttributeInterface) SetScope(v string) {
	o.Scope = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataCategoryAttributeInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

// GetAttributeId returns the AttributeId field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetAttributeId() int32 {
	if o == nil || IsNil(o.AttributeId) {
		var ret int32
		return ret
	}
	return *o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetAttributeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AttributeId) {
		return nil, false
	}
	return o.AttributeId, true
}

// HasAttributeId returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasAttributeId() bool {
	if o != nil && !IsNil(o.AttributeId) {
		return true
	}

	return false
}

// SetAttributeId gets a reference to the given int32 and assigns it to the AttributeId field.
func (o *CatalogDataCategoryAttributeInterface) SetAttributeId(v int32) {
	o.AttributeId = &v
}

// GetAttributeCode returns the AttributeCode field value
func (o *CatalogDataCategoryAttributeInterface) GetAttributeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeCode
}

// GetAttributeCodeOk returns a tuple with the AttributeCode field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetAttributeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeCode, true
}

// SetAttributeCode sets field value
func (o *CatalogDataCategoryAttributeInterface) SetAttributeCode(v string) {
	o.AttributeCode = v
}

// GetFrontendInput returns the FrontendInput field value
func (o *CatalogDataCategoryAttributeInterface) GetFrontendInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FrontendInput
}

// GetFrontendInputOk returns a tuple with the FrontendInput field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetFrontendInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrontendInput, true
}

// SetFrontendInput sets field value
func (o *CatalogDataCategoryAttributeInterface) SetFrontendInput(v string) {
	o.FrontendInput = v
}

// GetEntityTypeId returns the EntityTypeId field value
func (o *CatalogDataCategoryAttributeInterface) GetEntityTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityTypeId
}

// GetEntityTypeIdOk returns a tuple with the EntityTypeId field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetEntityTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityTypeId, true
}

// SetEntityTypeId sets field value
func (o *CatalogDataCategoryAttributeInterface) SetEntityTypeId(v string) {
	o.EntityTypeId = v
}

// GetIsRequired returns the IsRequired field value
func (o *CatalogDataCategoryAttributeInterface) GetIsRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRequired, true
}

// SetIsRequired sets field value
func (o *CatalogDataCategoryAttributeInterface) SetIsRequired(v bool) {
	o.IsRequired = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetOptions() []EavDataAttributeOptionInterface {
	if o == nil || IsNil(o.Options) {
		var ret []EavDataAttributeOptionInterface
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetOptionsOk() ([]EavDataAttributeOptionInterface, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []EavDataAttributeOptionInterface and assigns it to the Options field.
func (o *CatalogDataCategoryAttributeInterface) SetOptions(v []EavDataAttributeOptionInterface) {
	o.Options = v
}

// GetIsUserDefined returns the IsUserDefined field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsUserDefined() bool {
	if o == nil || IsNil(o.IsUserDefined) {
		var ret bool
		return ret
	}
	return *o.IsUserDefined
}

// GetIsUserDefinedOk returns a tuple with the IsUserDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsUserDefinedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserDefined) {
		return nil, false
	}
	return o.IsUserDefined, true
}

// HasIsUserDefined returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsUserDefined() bool {
	if o != nil && !IsNil(o.IsUserDefined) {
		return true
	}

	return false
}

// SetIsUserDefined gets a reference to the given bool and assigns it to the IsUserDefined field.
func (o *CatalogDataCategoryAttributeInterface) SetIsUserDefined(v bool) {
	o.IsUserDefined = &v
}

// GetDefaultFrontendLabel returns the DefaultFrontendLabel field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetDefaultFrontendLabel() string {
	if o == nil || IsNil(o.DefaultFrontendLabel) {
		var ret string
		return ret
	}
	return *o.DefaultFrontendLabel
}

// GetDefaultFrontendLabelOk returns a tuple with the DefaultFrontendLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetDefaultFrontendLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFrontendLabel) {
		return nil, false
	}
	return o.DefaultFrontendLabel, true
}

// HasDefaultFrontendLabel returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasDefaultFrontendLabel() bool {
	if o != nil && !IsNil(o.DefaultFrontendLabel) {
		return true
	}

	return false
}

// SetDefaultFrontendLabel gets a reference to the given string and assigns it to the DefaultFrontendLabel field.
func (o *CatalogDataCategoryAttributeInterface) SetDefaultFrontendLabel(v string) {
	o.DefaultFrontendLabel = &v
}

// GetFrontendLabels returns the FrontendLabels field value
func (o *CatalogDataCategoryAttributeInterface) GetFrontendLabels() []EavDataAttributeFrontendLabelInterface {
	if o == nil {
		var ret []EavDataAttributeFrontendLabelInterface
		return ret
	}

	return o.FrontendLabels
}

// GetFrontendLabelsOk returns a tuple with the FrontendLabels field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetFrontendLabelsOk() ([]EavDataAttributeFrontendLabelInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrontendLabels, true
}

// SetFrontendLabels sets field value
func (o *CatalogDataCategoryAttributeInterface) SetFrontendLabels(v []EavDataAttributeFrontendLabelInterface) {
	o.FrontendLabels = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *CatalogDataCategoryAttributeInterface) SetNote(v string) {
	o.Note = &v
}

// GetBackendType returns the BackendType field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetBackendType() string {
	if o == nil || IsNil(o.BackendType) {
		var ret string
		return ret
	}
	return *o.BackendType
}

// GetBackendTypeOk returns a tuple with the BackendType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetBackendTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BackendType) {
		return nil, false
	}
	return o.BackendType, true
}

// HasBackendType returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasBackendType() bool {
	if o != nil && !IsNil(o.BackendType) {
		return true
	}

	return false
}

// SetBackendType gets a reference to the given string and assigns it to the BackendType field.
func (o *CatalogDataCategoryAttributeInterface) SetBackendType(v string) {
	o.BackendType = &v
}

// GetBackendModel returns the BackendModel field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetBackendModel() string {
	if o == nil || IsNil(o.BackendModel) {
		var ret string
		return ret
	}
	return *o.BackendModel
}

// GetBackendModelOk returns a tuple with the BackendModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetBackendModelOk() (*string, bool) {
	if o == nil || IsNil(o.BackendModel) {
		return nil, false
	}
	return o.BackendModel, true
}

// HasBackendModel returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasBackendModel() bool {
	if o != nil && !IsNil(o.BackendModel) {
		return true
	}

	return false
}

// SetBackendModel gets a reference to the given string and assigns it to the BackendModel field.
func (o *CatalogDataCategoryAttributeInterface) SetBackendModel(v string) {
	o.BackendModel = &v
}

// GetSourceModel returns the SourceModel field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetSourceModel() string {
	if o == nil || IsNil(o.SourceModel) {
		var ret string
		return ret
	}
	return *o.SourceModel
}

// GetSourceModelOk returns a tuple with the SourceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetSourceModelOk() (*string, bool) {
	if o == nil || IsNil(o.SourceModel) {
		return nil, false
	}
	return o.SourceModel, true
}

// HasSourceModel returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasSourceModel() bool {
	if o != nil && !IsNil(o.SourceModel) {
		return true
	}

	return false
}

// SetSourceModel gets a reference to the given string and assigns it to the SourceModel field.
func (o *CatalogDataCategoryAttributeInterface) SetSourceModel(v string) {
	o.SourceModel = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *CatalogDataCategoryAttributeInterface) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetIsUnique() string {
	if o == nil || IsNil(o.IsUnique) {
		var ret string
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetIsUniqueOk() (*string, bool) {
	if o == nil || IsNil(o.IsUnique) {
		return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasIsUnique() bool {
	if o != nil && !IsNil(o.IsUnique) {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given string and assigns it to the IsUnique field.
func (o *CatalogDataCategoryAttributeInterface) SetIsUnique(v string) {
	o.IsUnique = &v
}

// GetFrontendClass returns the FrontendClass field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetFrontendClass() string {
	if o == nil || IsNil(o.FrontendClass) {
		var ret string
		return ret
	}
	return *o.FrontendClass
}

// GetFrontendClassOk returns a tuple with the FrontendClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetFrontendClassOk() (*string, bool) {
	if o == nil || IsNil(o.FrontendClass) {
		return nil, false
	}
	return o.FrontendClass, true
}

// HasFrontendClass returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasFrontendClass() bool {
	if o != nil && !IsNil(o.FrontendClass) {
		return true
	}

	return false
}

// SetFrontendClass gets a reference to the given string and assigns it to the FrontendClass field.
func (o *CatalogDataCategoryAttributeInterface) SetFrontendClass(v string) {
	o.FrontendClass = &v
}

// GetValidationRules returns the ValidationRules field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetValidationRules() []EavDataAttributeValidationRuleInterface {
	if o == nil || IsNil(o.ValidationRules) {
		var ret []EavDataAttributeValidationRuleInterface
		return ret
	}
	return o.ValidationRules
}

// GetValidationRulesOk returns a tuple with the ValidationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetValidationRulesOk() ([]EavDataAttributeValidationRuleInterface, bool) {
	if o == nil || IsNil(o.ValidationRules) {
		return nil, false
	}
	return o.ValidationRules, true
}

// HasValidationRules returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasValidationRules() bool {
	if o != nil && !IsNil(o.ValidationRules) {
		return true
	}

	return false
}

// SetValidationRules gets a reference to the given []EavDataAttributeValidationRuleInterface and assigns it to the ValidationRules field.
func (o *CatalogDataCategoryAttributeInterface) SetValidationRules(v []EavDataAttributeValidationRuleInterface) {
	o.ValidationRules = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *CatalogDataCategoryAttributeInterface) GetCustomAttributes() []FrameworkAttributeInterface {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []FrameworkAttributeInterface
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryAttributeInterface) GetCustomAttributesOk() ([]FrameworkAttributeInterface, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *CatalogDataCategoryAttributeInterface) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []FrameworkAttributeInterface and assigns it to the CustomAttributes field.
func (o *CatalogDataCategoryAttributeInterface) SetCustomAttributes(v []FrameworkAttributeInterface) {
	o.CustomAttributes = v
}

func (o CatalogDataCategoryAttributeInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataCategoryAttributeInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsWysiwygEnabled) {
		toSerialize["is_wysiwyg_enabled"] = o.IsWysiwygEnabled
	}
	if !IsNil(o.IsHtmlAllowedOnFront) {
		toSerialize["is_html_allowed_on_front"] = o.IsHtmlAllowedOnFront
	}
	if !IsNil(o.UsedForSortBy) {
		toSerialize["used_for_sort_by"] = o.UsedForSortBy
	}
	if !IsNil(o.IsFilterable) {
		toSerialize["is_filterable"] = o.IsFilterable
	}
	if !IsNil(o.IsFilterableInSearch) {
		toSerialize["is_filterable_in_search"] = o.IsFilterableInSearch
	}
	if !IsNil(o.IsUsedInGrid) {
		toSerialize["is_used_in_grid"] = o.IsUsedInGrid
	}
	if !IsNil(o.IsVisibleInGrid) {
		toSerialize["is_visible_in_grid"] = o.IsVisibleInGrid
	}
	if !IsNil(o.IsFilterableInGrid) {
		toSerialize["is_filterable_in_grid"] = o.IsFilterableInGrid
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ApplyTo) {
		toSerialize["apply_to"] = o.ApplyTo
	}
	if !IsNil(o.IsSearchable) {
		toSerialize["is_searchable"] = o.IsSearchable
	}
	if !IsNil(o.IsVisibleInAdvancedSearch) {
		toSerialize["is_visible_in_advanced_search"] = o.IsVisibleInAdvancedSearch
	}
	if !IsNil(o.IsComparable) {
		toSerialize["is_comparable"] = o.IsComparable
	}
	if !IsNil(o.IsUsedForPromoRules) {
		toSerialize["is_used_for_promo_rules"] = o.IsUsedForPromoRules
	}
	if !IsNil(o.IsVisibleOnFront) {
		toSerialize["is_visible_on_front"] = o.IsVisibleOnFront
	}
	if !IsNil(o.UsedInProductListing) {
		toSerialize["used_in_product_listing"] = o.UsedInProductListing
	}
	if !IsNil(o.IsVisible) {
		toSerialize["is_visible"] = o.IsVisible
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.AttributeId) {
		toSerialize["attribute_id"] = o.AttributeId
	}
	toSerialize["attribute_code"] = o.AttributeCode
	toSerialize["frontend_input"] = o.FrontendInput
	toSerialize["entity_type_id"] = o.EntityTypeId
	toSerialize["is_required"] = o.IsRequired
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.IsUserDefined) {
		toSerialize["is_user_defined"] = o.IsUserDefined
	}
	if !IsNil(o.DefaultFrontendLabel) {
		toSerialize["default_frontend_label"] = o.DefaultFrontendLabel
	}
	toSerialize["frontend_labels"] = o.FrontendLabels
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.BackendType) {
		toSerialize["backend_type"] = o.BackendType
	}
	if !IsNil(o.BackendModel) {
		toSerialize["backend_model"] = o.BackendModel
	}
	if !IsNil(o.SourceModel) {
		toSerialize["source_model"] = o.SourceModel
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	if !IsNil(o.IsUnique) {
		toSerialize["is_unique"] = o.IsUnique
	}
	if !IsNil(o.FrontendClass) {
		toSerialize["frontend_class"] = o.FrontendClass
	}
	if !IsNil(o.ValidationRules) {
		toSerialize["validation_rules"] = o.ValidationRules
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["custom_attributes"] = o.CustomAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataCategoryAttributeInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute_code",
		"frontend_input",
		"entity_type_id",
		"is_required",
		"frontend_labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataCategoryAttributeInterface := _CatalogDataCategoryAttributeInterface{}

	err = json.Unmarshal(data, &varCatalogDataCategoryAttributeInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataCategoryAttributeInterface(varCatalogDataCategoryAttributeInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "is_wysiwyg_enabled")
		delete(additionalProperties, "is_html_allowed_on_front")
		delete(additionalProperties, "used_for_sort_by")
		delete(additionalProperties, "is_filterable")
		delete(additionalProperties, "is_filterable_in_search")
		delete(additionalProperties, "is_used_in_grid")
		delete(additionalProperties, "is_visible_in_grid")
		delete(additionalProperties, "is_filterable_in_grid")
		delete(additionalProperties, "position")
		delete(additionalProperties, "apply_to")
		delete(additionalProperties, "is_searchable")
		delete(additionalProperties, "is_visible_in_advanced_search")
		delete(additionalProperties, "is_comparable")
		delete(additionalProperties, "is_used_for_promo_rules")
		delete(additionalProperties, "is_visible_on_front")
		delete(additionalProperties, "used_in_product_listing")
		delete(additionalProperties, "is_visible")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "attribute_id")
		delete(additionalProperties, "attribute_code")
		delete(additionalProperties, "frontend_input")
		delete(additionalProperties, "entity_type_id")
		delete(additionalProperties, "is_required")
		delete(additionalProperties, "options")
		delete(additionalProperties, "is_user_defined")
		delete(additionalProperties, "default_frontend_label")
		delete(additionalProperties, "frontend_labels")
		delete(additionalProperties, "note")
		delete(additionalProperties, "backend_type")
		delete(additionalProperties, "backend_model")
		delete(additionalProperties, "source_model")
		delete(additionalProperties, "default_value")
		delete(additionalProperties, "is_unique")
		delete(additionalProperties, "frontend_class")
		delete(additionalProperties, "validation_rules")
		delete(additionalProperties, "custom_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataCategoryAttributeInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataCategoryAttributeInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataCategoryAttributeInterface struct {
	value *CatalogDataCategoryAttributeInterface
	isSet bool
}

func (v NullableCatalogDataCategoryAttributeInterface) Get() *CatalogDataCategoryAttributeInterface {
	return v.value
}

func (v *NullableCatalogDataCategoryAttributeInterface) Set(val *CatalogDataCategoryAttributeInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataCategoryAttributeInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataCategoryAttributeInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataCategoryAttributeInterface(val *CatalogDataCategoryAttributeInterface) *NullableCatalogDataCategoryAttributeInterface {
	return &NullableCatalogDataCategoryAttributeInterface{value: val, isSet: true}
}

func (v NullableCatalogDataCategoryAttributeInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataCategoryAttributeInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
