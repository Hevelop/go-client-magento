/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the GiftCardDataGiftcardAmountInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiftCardDataGiftcardAmountInterface{}

// GiftCardDataGiftcardAmountInterface Interface GiftcardAmountInterface: this interface is used to serialize and deserialize EAV attribute giftcard_amounts
type GiftCardDataGiftcardAmountInterface struct {
	AttributeId  int32   `json:"attribute_id"`
	WebsiteId    int32   `json:"website_id"`
	Value        float32 `json:"value"`
	WebsiteValue float32 `json:"website_value"`
	// ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftcardAmountInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GiftCardDataGiftcardAmountInterface GiftCardDataGiftcardAmountInterface

// NewGiftCardDataGiftcardAmountInterface instantiates a new GiftCardDataGiftcardAmountInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardDataGiftcardAmountInterface(attributeId int32, websiteId int32, value float32, websiteValue float32) *GiftCardDataGiftcardAmountInterface {
	this := GiftCardDataGiftcardAmountInterface{}
	this.AttributeId = attributeId
	this.WebsiteId = websiteId
	this.Value = value
	this.WebsiteValue = websiteValue
	return &this
}

// NewGiftCardDataGiftcardAmountInterfaceWithDefaults instantiates a new GiftCardDataGiftcardAmountInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardDataGiftcardAmountInterfaceWithDefaults() *GiftCardDataGiftcardAmountInterface {
	this := GiftCardDataGiftcardAmountInterface{}
	return &this
}

// GetAttributeId returns the AttributeId field value
func (o *GiftCardDataGiftcardAmountInterface) GetAttributeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value
// and a boolean to check if the value has been set.
func (o *GiftCardDataGiftcardAmountInterface) GetAttributeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeId, true
}

// SetAttributeId sets field value
func (o *GiftCardDataGiftcardAmountInterface) SetAttributeId(v int32) {
	o.AttributeId = v
}

// GetWebsiteId returns the WebsiteId field value
func (o *GiftCardDataGiftcardAmountInterface) GetWebsiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WebsiteId
}

// GetWebsiteIdOk returns a tuple with the WebsiteId field value
// and a boolean to check if the value has been set.
func (o *GiftCardDataGiftcardAmountInterface) GetWebsiteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteId, true
}

// SetWebsiteId sets field value
func (o *GiftCardDataGiftcardAmountInterface) SetWebsiteId(v int32) {
	o.WebsiteId = v
}

// GetValue returns the Value field value
func (o *GiftCardDataGiftcardAmountInterface) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GiftCardDataGiftcardAmountInterface) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GiftCardDataGiftcardAmountInterface) SetValue(v float32) {
	o.Value = v
}

// GetWebsiteValue returns the WebsiteValue field value
func (o *GiftCardDataGiftcardAmountInterface) GetWebsiteValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WebsiteValue
}

// GetWebsiteValueOk returns a tuple with the WebsiteValue field value
// and a boolean to check if the value has been set.
func (o *GiftCardDataGiftcardAmountInterface) GetWebsiteValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteValue, true
}

// SetWebsiteValue sets field value
func (o *GiftCardDataGiftcardAmountInterface) SetWebsiteValue(v float32) {
	o.WebsiteValue = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *GiftCardDataGiftcardAmountInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardDataGiftcardAmountInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *GiftCardDataGiftcardAmountInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *GiftCardDataGiftcardAmountInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o GiftCardDataGiftcardAmountInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiftCardDataGiftcardAmountInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute_id"] = o.AttributeId
	toSerialize["website_id"] = o.WebsiteId
	toSerialize["value"] = o.Value
	toSerialize["website_value"] = o.WebsiteValue
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GiftCardDataGiftcardAmountInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute_id",
		"website_id",
		"value",
		"website_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGiftCardDataGiftcardAmountInterface := _GiftCardDataGiftcardAmountInterface{}

	err = json.Unmarshal(data, &varGiftCardDataGiftcardAmountInterface)

	if err != nil {
		return err
	}

	*o = GiftCardDataGiftcardAmountInterface(varGiftCardDataGiftcardAmountInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attribute_id")
		delete(additionalProperties, "website_id")
		delete(additionalProperties, "value")
		delete(additionalProperties, "website_value")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *GiftCardDataGiftcardAmountInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *GiftCardDataGiftcardAmountInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableGiftCardDataGiftcardAmountInterface struct {
	value *GiftCardDataGiftcardAmountInterface
	isSet bool
}

func (v NullableGiftCardDataGiftcardAmountInterface) Get() *GiftCardDataGiftcardAmountInterface {
	return v.value
}

func (v *NullableGiftCardDataGiftcardAmountInterface) Set(val *GiftCardDataGiftcardAmountInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardDataGiftcardAmountInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardDataGiftcardAmountInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardDataGiftcardAmountInterface(val *GiftCardDataGiftcardAmountInterface) *NullableGiftCardDataGiftcardAmountInterface {
	return &NullableGiftCardDataGiftcardAmountInterface{value: val, isSet: true}
}

func (v NullableGiftCardDataGiftcardAmountInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardDataGiftcardAmountInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
