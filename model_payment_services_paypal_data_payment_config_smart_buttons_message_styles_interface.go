/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface{}

// PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface
type PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface struct {
	// CanDisplayMessage
	Layout               string                                                          `json:"layout"`
	Logo                 PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface `json:"logo"`
	AdditionalProperties map[string]interface{}
}

type _PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface

// NewPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface instantiates a new PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface(layout string, logo PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface) *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface {
	this := PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface{}
	this.Layout = layout
	this.Logo = logo
	return &this
}

// NewPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterfaceWithDefaults instantiates a new PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterfaceWithDefaults() *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface {
	this := PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface{}
	return &this
}

// GetLayout returns the Layout field value
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) GetLayout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) GetLayoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) SetLayout(v string) {
	o.Layout = v
}

// GetLogo returns the Logo field value
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) GetLogo() PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface {
	if o == nil {
		var ret PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface
		return ret
	}

	return o.Logo
}

// GetLogoOk returns a tuple with the Logo field value
// and a boolean to check if the value has been set.
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) GetLogoOk() (*PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logo, true
}

// SetLogo sets field value
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) SetLogo(v PaymentServicesPaypalDataPaymentConfigSmartButtonsLogoInterface) {
	o.Logo = v
}

func (o PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["layout"] = o.Layout
	toSerialize["logo"] = o.Logo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"layout",
		"logo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface := _PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface{}

	err = json.Unmarshal(data, &varPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface)

	if err != nil {
		return err
	}

	*o = PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface(varPaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "layout")
		delete(additionalProperties, "logo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface struct {
	value *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface
	isSet bool
}

func (v NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) Get() *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface {
	return v.value
}

func (v *NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) Set(val *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface(val *PaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) *NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface {
	return &NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface{value: val, isSet: true}
}

func (v NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentServicesPaypalDataPaymentConfigSmartButtonsMessageStylesInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
