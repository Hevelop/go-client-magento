/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the ConfigurableProductDataOptionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurableProductDataOptionInterface{}

// ConfigurableProductDataOptionInterface Interface OptionInterface
type ConfigurableProductDataOptionInterface struct {
	Id           *int32                                        `json:"id,omitempty"`
	AttributeId  *string                                       `json:"attribute_id,omitempty"`
	Label        *string                                       `json:"label,omitempty"`
	Position     *int32                                        `json:"position,omitempty"`
	IsUseDefault *bool                                         `json:"is_use_default,omitempty"`
	Values       []ConfigurableProductDataOptionValueInterface `json:"values,omitempty"`
	// ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	ProductId            *int32                 `json:"product_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigurableProductDataOptionInterface ConfigurableProductDataOptionInterface

// NewConfigurableProductDataOptionInterface instantiates a new ConfigurableProductDataOptionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurableProductDataOptionInterface() *ConfigurableProductDataOptionInterface {
	this := ConfigurableProductDataOptionInterface{}
	return &this
}

// NewConfigurableProductDataOptionInterfaceWithDefaults instantiates a new ConfigurableProductDataOptionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurableProductDataOptionInterfaceWithDefaults() *ConfigurableProductDataOptionInterface {
	this := ConfigurableProductDataOptionInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConfigurableProductDataOptionInterface) SetId(v int32) {
	o.Id = &v
}

// GetAttributeId returns the AttributeId field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetAttributeId() string {
	if o == nil || IsNil(o.AttributeId) {
		var ret string
		return ret
	}
	return *o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetAttributeIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeId) {
		return nil, false
	}
	return o.AttributeId, true
}

// HasAttributeId returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasAttributeId() bool {
	if o != nil && !IsNil(o.AttributeId) {
		return true
	}

	return false
}

// SetAttributeId gets a reference to the given string and assigns it to the AttributeId field.
func (o *ConfigurableProductDataOptionInterface) SetAttributeId(v string) {
	o.AttributeId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ConfigurableProductDataOptionInterface) SetLabel(v string) {
	o.Label = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ConfigurableProductDataOptionInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetIsUseDefault returns the IsUseDefault field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetIsUseDefault() bool {
	if o == nil || IsNil(o.IsUseDefault) {
		var ret bool
		return ret
	}
	return *o.IsUseDefault
}

// GetIsUseDefaultOk returns a tuple with the IsUseDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetIsUseDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUseDefault) {
		return nil, false
	}
	return o.IsUseDefault, true
}

// HasIsUseDefault returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasIsUseDefault() bool {
	if o != nil && !IsNil(o.IsUseDefault) {
		return true
	}

	return false
}

// SetIsUseDefault gets a reference to the given bool and assigns it to the IsUseDefault field.
func (o *ConfigurableProductDataOptionInterface) SetIsUseDefault(v bool) {
	o.IsUseDefault = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetValues() []ConfigurableProductDataOptionValueInterface {
	if o == nil || IsNil(o.Values) {
		var ret []ConfigurableProductDataOptionValueInterface
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetValuesOk() ([]ConfigurableProductDataOptionValueInterface, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ConfigurableProductDataOptionValueInterface and assigns it to the Values field.
func (o *ConfigurableProductDataOptionInterface) SetValues(v []ConfigurableProductDataOptionValueInterface) {
	o.Values = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *ConfigurableProductDataOptionInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ConfigurableProductDataOptionInterface) GetProductId() int32 {
	if o == nil || IsNil(o.ProductId) {
		var ret int32
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurableProductDataOptionInterface) GetProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ConfigurableProductDataOptionInterface) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int32 and assigns it to the ProductId field.
func (o *ConfigurableProductDataOptionInterface) SetProductId(v int32) {
	o.ProductId = &v
}

func (o ConfigurableProductDataOptionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurableProductDataOptionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AttributeId) {
		toSerialize["attribute_id"] = o.AttributeId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.IsUseDefault) {
		toSerialize["is_use_default"] = o.IsUseDefault
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigurableProductDataOptionInterface) UnmarshalJSON(data []byte) (err error) {
	varConfigurableProductDataOptionInterface := _ConfigurableProductDataOptionInterface{}

	err = json.Unmarshal(data, &varConfigurableProductDataOptionInterface)

	if err != nil {
		return err
	}

	*o = ConfigurableProductDataOptionInterface(varConfigurableProductDataOptionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "attribute_id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "position")
		delete(additionalProperties, "is_use_default")
		delete(additionalProperties, "values")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "product_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ConfigurableProductDataOptionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ConfigurableProductDataOptionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableConfigurableProductDataOptionInterface struct {
	value *ConfigurableProductDataOptionInterface
	isSet bool
}

func (v NullableConfigurableProductDataOptionInterface) Get() *ConfigurableProductDataOptionInterface {
	return v.value
}

func (v *NullableConfigurableProductDataOptionInterface) Set(val *ConfigurableProductDataOptionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurableProductDataOptionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurableProductDataOptionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurableProductDataOptionInterface(val *ConfigurableProductDataOptionInterface) *NullableConfigurableProductDataOptionInterface {
	return &NullableConfigurableProductDataOptionInterface{value: val, isSet: true}
}

func (v NullableConfigurableProductDataOptionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurableProductDataOptionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
