/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ProductsAttributesAttributeCodeOptionsOptionIdAPI interface {

	/*
		DeleteV1ProductsAttributesAttributeCodeOptionsOptionId products/attributes/{attributeCode}/options/{optionId}

		Delete option from attribute

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attributeCode
		@param optionId
		@return ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest
	*/
	DeleteV1ProductsAttributesAttributeCodeOptionsOptionId(ctx context.Context, attributeCode string, optionId string) ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest

	// DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdExecute executes the request
	//  @return bool
	DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) (bool, *http.Response, error)

	/*
		PutV1ProductsAttributesAttributeCodeOptionsOptionId products/attributes/{attributeCode}/options/{optionId}

		Update attribute option

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param attributeCode
		@param optionId
		@return ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest
	*/
	PutV1ProductsAttributesAttributeCodeOptionsOptionId(ctx context.Context, attributeCode string, optionId int32) ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest

	// PutV1ProductsAttributesAttributeCodeOptionsOptionIdExecute executes the request
	//  @return bool
	PutV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) (bool, *http.Response, error)
}

// ProductsAttributesAttributeCodeOptionsOptionIdAPIService ProductsAttributesAttributeCodeOptionsOptionIdAPI service
type ProductsAttributesAttributeCodeOptionsOptionIdAPIService service

type ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest struct {
	ctx           context.Context
	ApiService    ProductsAttributesAttributeCodeOptionsOptionIdAPI
	attributeCode string
	optionId      string
}

func (r ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r)
}

/*
DeleteV1ProductsAttributesAttributeCodeOptionsOptionId products/attributes/{attributeCode}/options/{optionId}

Delete option from attribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attributeCode
	@param optionId
	@return ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest
*/
func (a *ProductsAttributesAttributeCodeOptionsOptionIdAPIService) DeleteV1ProductsAttributesAttributeCodeOptionsOptionId(ctx context.Context, attributeCode string, optionId string) ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest {
	return ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest{
		ApiService:    a,
		ctx:           ctx,
		attributeCode: attributeCode,
		optionId:      optionId,
	}
}

// Execute executes the request
//
//	@return bool
func (a *ProductsAttributesAttributeCodeOptionsOptionIdAPIService) DeleteV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r ApiDeleteV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsAttributesAttributeCodeOptionsOptionIdAPIService.DeleteV1ProductsAttributesAttributeCodeOptionsOptionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/V1/products/attributes/{attributeCode}/options/{optionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"attributeCode"+"}", url.PathEscape(parameterValueToString(r.attributeCode, "attributeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"optionId"+"}", url.PathEscape(parameterValueToString(r.optionId, "optionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest struct {
	ctx                                                 context.Context
	ApiService                                          ProductsAttributesAttributeCodeOptionsOptionIdAPI
	attributeCode                                       string
	optionId                                            int32
	postV1ProductsAttributesAttributeCodeOptionsRequest *PostV1ProductsAttributesAttributeCodeOptionsRequest
}

func (r ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) PostV1ProductsAttributesAttributeCodeOptionsRequest(postV1ProductsAttributesAttributeCodeOptionsRequest PostV1ProductsAttributesAttributeCodeOptionsRequest) ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest {
	r.postV1ProductsAttributesAttributeCodeOptionsRequest = &postV1ProductsAttributesAttributeCodeOptionsRequest
	return r
}

func (r ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.PutV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r)
}

/*
PutV1ProductsAttributesAttributeCodeOptionsOptionId products/attributes/{attributeCode}/options/{optionId}

Update attribute option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param attributeCode
	@param optionId
	@return ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest
*/
func (a *ProductsAttributesAttributeCodeOptionsOptionIdAPIService) PutV1ProductsAttributesAttributeCodeOptionsOptionId(ctx context.Context, attributeCode string, optionId int32) ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest {
	return ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest{
		ApiService:    a,
		ctx:           ctx,
		attributeCode: attributeCode,
		optionId:      optionId,
	}
}

// Execute executes the request
//
//	@return bool
func (a *ProductsAttributesAttributeCodeOptionsOptionIdAPIService) PutV1ProductsAttributesAttributeCodeOptionsOptionIdExecute(r ApiPutV1ProductsAttributesAttributeCodeOptionsOptionIdRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsAttributesAttributeCodeOptionsOptionIdAPIService.PutV1ProductsAttributesAttributeCodeOptionsOptionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/V1/products/attributes/{attributeCode}/options/{optionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"attributeCode"+"}", url.PathEscape(parameterValueToString(r.attributeCode, "attributeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"optionId"+"}", url.PathEscape(parameterValueToString(r.optionId, "optionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postV1ProductsAttributesAttributeCodeOptionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		var v ErrorResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
