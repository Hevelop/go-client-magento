/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the BundleDataOptionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleDataOptionInterface{}

// BundleDataOptionInterface Interface OptionInterface
type BundleDataOptionInterface struct {
	// Option id
	OptionId *int32 `json:"option_id,omitempty"`
	// Option title
	Title *string `json:"title,omitempty"`
	// Is required option
	Required *bool `json:"required,omitempty"`
	// Input type
	Type *string `json:"type,omitempty"`
	// Option position
	Position *int32 `json:"position,omitempty"`
	// Product sku
	Sku *string `json:"sku,omitempty"`
	// Product links
	ProductLinks []BundleDataLinkInterface `json:"product_links,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BundleDataOptionInterface BundleDataOptionInterface

// NewBundleDataOptionInterface instantiates a new BundleDataOptionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleDataOptionInterface() *BundleDataOptionInterface {
	this := BundleDataOptionInterface{}
	return &this
}

// NewBundleDataOptionInterfaceWithDefaults instantiates a new BundleDataOptionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleDataOptionInterfaceWithDefaults() *BundleDataOptionInterface {
	this := BundleDataOptionInterface{}
	return &this
}

// GetOptionId returns the OptionId field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetOptionId() int32 {
	if o == nil || IsNil(o.OptionId) {
		var ret int32
		return ret
	}
	return *o.OptionId
}

// GetOptionIdOk returns a tuple with the OptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetOptionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OptionId) {
		return nil, false
	}
	return o.OptionId, true
}

// HasOptionId returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasOptionId() bool {
	if o != nil && !IsNil(o.OptionId) {
		return true
	}

	return false
}

// SetOptionId gets a reference to the given int32 and assigns it to the OptionId field.
func (o *BundleDataOptionInterface) SetOptionId(v int32) {
	o.OptionId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *BundleDataOptionInterface) SetTitle(v string) {
	o.Title = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *BundleDataOptionInterface) SetRequired(v bool) {
	o.Required = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BundleDataOptionInterface) SetType(v string) {
	o.Type = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *BundleDataOptionInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *BundleDataOptionInterface) SetSku(v string) {
	o.Sku = &v
}

// GetProductLinks returns the ProductLinks field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetProductLinks() []BundleDataLinkInterface {
	if o == nil || IsNil(o.ProductLinks) {
		var ret []BundleDataLinkInterface
		return ret
	}
	return o.ProductLinks
}

// GetProductLinksOk returns a tuple with the ProductLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetProductLinksOk() ([]BundleDataLinkInterface, bool) {
	if o == nil || IsNil(o.ProductLinks) {
		return nil, false
	}
	return o.ProductLinks, true
}

// HasProductLinks returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasProductLinks() bool {
	if o != nil && !IsNil(o.ProductLinks) {
		return true
	}

	return false
}

// SetProductLinks gets a reference to the given []BundleDataLinkInterface and assigns it to the ProductLinks field.
func (o *BundleDataOptionInterface) SetProductLinks(v []BundleDataLinkInterface) {
	o.ProductLinks = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *BundleDataOptionInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataOptionInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *BundleDataOptionInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *BundleDataOptionInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o BundleDataOptionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleDataOptionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionId) {
		toSerialize["option_id"] = o.OptionId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.ProductLinks) {
		toSerialize["product_links"] = o.ProductLinks
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BundleDataOptionInterface) UnmarshalJSON(data []byte) (err error) {
	varBundleDataOptionInterface := _BundleDataOptionInterface{}

	err = json.Unmarshal(data, &varBundleDataOptionInterface)

	if err != nil {
		return err
	}

	*o = BundleDataOptionInterface(varBundleDataOptionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "option_id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "required")
		delete(additionalProperties, "type")
		delete(additionalProperties, "position")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "product_links")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *BundleDataOptionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *BundleDataOptionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableBundleDataOptionInterface struct {
	value *BundleDataOptionInterface
	isSet bool
}

func (v NullableBundleDataOptionInterface) Get() *BundleDataOptionInterface {
	return v.value
}

func (v *NullableBundleDataOptionInterface) Set(val *BundleDataOptionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleDataOptionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleDataOptionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleDataOptionInterface(val *BundleDataOptionInterface) *NullableBundleDataOptionInterface {
	return &NullableBundleDataOptionInterface{value: val, isSet: true}
}

func (v NullableBundleDataOptionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleDataOptionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
