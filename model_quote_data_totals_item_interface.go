/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the QuoteDataTotalsItemInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteDataTotalsItemInterface{}

// QuoteDataTotalsItemInterface Interface TotalsItemInterface
type QuoteDataTotalsItemInterface struct {
	// Item id
	ItemId int32 `json:"item_id"`
	// Item price in quote currency.
	Price float32 `json:"price"`
	// Item price in base currency.
	BasePrice float32 `json:"base_price"`
	// Item quantity.
	Qty float32 `json:"qty"`
	// Row total in quote currency.
	RowTotal float32 `json:"row_total"`
	// Row total in base currency.
	BaseRowTotal float32 `json:"base_row_total"`
	// Row total with discount in quote currency. Otherwise, null.
	RowTotalWithDiscount *float32 `json:"row_total_with_discount,omitempty"`
	// Tax amount in quote currency. Otherwise, null.
	TaxAmount *float32 `json:"tax_amount,omitempty"`
	// Tax amount in base currency. Otherwise, null.
	BaseTaxAmount *float32 `json:"base_tax_amount,omitempty"`
	// Tax percent. Otherwise, null.
	TaxPercent *float32 `json:"tax_percent,omitempty"`
	// Discount amount in quote currency. Otherwise, null.
	DiscountAmount *float32 `json:"discount_amount,omitempty"`
	// Discount amount in base currency. Otherwise, null.
	BaseDiscountAmount *float32 `json:"base_discount_amount,omitempty"`
	// Discount percent. Otherwise, null.
	DiscountPercent *float32 `json:"discount_percent,omitempty"`
	// Price including tax in quote currency. Otherwise, null.
	PriceInclTax *float32 `json:"price_incl_tax,omitempty"`
	// Price including tax in base currency. Otherwise, null.
	BasePriceInclTax *float32 `json:"base_price_incl_tax,omitempty"`
	// Row total including tax in quote currency. Otherwise, null.
	RowTotalInclTax *float32 `json:"row_total_incl_tax,omitempty"`
	// Row total including tax in base currency. Otherwise, null.
	BaseRowTotalInclTax *float32 `json:"base_row_total_incl_tax,omitempty"`
	// Item price in quote currency.
	Options string `json:"options"`
	// Item weee tax applied amount in quote currency.
	WeeeTaxAppliedAmount float32 `json:"weee_tax_applied_amount"`
	// Item weee tax applied in quote currency.
	WeeeTaxApplied      string                                 `json:"weee_tax_applied"`
	ExtensionAttributes *QuoteDataTotalsItemExtensionInterface `json:"extension_attributes,omitempty"`
	// Product name. Otherwise, null.
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuoteDataTotalsItemInterface QuoteDataTotalsItemInterface

// NewQuoteDataTotalsItemInterface instantiates a new QuoteDataTotalsItemInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteDataTotalsItemInterface(itemId int32, price float32, basePrice float32, qty float32, rowTotal float32, baseRowTotal float32, options string, weeeTaxAppliedAmount float32, weeeTaxApplied string) *QuoteDataTotalsItemInterface {
	this := QuoteDataTotalsItemInterface{}
	this.ItemId = itemId
	this.Price = price
	this.BasePrice = basePrice
	this.Qty = qty
	this.RowTotal = rowTotal
	this.BaseRowTotal = baseRowTotal
	this.Options = options
	this.WeeeTaxAppliedAmount = weeeTaxAppliedAmount
	this.WeeeTaxApplied = weeeTaxApplied
	return &this
}

// NewQuoteDataTotalsItemInterfaceWithDefaults instantiates a new QuoteDataTotalsItemInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteDataTotalsItemInterfaceWithDefaults() *QuoteDataTotalsItemInterface {
	this := QuoteDataTotalsItemInterface{}
	return &this
}

// GetItemId returns the ItemId field value
func (o *QuoteDataTotalsItemInterface) GetItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *QuoteDataTotalsItemInterface) SetItemId(v int32) {
	o.ItemId = v
}

// GetPrice returns the Price field value
func (o *QuoteDataTotalsItemInterface) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *QuoteDataTotalsItemInterface) SetPrice(v float32) {
	o.Price = v
}

// GetBasePrice returns the BasePrice field value
func (o *QuoteDataTotalsItemInterface) GetBasePrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BasePrice
}

// GetBasePriceOk returns a tuple with the BasePrice field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBasePriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasePrice, true
}

// SetBasePrice sets field value
func (o *QuoteDataTotalsItemInterface) SetBasePrice(v float32) {
	o.BasePrice = v
}

// GetQty returns the Qty field value
func (o *QuoteDataTotalsItemInterface) GetQty() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetQtyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *QuoteDataTotalsItemInterface) SetQty(v float32) {
	o.Qty = v
}

// GetRowTotal returns the RowTotal field value
func (o *QuoteDataTotalsItemInterface) GetRowTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RowTotal
}

// GetRowTotalOk returns a tuple with the RowTotal field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetRowTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowTotal, true
}

// SetRowTotal sets field value
func (o *QuoteDataTotalsItemInterface) SetRowTotal(v float32) {
	o.RowTotal = v
}

// GetBaseRowTotal returns the BaseRowTotal field value
func (o *QuoteDataTotalsItemInterface) GetBaseRowTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseRowTotal
}

// GetBaseRowTotalOk returns a tuple with the BaseRowTotal field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBaseRowTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseRowTotal, true
}

// SetBaseRowTotal sets field value
func (o *QuoteDataTotalsItemInterface) SetBaseRowTotal(v float32) {
	o.BaseRowTotal = v
}

// GetRowTotalWithDiscount returns the RowTotalWithDiscount field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetRowTotalWithDiscount() float32 {
	if o == nil || IsNil(o.RowTotalWithDiscount) {
		var ret float32
		return ret
	}
	return *o.RowTotalWithDiscount
}

// GetRowTotalWithDiscountOk returns a tuple with the RowTotalWithDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetRowTotalWithDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.RowTotalWithDiscount) {
		return nil, false
	}
	return o.RowTotalWithDiscount, true
}

// HasRowTotalWithDiscount returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasRowTotalWithDiscount() bool {
	if o != nil && !IsNil(o.RowTotalWithDiscount) {
		return true
	}

	return false
}

// SetRowTotalWithDiscount gets a reference to the given float32 and assigns it to the RowTotalWithDiscount field.
func (o *QuoteDataTotalsItemInterface) SetRowTotalWithDiscount(v float32) {
	o.RowTotalWithDiscount = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetTaxAmount() float32 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret float32
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float32 and assigns it to the TaxAmount field.
func (o *QuoteDataTotalsItemInterface) SetTaxAmount(v float32) {
	o.TaxAmount = &v
}

// GetBaseTaxAmount returns the BaseTaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetBaseTaxAmount() float32 {
	if o == nil || IsNil(o.BaseTaxAmount) {
		var ret float32
		return ret
	}
	return *o.BaseTaxAmount
}

// GetBaseTaxAmountOk returns a tuple with the BaseTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBaseTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseTaxAmount) {
		return nil, false
	}
	return o.BaseTaxAmount, true
}

// HasBaseTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasBaseTaxAmount() bool {
	if o != nil && !IsNil(o.BaseTaxAmount) {
		return true
	}

	return false
}

// SetBaseTaxAmount gets a reference to the given float32 and assigns it to the BaseTaxAmount field.
func (o *QuoteDataTotalsItemInterface) SetBaseTaxAmount(v float32) {
	o.BaseTaxAmount = &v
}

// GetTaxPercent returns the TaxPercent field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetTaxPercent() float32 {
	if o == nil || IsNil(o.TaxPercent) {
		var ret float32
		return ret
	}
	return *o.TaxPercent
}

// GetTaxPercentOk returns a tuple with the TaxPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetTaxPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxPercent) {
		return nil, false
	}
	return o.TaxPercent, true
}

// HasTaxPercent returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasTaxPercent() bool {
	if o != nil && !IsNil(o.TaxPercent) {
		return true
	}

	return false
}

// SetTaxPercent gets a reference to the given float32 and assigns it to the TaxPercent field.
func (o *QuoteDataTotalsItemInterface) SetTaxPercent(v float32) {
	o.TaxPercent = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetDiscountAmount() float32 {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret float32
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given float32 and assigns it to the DiscountAmount field.
func (o *QuoteDataTotalsItemInterface) SetDiscountAmount(v float32) {
	o.DiscountAmount = &v
}

// GetBaseDiscountAmount returns the BaseDiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetBaseDiscountAmount() float32 {
	if o == nil || IsNil(o.BaseDiscountAmount) {
		var ret float32
		return ret
	}
	return *o.BaseDiscountAmount
}

// GetBaseDiscountAmountOk returns a tuple with the BaseDiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBaseDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseDiscountAmount) {
		return nil, false
	}
	return o.BaseDiscountAmount, true
}

// HasBaseDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasBaseDiscountAmount() bool {
	if o != nil && !IsNil(o.BaseDiscountAmount) {
		return true
	}

	return false
}

// SetBaseDiscountAmount gets a reference to the given float32 and assigns it to the BaseDiscountAmount field.
func (o *QuoteDataTotalsItemInterface) SetBaseDiscountAmount(v float32) {
	o.BaseDiscountAmount = &v
}

// GetDiscountPercent returns the DiscountPercent field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetDiscountPercent() float32 {
	if o == nil || IsNil(o.DiscountPercent) {
		var ret float32
		return ret
	}
	return *o.DiscountPercent
}

// GetDiscountPercentOk returns a tuple with the DiscountPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetDiscountPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercent) {
		return nil, false
	}
	return o.DiscountPercent, true
}

// HasDiscountPercent returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasDiscountPercent() bool {
	if o != nil && !IsNil(o.DiscountPercent) {
		return true
	}

	return false
}

// SetDiscountPercent gets a reference to the given float32 and assigns it to the DiscountPercent field.
func (o *QuoteDataTotalsItemInterface) SetDiscountPercent(v float32) {
	o.DiscountPercent = &v
}

// GetPriceInclTax returns the PriceInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetPriceInclTax() float32 {
	if o == nil || IsNil(o.PriceInclTax) {
		var ret float32
		return ret
	}
	return *o.PriceInclTax
}

// GetPriceInclTaxOk returns a tuple with the PriceInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetPriceInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceInclTax) {
		return nil, false
	}
	return o.PriceInclTax, true
}

// HasPriceInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasPriceInclTax() bool {
	if o != nil && !IsNil(o.PriceInclTax) {
		return true
	}

	return false
}

// SetPriceInclTax gets a reference to the given float32 and assigns it to the PriceInclTax field.
func (o *QuoteDataTotalsItemInterface) SetPriceInclTax(v float32) {
	o.PriceInclTax = &v
}

// GetBasePriceInclTax returns the BasePriceInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetBasePriceInclTax() float32 {
	if o == nil || IsNil(o.BasePriceInclTax) {
		var ret float32
		return ret
	}
	return *o.BasePriceInclTax
}

// GetBasePriceInclTaxOk returns a tuple with the BasePriceInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBasePriceInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.BasePriceInclTax) {
		return nil, false
	}
	return o.BasePriceInclTax, true
}

// HasBasePriceInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasBasePriceInclTax() bool {
	if o != nil && !IsNil(o.BasePriceInclTax) {
		return true
	}

	return false
}

// SetBasePriceInclTax gets a reference to the given float32 and assigns it to the BasePriceInclTax field.
func (o *QuoteDataTotalsItemInterface) SetBasePriceInclTax(v float32) {
	o.BasePriceInclTax = &v
}

// GetRowTotalInclTax returns the RowTotalInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetRowTotalInclTax() float32 {
	if o == nil || IsNil(o.RowTotalInclTax) {
		var ret float32
		return ret
	}
	return *o.RowTotalInclTax
}

// GetRowTotalInclTaxOk returns a tuple with the RowTotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetRowTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.RowTotalInclTax) {
		return nil, false
	}
	return o.RowTotalInclTax, true
}

// HasRowTotalInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasRowTotalInclTax() bool {
	if o != nil && !IsNil(o.RowTotalInclTax) {
		return true
	}

	return false
}

// SetRowTotalInclTax gets a reference to the given float32 and assigns it to the RowTotalInclTax field.
func (o *QuoteDataTotalsItemInterface) SetRowTotalInclTax(v float32) {
	o.RowTotalInclTax = &v
}

// GetBaseRowTotalInclTax returns the BaseRowTotalInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetBaseRowTotalInclTax() float32 {
	if o == nil || IsNil(o.BaseRowTotalInclTax) {
		var ret float32
		return ret
	}
	return *o.BaseRowTotalInclTax
}

// GetBaseRowTotalInclTaxOk returns a tuple with the BaseRowTotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetBaseRowTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseRowTotalInclTax) {
		return nil, false
	}
	return o.BaseRowTotalInclTax, true
}

// HasBaseRowTotalInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasBaseRowTotalInclTax() bool {
	if o != nil && !IsNil(o.BaseRowTotalInclTax) {
		return true
	}

	return false
}

// SetBaseRowTotalInclTax gets a reference to the given float32 and assigns it to the BaseRowTotalInclTax field.
func (o *QuoteDataTotalsItemInterface) SetBaseRowTotalInclTax(v float32) {
	o.BaseRowTotalInclTax = &v
}

// GetOptions returns the Options field value
func (o *QuoteDataTotalsItemInterface) GetOptions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetOptionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *QuoteDataTotalsItemInterface) SetOptions(v string) {
	o.Options = v
}

// GetWeeeTaxAppliedAmount returns the WeeeTaxAppliedAmount field value
func (o *QuoteDataTotalsItemInterface) GetWeeeTaxAppliedAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WeeeTaxAppliedAmount
}

// GetWeeeTaxAppliedAmountOk returns a tuple with the WeeeTaxAppliedAmount field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetWeeeTaxAppliedAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeeeTaxAppliedAmount, true
}

// SetWeeeTaxAppliedAmount sets field value
func (o *QuoteDataTotalsItemInterface) SetWeeeTaxAppliedAmount(v float32) {
	o.WeeeTaxAppliedAmount = v
}

// GetWeeeTaxApplied returns the WeeeTaxApplied field value
func (o *QuoteDataTotalsItemInterface) GetWeeeTaxApplied() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WeeeTaxApplied
}

// GetWeeeTaxAppliedOk returns a tuple with the WeeeTaxApplied field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetWeeeTaxAppliedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeeeTaxApplied, true
}

// SetWeeeTaxApplied sets field value
func (o *QuoteDataTotalsItemInterface) SetWeeeTaxApplied(v string) {
	o.WeeeTaxApplied = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetExtensionAttributes() QuoteDataTotalsItemExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret QuoteDataTotalsItemExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetExtensionAttributesOk() (*QuoteDataTotalsItemExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given QuoteDataTotalsItemExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *QuoteDataTotalsItemInterface) SetExtensionAttributes(v QuoteDataTotalsItemExtensionInterface) {
	o.ExtensionAttributes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuoteDataTotalsItemInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsItemInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuoteDataTotalsItemInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuoteDataTotalsItemInterface) SetName(v string) {
	o.Name = &v
}

func (o QuoteDataTotalsItemInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteDataTotalsItemInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item_id"] = o.ItemId
	toSerialize["price"] = o.Price
	toSerialize["base_price"] = o.BasePrice
	toSerialize["qty"] = o.Qty
	toSerialize["row_total"] = o.RowTotal
	toSerialize["base_row_total"] = o.BaseRowTotal
	if !IsNil(o.RowTotalWithDiscount) {
		toSerialize["row_total_with_discount"] = o.RowTotalWithDiscount
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["tax_amount"] = o.TaxAmount
	}
	if !IsNil(o.BaseTaxAmount) {
		toSerialize["base_tax_amount"] = o.BaseTaxAmount
	}
	if !IsNil(o.TaxPercent) {
		toSerialize["tax_percent"] = o.TaxPercent
	}
	if !IsNil(o.DiscountAmount) {
		toSerialize["discount_amount"] = o.DiscountAmount
	}
	if !IsNil(o.BaseDiscountAmount) {
		toSerialize["base_discount_amount"] = o.BaseDiscountAmount
	}
	if !IsNil(o.DiscountPercent) {
		toSerialize["discount_percent"] = o.DiscountPercent
	}
	if !IsNil(o.PriceInclTax) {
		toSerialize["price_incl_tax"] = o.PriceInclTax
	}
	if !IsNil(o.BasePriceInclTax) {
		toSerialize["base_price_incl_tax"] = o.BasePriceInclTax
	}
	if !IsNil(o.RowTotalInclTax) {
		toSerialize["row_total_incl_tax"] = o.RowTotalInclTax
	}
	if !IsNil(o.BaseRowTotalInclTax) {
		toSerialize["base_row_total_incl_tax"] = o.BaseRowTotalInclTax
	}
	toSerialize["options"] = o.Options
	toSerialize["weee_tax_applied_amount"] = o.WeeeTaxAppliedAmount
	toSerialize["weee_tax_applied"] = o.WeeeTaxApplied
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuoteDataTotalsItemInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item_id",
		"price",
		"base_price",
		"qty",
		"row_total",
		"base_row_total",
		"options",
		"weee_tax_applied_amount",
		"weee_tax_applied",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteDataTotalsItemInterface := _QuoteDataTotalsItemInterface{}

	err = json.Unmarshal(data, &varQuoteDataTotalsItemInterface)

	if err != nil {
		return err
	}

	*o = QuoteDataTotalsItemInterface(varQuoteDataTotalsItemInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "price")
		delete(additionalProperties, "base_price")
		delete(additionalProperties, "qty")
		delete(additionalProperties, "row_total")
		delete(additionalProperties, "base_row_total")
		delete(additionalProperties, "row_total_with_discount")
		delete(additionalProperties, "tax_amount")
		delete(additionalProperties, "base_tax_amount")
		delete(additionalProperties, "tax_percent")
		delete(additionalProperties, "discount_amount")
		delete(additionalProperties, "base_discount_amount")
		delete(additionalProperties, "discount_percent")
		delete(additionalProperties, "price_incl_tax")
		delete(additionalProperties, "base_price_incl_tax")
		delete(additionalProperties, "row_total_incl_tax")
		delete(additionalProperties, "base_row_total_incl_tax")
		delete(additionalProperties, "options")
		delete(additionalProperties, "weee_tax_applied_amount")
		delete(additionalProperties, "weee_tax_applied")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *QuoteDataTotalsItemInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *QuoteDataTotalsItemInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableQuoteDataTotalsItemInterface struct {
	value *QuoteDataTotalsItemInterface
	isSet bool
}

func (v NullableQuoteDataTotalsItemInterface) Get() *QuoteDataTotalsItemInterface {
	return v.value
}

func (v *NullableQuoteDataTotalsItemInterface) Set(val *QuoteDataTotalsItemInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteDataTotalsItemInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteDataTotalsItemInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteDataTotalsItemInterface(val *QuoteDataTotalsItemInterface) *NullableQuoteDataTotalsItemInterface {
	return &NullableQuoteDataTotalsItemInterface{value: val, isSet: true}
}

func (v NullableQuoteDataTotalsItemInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteDataTotalsItemInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
