/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the NegotiableQuoteDataItemNoteInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegotiableQuoteDataItemNoteInterface{}

// NegotiableQuoteDataItemNoteInterface Interface ItemNoteInterface
type NegotiableQuoteDataItemNoteInterface struct {
	// Note ID.
	NoteId *int32 `json:"note_id,omitempty"`
	// Negotiable quote item Id
	NegotiableQuoteItemId int32 `json:"negotiable_quote_item_id"`
	// The note creator type.
	CreatorType int32 `json:"creator_type"`
	// Note creator ID.
	CreatorId int32 `json:"creator_id"`
	// Note.
	Note string `json:"note"`
	// Comment created at.
	CreatedAt *string `json:"created_at,omitempty"`
	// ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\ItemNoteInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NegotiableQuoteDataItemNoteInterface NegotiableQuoteDataItemNoteInterface

// NewNegotiableQuoteDataItemNoteInterface instantiates a new NegotiableQuoteDataItemNoteInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiableQuoteDataItemNoteInterface(negotiableQuoteItemId int32, creatorType int32, creatorId int32, note string) *NegotiableQuoteDataItemNoteInterface {
	this := NegotiableQuoteDataItemNoteInterface{}
	this.NegotiableQuoteItemId = negotiableQuoteItemId
	this.CreatorType = creatorType
	this.CreatorId = creatorId
	this.Note = note
	return &this
}

// NewNegotiableQuoteDataItemNoteInterfaceWithDefaults instantiates a new NegotiableQuoteDataItemNoteInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiableQuoteDataItemNoteInterfaceWithDefaults() *NegotiableQuoteDataItemNoteInterface {
	this := NegotiableQuoteDataItemNoteInterface{}
	return &this
}

// GetNoteId returns the NoteId field value if set, zero value otherwise.
func (o *NegotiableQuoteDataItemNoteInterface) GetNoteId() int32 {
	if o == nil || IsNil(o.NoteId) {
		var ret int32
		return ret
	}
	return *o.NoteId
}

// GetNoteIdOk returns a tuple with the NoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetNoteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NoteId) {
		return nil, false
	}
	return o.NoteId, true
}

// HasNoteId returns a boolean if a field has been set.
func (o *NegotiableQuoteDataItemNoteInterface) HasNoteId() bool {
	if o != nil && !IsNil(o.NoteId) {
		return true
	}

	return false
}

// SetNoteId gets a reference to the given int32 and assigns it to the NoteId field.
func (o *NegotiableQuoteDataItemNoteInterface) SetNoteId(v int32) {
	o.NoteId = &v
}

// GetNegotiableQuoteItemId returns the NegotiableQuoteItemId field value
func (o *NegotiableQuoteDataItemNoteInterface) GetNegotiableQuoteItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NegotiableQuoteItemId
}

// GetNegotiableQuoteItemIdOk returns a tuple with the NegotiableQuoteItemId field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetNegotiableQuoteItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NegotiableQuoteItemId, true
}

// SetNegotiableQuoteItemId sets field value
func (o *NegotiableQuoteDataItemNoteInterface) SetNegotiableQuoteItemId(v int32) {
	o.NegotiableQuoteItemId = v
}

// GetCreatorType returns the CreatorType field value
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatorType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorType
}

// GetCreatorTypeOk returns a tuple with the CreatorType field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatorTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorType, true
}

// SetCreatorType sets field value
func (o *NegotiableQuoteDataItemNoteInterface) SetCreatorType(v int32) {
	o.CreatorType = v
}

// GetCreatorId returns the CreatorId field value
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *NegotiableQuoteDataItemNoteInterface) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetNote returns the Note field value
func (o *NegotiableQuoteDataItemNoteInterface) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *NegotiableQuoteDataItemNoteInterface) SetNote(v string) {
	o.Note = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NegotiableQuoteDataItemNoteInterface) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *NegotiableQuoteDataItemNoteInterface) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *NegotiableQuoteDataItemNoteInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataItemNoteInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *NegotiableQuoteDataItemNoteInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *NegotiableQuoteDataItemNoteInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o NegotiableQuoteDataItemNoteInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegotiableQuoteDataItemNoteInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NoteId) {
		toSerialize["note_id"] = o.NoteId
	}
	toSerialize["negotiable_quote_item_id"] = o.NegotiableQuoteItemId
	toSerialize["creator_type"] = o.CreatorType
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["note"] = o.Note
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NegotiableQuoteDataItemNoteInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"negotiable_quote_item_id",
		"creator_type",
		"creator_id",
		"note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNegotiableQuoteDataItemNoteInterface := _NegotiableQuoteDataItemNoteInterface{}

	err = json.Unmarshal(data, &varNegotiableQuoteDataItemNoteInterface)

	if err != nil {
		return err
	}

	*o = NegotiableQuoteDataItemNoteInterface(varNegotiableQuoteDataItemNoteInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "note_id")
		delete(additionalProperties, "negotiable_quote_item_id")
		delete(additionalProperties, "creator_type")
		delete(additionalProperties, "creator_id")
		delete(additionalProperties, "note")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *NegotiableQuoteDataItemNoteInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *NegotiableQuoteDataItemNoteInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableNegotiableQuoteDataItemNoteInterface struct {
	value *NegotiableQuoteDataItemNoteInterface
	isSet bool
}

func (v NullableNegotiableQuoteDataItemNoteInterface) Get() *NegotiableQuoteDataItemNoteInterface {
	return v.value
}

func (v *NullableNegotiableQuoteDataItemNoteInterface) Set(val *NegotiableQuoteDataItemNoteInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiableQuoteDataItemNoteInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiableQuoteDataItemNoteInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiableQuoteDataItemNoteInterface(val *NegotiableQuoteDataItemNoteInterface) *NullableNegotiableQuoteDataItemNoteInterface {
	return &NullableNegotiableQuoteDataItemNoteInterface{value: val, isSet: true}
}

func (v NullableNegotiableQuoteDataItemNoteInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiableQuoteDataItemNoteInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
