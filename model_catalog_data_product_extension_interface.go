/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the CatalogDataProductExtensionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductExtensionInterface{}

// CatalogDataProductExtensionInterface ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface
type CatalogDataProductExtensionInterface struct {
	WebsiteIds                 []int32                                  `json:"website_ids,omitempty"`
	CategoryLinks              []CatalogDataCategoryLinkInterface       `json:"category_links,omitempty"`
	Discounts                  []SalesRuleDataRuleDiscountInterface     `json:"discounts,omitempty"`
	BundleProductOptions       []BundleDataOptionInterface              `json:"bundle_product_options,omitempty"`
	StockItem                  *CatalogInventoryDataStockItemInterface  `json:"stock_item,omitempty"`
	DownloadableProductLinks   []DownloadableDataLinkInterface          `json:"downloadable_product_links,omitempty"`
	DownloadableProductSamples []DownloadableDataSampleInterface        `json:"downloadable_product_samples,omitempty"`
	GiftcardAmounts            []GiftCardDataGiftcardAmountInterface    `json:"giftcard_amounts,omitempty"`
	ConfigurableProductOptions []ConfigurableProductDataOptionInterface `json:"configurable_product_options,omitempty"`
	ConfigurableProductLinks   []int32                                  `json:"configurable_product_links,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _CatalogDataProductExtensionInterface CatalogDataProductExtensionInterface

// NewCatalogDataProductExtensionInterface instantiates a new CatalogDataProductExtensionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductExtensionInterface() *CatalogDataProductExtensionInterface {
	this := CatalogDataProductExtensionInterface{}
	return &this
}

// NewCatalogDataProductExtensionInterfaceWithDefaults instantiates a new CatalogDataProductExtensionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductExtensionInterfaceWithDefaults() *CatalogDataProductExtensionInterface {
	this := CatalogDataProductExtensionInterface{}
	return &this
}

// GetWebsiteIds returns the WebsiteIds field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetWebsiteIds() []int32 {
	if o == nil || IsNil(o.WebsiteIds) {
		var ret []int32
		return ret
	}
	return o.WebsiteIds
}

// GetWebsiteIdsOk returns a tuple with the WebsiteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetWebsiteIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.WebsiteIds) {
		return nil, false
	}
	return o.WebsiteIds, true
}

// HasWebsiteIds returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasWebsiteIds() bool {
	if o != nil && !IsNil(o.WebsiteIds) {
		return true
	}

	return false
}

// SetWebsiteIds gets a reference to the given []int32 and assigns it to the WebsiteIds field.
func (o *CatalogDataProductExtensionInterface) SetWebsiteIds(v []int32) {
	o.WebsiteIds = v
}

// GetCategoryLinks returns the CategoryLinks field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetCategoryLinks() []CatalogDataCategoryLinkInterface {
	if o == nil || IsNil(o.CategoryLinks) {
		var ret []CatalogDataCategoryLinkInterface
		return ret
	}
	return o.CategoryLinks
}

// GetCategoryLinksOk returns a tuple with the CategoryLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetCategoryLinksOk() ([]CatalogDataCategoryLinkInterface, bool) {
	if o == nil || IsNil(o.CategoryLinks) {
		return nil, false
	}
	return o.CategoryLinks, true
}

// HasCategoryLinks returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasCategoryLinks() bool {
	if o != nil && !IsNil(o.CategoryLinks) {
		return true
	}

	return false
}

// SetCategoryLinks gets a reference to the given []CatalogDataCategoryLinkInterface and assigns it to the CategoryLinks field.
func (o *CatalogDataProductExtensionInterface) SetCategoryLinks(v []CatalogDataCategoryLinkInterface) {
	o.CategoryLinks = v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetDiscounts() []SalesRuleDataRuleDiscountInterface {
	if o == nil || IsNil(o.Discounts) {
		var ret []SalesRuleDataRuleDiscountInterface
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetDiscountsOk() ([]SalesRuleDataRuleDiscountInterface, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []SalesRuleDataRuleDiscountInterface and assigns it to the Discounts field.
func (o *CatalogDataProductExtensionInterface) SetDiscounts(v []SalesRuleDataRuleDiscountInterface) {
	o.Discounts = v
}

// GetBundleProductOptions returns the BundleProductOptions field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetBundleProductOptions() []BundleDataOptionInterface {
	if o == nil || IsNil(o.BundleProductOptions) {
		var ret []BundleDataOptionInterface
		return ret
	}
	return o.BundleProductOptions
}

// GetBundleProductOptionsOk returns a tuple with the BundleProductOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetBundleProductOptionsOk() ([]BundleDataOptionInterface, bool) {
	if o == nil || IsNil(o.BundleProductOptions) {
		return nil, false
	}
	return o.BundleProductOptions, true
}

// HasBundleProductOptions returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasBundleProductOptions() bool {
	if o != nil && !IsNil(o.BundleProductOptions) {
		return true
	}

	return false
}

// SetBundleProductOptions gets a reference to the given []BundleDataOptionInterface and assigns it to the BundleProductOptions field.
func (o *CatalogDataProductExtensionInterface) SetBundleProductOptions(v []BundleDataOptionInterface) {
	o.BundleProductOptions = v
}

// GetStockItem returns the StockItem field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetStockItem() CatalogInventoryDataStockItemInterface {
	if o == nil || IsNil(o.StockItem) {
		var ret CatalogInventoryDataStockItemInterface
		return ret
	}
	return *o.StockItem
}

// GetStockItemOk returns a tuple with the StockItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetStockItemOk() (*CatalogInventoryDataStockItemInterface, bool) {
	if o == nil || IsNil(o.StockItem) {
		return nil, false
	}
	return o.StockItem, true
}

// HasStockItem returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasStockItem() bool {
	if o != nil && !IsNil(o.StockItem) {
		return true
	}

	return false
}

// SetStockItem gets a reference to the given CatalogInventoryDataStockItemInterface and assigns it to the StockItem field.
func (o *CatalogDataProductExtensionInterface) SetStockItem(v CatalogInventoryDataStockItemInterface) {
	o.StockItem = &v
}

// GetDownloadableProductLinks returns the DownloadableProductLinks field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetDownloadableProductLinks() []DownloadableDataLinkInterface {
	if o == nil || IsNil(o.DownloadableProductLinks) {
		var ret []DownloadableDataLinkInterface
		return ret
	}
	return o.DownloadableProductLinks
}

// GetDownloadableProductLinksOk returns a tuple with the DownloadableProductLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetDownloadableProductLinksOk() ([]DownloadableDataLinkInterface, bool) {
	if o == nil || IsNil(o.DownloadableProductLinks) {
		return nil, false
	}
	return o.DownloadableProductLinks, true
}

// HasDownloadableProductLinks returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasDownloadableProductLinks() bool {
	if o != nil && !IsNil(o.DownloadableProductLinks) {
		return true
	}

	return false
}

// SetDownloadableProductLinks gets a reference to the given []DownloadableDataLinkInterface and assigns it to the DownloadableProductLinks field.
func (o *CatalogDataProductExtensionInterface) SetDownloadableProductLinks(v []DownloadableDataLinkInterface) {
	o.DownloadableProductLinks = v
}

// GetDownloadableProductSamples returns the DownloadableProductSamples field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetDownloadableProductSamples() []DownloadableDataSampleInterface {
	if o == nil || IsNil(o.DownloadableProductSamples) {
		var ret []DownloadableDataSampleInterface
		return ret
	}
	return o.DownloadableProductSamples
}

// GetDownloadableProductSamplesOk returns a tuple with the DownloadableProductSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetDownloadableProductSamplesOk() ([]DownloadableDataSampleInterface, bool) {
	if o == nil || IsNil(o.DownloadableProductSamples) {
		return nil, false
	}
	return o.DownloadableProductSamples, true
}

// HasDownloadableProductSamples returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasDownloadableProductSamples() bool {
	if o != nil && !IsNil(o.DownloadableProductSamples) {
		return true
	}

	return false
}

// SetDownloadableProductSamples gets a reference to the given []DownloadableDataSampleInterface and assigns it to the DownloadableProductSamples field.
func (o *CatalogDataProductExtensionInterface) SetDownloadableProductSamples(v []DownloadableDataSampleInterface) {
	o.DownloadableProductSamples = v
}

// GetGiftcardAmounts returns the GiftcardAmounts field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetGiftcardAmounts() []GiftCardDataGiftcardAmountInterface {
	if o == nil || IsNil(o.GiftcardAmounts) {
		var ret []GiftCardDataGiftcardAmountInterface
		return ret
	}
	return o.GiftcardAmounts
}

// GetGiftcardAmountsOk returns a tuple with the GiftcardAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetGiftcardAmountsOk() ([]GiftCardDataGiftcardAmountInterface, bool) {
	if o == nil || IsNil(o.GiftcardAmounts) {
		return nil, false
	}
	return o.GiftcardAmounts, true
}

// HasGiftcardAmounts returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasGiftcardAmounts() bool {
	if o != nil && !IsNil(o.GiftcardAmounts) {
		return true
	}

	return false
}

// SetGiftcardAmounts gets a reference to the given []GiftCardDataGiftcardAmountInterface and assigns it to the GiftcardAmounts field.
func (o *CatalogDataProductExtensionInterface) SetGiftcardAmounts(v []GiftCardDataGiftcardAmountInterface) {
	o.GiftcardAmounts = v
}

// GetConfigurableProductOptions returns the ConfigurableProductOptions field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetConfigurableProductOptions() []ConfigurableProductDataOptionInterface {
	if o == nil || IsNil(o.ConfigurableProductOptions) {
		var ret []ConfigurableProductDataOptionInterface
		return ret
	}
	return o.ConfigurableProductOptions
}

// GetConfigurableProductOptionsOk returns a tuple with the ConfigurableProductOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetConfigurableProductOptionsOk() ([]ConfigurableProductDataOptionInterface, bool) {
	if o == nil || IsNil(o.ConfigurableProductOptions) {
		return nil, false
	}
	return o.ConfigurableProductOptions, true
}

// HasConfigurableProductOptions returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasConfigurableProductOptions() bool {
	if o != nil && !IsNil(o.ConfigurableProductOptions) {
		return true
	}

	return false
}

// SetConfigurableProductOptions gets a reference to the given []ConfigurableProductDataOptionInterface and assigns it to the ConfigurableProductOptions field.
func (o *CatalogDataProductExtensionInterface) SetConfigurableProductOptions(v []ConfigurableProductDataOptionInterface) {
	o.ConfigurableProductOptions = v
}

// GetConfigurableProductLinks returns the ConfigurableProductLinks field value if set, zero value otherwise.
func (o *CatalogDataProductExtensionInterface) GetConfigurableProductLinks() []int32 {
	if o == nil || IsNil(o.ConfigurableProductLinks) {
		var ret []int32
		return ret
	}
	return o.ConfigurableProductLinks
}

// GetConfigurableProductLinksOk returns a tuple with the ConfigurableProductLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductExtensionInterface) GetConfigurableProductLinksOk() ([]int32, bool) {
	if o == nil || IsNil(o.ConfigurableProductLinks) {
		return nil, false
	}
	return o.ConfigurableProductLinks, true
}

// HasConfigurableProductLinks returns a boolean if a field has been set.
func (o *CatalogDataProductExtensionInterface) HasConfigurableProductLinks() bool {
	if o != nil && !IsNil(o.ConfigurableProductLinks) {
		return true
	}

	return false
}

// SetConfigurableProductLinks gets a reference to the given []int32 and assigns it to the ConfigurableProductLinks field.
func (o *CatalogDataProductExtensionInterface) SetConfigurableProductLinks(v []int32) {
	o.ConfigurableProductLinks = v
}

func (o CatalogDataProductExtensionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductExtensionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WebsiteIds) {
		toSerialize["website_ids"] = o.WebsiteIds
	}
	if !IsNil(o.CategoryLinks) {
		toSerialize["category_links"] = o.CategoryLinks
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.BundleProductOptions) {
		toSerialize["bundle_product_options"] = o.BundleProductOptions
	}
	if !IsNil(o.StockItem) {
		toSerialize["stock_item"] = o.StockItem
	}
	if !IsNil(o.DownloadableProductLinks) {
		toSerialize["downloadable_product_links"] = o.DownloadableProductLinks
	}
	if !IsNil(o.DownloadableProductSamples) {
		toSerialize["downloadable_product_samples"] = o.DownloadableProductSamples
	}
	if !IsNil(o.GiftcardAmounts) {
		toSerialize["giftcard_amounts"] = o.GiftcardAmounts
	}
	if !IsNil(o.ConfigurableProductOptions) {
		toSerialize["configurable_product_options"] = o.ConfigurableProductOptions
	}
	if !IsNil(o.ConfigurableProductLinks) {
		toSerialize["configurable_product_links"] = o.ConfigurableProductLinks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductExtensionInterface) UnmarshalJSON(data []byte) (err error) {
	varCatalogDataProductExtensionInterface := _CatalogDataProductExtensionInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductExtensionInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductExtensionInterface(varCatalogDataProductExtensionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "website_ids")
		delete(additionalProperties, "category_links")
		delete(additionalProperties, "discounts")
		delete(additionalProperties, "bundle_product_options")
		delete(additionalProperties, "stock_item")
		delete(additionalProperties, "downloadable_product_links")
		delete(additionalProperties, "downloadable_product_samples")
		delete(additionalProperties, "giftcard_amounts")
		delete(additionalProperties, "configurable_product_options")
		delete(additionalProperties, "configurable_product_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductExtensionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductExtensionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductExtensionInterface struct {
	value *CatalogDataProductExtensionInterface
	isSet bool
}

func (v NullableCatalogDataProductExtensionInterface) Get() *CatalogDataProductExtensionInterface {
	return v.value
}

func (v *NullableCatalogDataProductExtensionInterface) Set(val *CatalogDataProductExtensionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductExtensionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductExtensionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductExtensionInterface(val *CatalogDataProductExtensionInterface) *NullableCatalogDataProductExtensionInterface {
	return &NullableCatalogDataProductExtensionInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductExtensionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductExtensionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
