/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the EavDataAttributeSetInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EavDataAttributeSetInterface{}

// EavDataAttributeSetInterface Interface AttributeSetInterface
type EavDataAttributeSetInterface struct {
	// Attribute set ID
	AttributeSetId *int32 `json:"attribute_set_id,omitempty"`
	// Attribute set name
	AttributeSetName string `json:"attribute_set_name"`
	// Attribute set sort order index
	SortOrder int32 `json:"sort_order"`
	// Attribute set entity type id
	EntityTypeId *int32 `json:"entity_type_id,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeSetInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EavDataAttributeSetInterface EavDataAttributeSetInterface

// NewEavDataAttributeSetInterface instantiates a new EavDataAttributeSetInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEavDataAttributeSetInterface(attributeSetName string, sortOrder int32) *EavDataAttributeSetInterface {
	this := EavDataAttributeSetInterface{}
	this.AttributeSetName = attributeSetName
	this.SortOrder = sortOrder
	return &this
}

// NewEavDataAttributeSetInterfaceWithDefaults instantiates a new EavDataAttributeSetInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEavDataAttributeSetInterfaceWithDefaults() *EavDataAttributeSetInterface {
	this := EavDataAttributeSetInterface{}
	return &this
}

// GetAttributeSetId returns the AttributeSetId field value if set, zero value otherwise.
func (o *EavDataAttributeSetInterface) GetAttributeSetId() int32 {
	if o == nil || IsNil(o.AttributeSetId) {
		var ret int32
		return ret
	}
	return *o.AttributeSetId
}

// GetAttributeSetIdOk returns a tuple with the AttributeSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EavDataAttributeSetInterface) GetAttributeSetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AttributeSetId) {
		return nil, false
	}
	return o.AttributeSetId, true
}

// HasAttributeSetId returns a boolean if a field has been set.
func (o *EavDataAttributeSetInterface) HasAttributeSetId() bool {
	if o != nil && !IsNil(o.AttributeSetId) {
		return true
	}

	return false
}

// SetAttributeSetId gets a reference to the given int32 and assigns it to the AttributeSetId field.
func (o *EavDataAttributeSetInterface) SetAttributeSetId(v int32) {
	o.AttributeSetId = &v
}

// GetAttributeSetName returns the AttributeSetName field value
func (o *EavDataAttributeSetInterface) GetAttributeSetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeSetName
}

// GetAttributeSetNameOk returns a tuple with the AttributeSetName field value
// and a boolean to check if the value has been set.
func (o *EavDataAttributeSetInterface) GetAttributeSetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeSetName, true
}

// SetAttributeSetName sets field value
func (o *EavDataAttributeSetInterface) SetAttributeSetName(v string) {
	o.AttributeSetName = v
}

// GetSortOrder returns the SortOrder field value
func (o *EavDataAttributeSetInterface) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *EavDataAttributeSetInterface) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *EavDataAttributeSetInterface) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetEntityTypeId returns the EntityTypeId field value if set, zero value otherwise.
func (o *EavDataAttributeSetInterface) GetEntityTypeId() int32 {
	if o == nil || IsNil(o.EntityTypeId) {
		var ret int32
		return ret
	}
	return *o.EntityTypeId
}

// GetEntityTypeIdOk returns a tuple with the EntityTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EavDataAttributeSetInterface) GetEntityTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EntityTypeId) {
		return nil, false
	}
	return o.EntityTypeId, true
}

// HasEntityTypeId returns a boolean if a field has been set.
func (o *EavDataAttributeSetInterface) HasEntityTypeId() bool {
	if o != nil && !IsNil(o.EntityTypeId) {
		return true
	}

	return false
}

// SetEntityTypeId gets a reference to the given int32 and assigns it to the EntityTypeId field.
func (o *EavDataAttributeSetInterface) SetEntityTypeId(v int32) {
	o.EntityTypeId = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *EavDataAttributeSetInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EavDataAttributeSetInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *EavDataAttributeSetInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *EavDataAttributeSetInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o EavDataAttributeSetInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EavDataAttributeSetInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeSetId) {
		toSerialize["attribute_set_id"] = o.AttributeSetId
	}
	toSerialize["attribute_set_name"] = o.AttributeSetName
	toSerialize["sort_order"] = o.SortOrder
	if !IsNil(o.EntityTypeId) {
		toSerialize["entity_type_id"] = o.EntityTypeId
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EavDataAttributeSetInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute_set_name",
		"sort_order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEavDataAttributeSetInterface := _EavDataAttributeSetInterface{}

	err = json.Unmarshal(data, &varEavDataAttributeSetInterface)

	if err != nil {
		return err
	}

	*o = EavDataAttributeSetInterface(varEavDataAttributeSetInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attribute_set_id")
		delete(additionalProperties, "attribute_set_name")
		delete(additionalProperties, "sort_order")
		delete(additionalProperties, "entity_type_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *EavDataAttributeSetInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *EavDataAttributeSetInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableEavDataAttributeSetInterface struct {
	value *EavDataAttributeSetInterface
	isSet bool
}

func (v NullableEavDataAttributeSetInterface) Get() *EavDataAttributeSetInterface {
	return v.value
}

func (v *NullableEavDataAttributeSetInterface) Set(val *EavDataAttributeSetInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableEavDataAttributeSetInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableEavDataAttributeSetInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEavDataAttributeSetInterface(val *EavDataAttributeSetInterface) *NullableEavDataAttributeSetInterface {
	return &NullableEavDataAttributeSetInterface{value: val, isSet: true}
}

func (v NullableEavDataAttributeSetInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEavDataAttributeSetInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
