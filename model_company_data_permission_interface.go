/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyDataPermissionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyDataPermissionInterface{}

// CompanyDataPermissionInterface Permission interface.
type CompanyDataPermissionInterface struct {
	// Id.
	Id *int32 `json:"id,omitempty"`
	// Role id.
	RoleId *int32 `json:"role_id,omitempty"`
	// Resource id.
	ResourceId string `json:"resource_id"`
	// Permission.
	Permission           string `json:"permission"`
	AdditionalProperties map[string]interface{}
}

type _CompanyDataPermissionInterface CompanyDataPermissionInterface

// NewCompanyDataPermissionInterface instantiates a new CompanyDataPermissionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDataPermissionInterface(resourceId string, permission string) *CompanyDataPermissionInterface {
	this := CompanyDataPermissionInterface{}
	this.ResourceId = resourceId
	this.Permission = permission
	return &this
}

// NewCompanyDataPermissionInterfaceWithDefaults instantiates a new CompanyDataPermissionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDataPermissionInterfaceWithDefaults() *CompanyDataPermissionInterface {
	this := CompanyDataPermissionInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyDataPermissionInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataPermissionInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyDataPermissionInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyDataPermissionInterface) SetId(v int32) {
	o.Id = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *CompanyDataPermissionInterface) GetRoleId() int32 {
	if o == nil || IsNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataPermissionInterface) GetRoleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *CompanyDataPermissionInterface) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *CompanyDataPermissionInterface) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetResourceId returns the ResourceId field value
func (o *CompanyDataPermissionInterface) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *CompanyDataPermissionInterface) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *CompanyDataPermissionInterface) SetResourceId(v string) {
	o.ResourceId = v
}

// GetPermission returns the Permission field value
func (o *CompanyDataPermissionInterface) GetPermission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
func (o *CompanyDataPermissionInterface) GetPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permission, true
}

// SetPermission sets field value
func (o *CompanyDataPermissionInterface) SetPermission(v string) {
	o.Permission = v
}

func (o CompanyDataPermissionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyDataPermissionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["permission"] = o.Permission

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyDataPermissionInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_id",
		"permission",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyDataPermissionInterface := _CompanyDataPermissionInterface{}

	err = json.Unmarshal(data, &varCompanyDataPermissionInterface)

	if err != nil {
		return err
	}

	*o = CompanyDataPermissionInterface(varCompanyDataPermissionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "role_id")
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CompanyDataPermissionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CompanyDataPermissionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCompanyDataPermissionInterface struct {
	value *CompanyDataPermissionInterface
	isSet bool
}

func (v NullableCompanyDataPermissionInterface) Get() *CompanyDataPermissionInterface {
	return v.value
}

func (v *NullableCompanyDataPermissionInterface) Set(val *CompanyDataPermissionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDataPermissionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDataPermissionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDataPermissionInterface(val *CompanyDataPermissionInterface) *NullableCompanyDataPermissionInterface {
	return &NullableCompanyDataPermissionInterface{value: val, isSet: true}
}

func (v NullableCompanyDataPermissionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDataPermissionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
