/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the InventoryInStorePickupApiDataPickupLocationInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryInStorePickupApiDataPickupLocationInterface{}

// InventoryInStorePickupApiDataPickupLocationInterface Represents sources projection on In-Store Pickup context. Realisation must follow immutable DTO concept. Partial immutability done according to restriction of current Extension Attributes implementation.
type InventoryInStorePickupApiDataPickupLocationInterface struct {
	// Source code of Pickup Location.
	PickupLocationCode string `json:"pickup_location_code"`
	// Pickup Location name.
	Name *string `json:"name,omitempty"`
	// Pickup Location contact email.
	Email *string `json:"email,omitempty"`
	// Fax contact info.
	Fax *string `json:"fax,omitempty"`
	// Pickup Location contact name.
	ContactName *string `json:"contact_name,omitempty"`
	// Pickup Location description.
	Description *string `json:"description,omitempty"`
	// Pickup Location latitude.
	Latitude *float32 `json:"latitude,omitempty"`
	// Pickup Location longitude.
	Longitude *float32 `json:"longitude,omitempty"`
	// Pickup Location country ID.
	CountryId *string `json:"country_id,omitempty"`
	// Pickup Location region ID.
	RegionId *int32 `json:"region_id,omitempty"`
	// Pickup Location region.
	Region *string `json:"region,omitempty"`
	// Pickup Location city.
	City *string `json:"city,omitempty"`
	// Pickup Location street.
	Street *string `json:"street,omitempty"`
	// Pickup Location postcode.
	Postcode *string `json:"postcode,omitempty"`
	// Pickup Location phone.
	Phone *string `json:"phone,omitempty"`
	// ExtensionInterface class for @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\PickupLocationInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InventoryInStorePickupApiDataPickupLocationInterface InventoryInStorePickupApiDataPickupLocationInterface

// NewInventoryInStorePickupApiDataPickupLocationInterface instantiates a new InventoryInStorePickupApiDataPickupLocationInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryInStorePickupApiDataPickupLocationInterface(pickupLocationCode string) *InventoryInStorePickupApiDataPickupLocationInterface {
	this := InventoryInStorePickupApiDataPickupLocationInterface{}
	this.PickupLocationCode = pickupLocationCode
	return &this
}

// NewInventoryInStorePickupApiDataPickupLocationInterfaceWithDefaults instantiates a new InventoryInStorePickupApiDataPickupLocationInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryInStorePickupApiDataPickupLocationInterfaceWithDefaults() *InventoryInStorePickupApiDataPickupLocationInterface {
	this := InventoryInStorePickupApiDataPickupLocationInterface{}
	return &this
}

// GetPickupLocationCode returns the PickupLocationCode field value
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPickupLocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PickupLocationCode
}

// GetPickupLocationCodeOk returns a tuple with the PickupLocationCode field value
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPickupLocationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PickupLocationCode, true
}

// SetPickupLocationCode sets field value
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetPickupLocationCode(v string) {
	o.PickupLocationCode = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetEmail(v string) {
	o.Email = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetFax() string {
	if o == nil || IsNil(o.Fax) {
		var ret string
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetFaxOk() (*string, bool) {
	if o == nil || IsNil(o.Fax) {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasFax() bool {
	if o != nil && !IsNil(o.Fax) {
		return true
	}

	return false
}

// SetFax gets a reference to the given string and assigns it to the Fax field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetFax(v string) {
	o.Fax = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetContactName(v string) {
	o.ContactName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetDescription(v string) {
	o.Description = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetCountryId() string {
	if o == nil || IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetCountryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetCountryId(v string) {
	o.CountryId = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetRegion(v string) {
	o.Region = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetCity(v string) {
	o.City = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetStreet(v string) {
	o.Street = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetPostcode(v string) {
	o.Postcode = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetPhone(v string) {
	o.Phone = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o InventoryInStorePickupApiDataPickupLocationInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryInStorePickupApiDataPickupLocationInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pickup_location_code"] = o.PickupLocationCode
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Fax) {
		toSerialize["fax"] = o.Fax
	}
	if !IsNil(o.ContactName) {
		toSerialize["contact_name"] = o.ContactName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventoryInStorePickupApiDataPickupLocationInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pickup_location_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventoryInStorePickupApiDataPickupLocationInterface := _InventoryInStorePickupApiDataPickupLocationInterface{}

	err = json.Unmarshal(data, &varInventoryInStorePickupApiDataPickupLocationInterface)

	if err != nil {
		return err
	}

	*o = InventoryInStorePickupApiDataPickupLocationInterface(varInventoryInStorePickupApiDataPickupLocationInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pickup_location_code")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "fax")
		delete(additionalProperties, "contact_name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		delete(additionalProperties, "country_id")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "city")
		delete(additionalProperties, "street")
		delete(additionalProperties, "postcode")
		delete(additionalProperties, "phone")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *InventoryInStorePickupApiDataPickupLocationInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *InventoryInStorePickupApiDataPickupLocationInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableInventoryInStorePickupApiDataPickupLocationInterface struct {
	value *InventoryInStorePickupApiDataPickupLocationInterface
	isSet bool
}

func (v NullableInventoryInStorePickupApiDataPickupLocationInterface) Get() *InventoryInStorePickupApiDataPickupLocationInterface {
	return v.value
}

func (v *NullableInventoryInStorePickupApiDataPickupLocationInterface) Set(val *InventoryInStorePickupApiDataPickupLocationInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryInStorePickupApiDataPickupLocationInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryInStorePickupApiDataPickupLocationInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryInStorePickupApiDataPickupLocationInterface(val *InventoryInStorePickupApiDataPickupLocationInterface) *NullableInventoryInStorePickupApiDataPickupLocationInterface {
	return &NullableInventoryInStorePickupApiDataPickupLocationInterface{value: val, isSet: true}
}

func (v NullableInventoryInStorePickupApiDataPickupLocationInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryInStorePickupApiDataPickupLocationInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
