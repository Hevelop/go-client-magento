/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the AdobeCommerceEventsClientDataConfigurationInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdobeCommerceEventsClientDataConfigurationInterface{}

// AdobeCommerceEventsClientDataConfigurationInterface Eventing configuration
type AdobeCommerceEventsClientDataConfigurationInterface struct {
	// If is enabled
	Enabled bool `json:"enabled"`
	// Merchant id
	MerchantId string `json:"merchant_id"`
	// Environment id
	EnvironmentId string `json:"environment_id"`
	// Provider id
	ProviderId string `json:"provider_id"`
	// Instance id
	InstanceId string `json:"instance_id"`
	// Workspace configuration
	WorkspaceConfiguration string `json:"workspace_configuration"`
	AdditionalProperties   map[string]interface{}
}

type _AdobeCommerceEventsClientDataConfigurationInterface AdobeCommerceEventsClientDataConfigurationInterface

// NewAdobeCommerceEventsClientDataConfigurationInterface instantiates a new AdobeCommerceEventsClientDataConfigurationInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdobeCommerceEventsClientDataConfigurationInterface(enabled bool, merchantId string, environmentId string, providerId string, instanceId string, workspaceConfiguration string) *AdobeCommerceEventsClientDataConfigurationInterface {
	this := AdobeCommerceEventsClientDataConfigurationInterface{}
	this.Enabled = enabled
	this.MerchantId = merchantId
	this.EnvironmentId = environmentId
	this.ProviderId = providerId
	this.InstanceId = instanceId
	this.WorkspaceConfiguration = workspaceConfiguration
	return &this
}

// NewAdobeCommerceEventsClientDataConfigurationInterfaceWithDefaults instantiates a new AdobeCommerceEventsClientDataConfigurationInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdobeCommerceEventsClientDataConfigurationInterfaceWithDefaults() *AdobeCommerceEventsClientDataConfigurationInterface {
	this := AdobeCommerceEventsClientDataConfigurationInterface{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMerchantId returns the MerchantId field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetProviderId returns the ProviderId field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetProviderId(v string) {
	o.ProviderId = v
}

// GetInstanceId returns the InstanceId field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetWorkspaceConfiguration returns the WorkspaceConfiguration field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetWorkspaceConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceConfiguration
}

// GetWorkspaceConfigurationOk returns a tuple with the WorkspaceConfiguration field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetWorkspaceConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceConfiguration, true
}

// SetWorkspaceConfiguration sets field value
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetWorkspaceConfiguration(v string) {
	o.WorkspaceConfiguration = v
}

func (o AdobeCommerceEventsClientDataConfigurationInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdobeCommerceEventsClientDataConfigurationInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["instance_id"] = o.InstanceId
	toSerialize["workspace_configuration"] = o.WorkspaceConfiguration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdobeCommerceEventsClientDataConfigurationInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"merchant_id",
		"environment_id",
		"provider_id",
		"instance_id",
		"workspace_configuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdobeCommerceEventsClientDataConfigurationInterface := _AdobeCommerceEventsClientDataConfigurationInterface{}

	err = json.Unmarshal(data, &varAdobeCommerceEventsClientDataConfigurationInterface)

	if err != nil {
		return err
	}

	*o = AdobeCommerceEventsClientDataConfigurationInterface(varAdobeCommerceEventsClientDataConfigurationInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "merchant_id")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "instance_id")
		delete(additionalProperties, "workspace_configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *AdobeCommerceEventsClientDataConfigurationInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *AdobeCommerceEventsClientDataConfigurationInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableAdobeCommerceEventsClientDataConfigurationInterface struct {
	value *AdobeCommerceEventsClientDataConfigurationInterface
	isSet bool
}

func (v NullableAdobeCommerceEventsClientDataConfigurationInterface) Get() *AdobeCommerceEventsClientDataConfigurationInterface {
	return v.value
}

func (v *NullableAdobeCommerceEventsClientDataConfigurationInterface) Set(val *AdobeCommerceEventsClientDataConfigurationInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableAdobeCommerceEventsClientDataConfigurationInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableAdobeCommerceEventsClientDataConfigurationInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdobeCommerceEventsClientDataConfigurationInterface(val *AdobeCommerceEventsClientDataConfigurationInterface) *NullableAdobeCommerceEventsClientDataConfigurationInterface {
	return &NullableAdobeCommerceEventsClientDataConfigurationInterface{value: val, isSet: true}
}

func (v NullableAdobeCommerceEventsClientDataConfigurationInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdobeCommerceEventsClientDataConfigurationInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
