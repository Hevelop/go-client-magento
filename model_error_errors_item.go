/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the ErrorErrorsItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorErrorsItem{}

// ErrorErrorsItem Error details
type ErrorErrorsItem struct {
	// Error message
	Message *string `json:"message,omitempty"`
	// Error parameters list
	Parameters           []ErrorParametersItem `json:"parameters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorErrorsItem ErrorErrorsItem

// NewErrorErrorsItem instantiates a new ErrorErrorsItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorErrorsItem() *ErrorErrorsItem {
	this := ErrorErrorsItem{}
	return &this
}

// NewErrorErrorsItemWithDefaults instantiates a new ErrorErrorsItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorErrorsItemWithDefaults() *ErrorErrorsItem {
	this := ErrorErrorsItem{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorErrorsItem) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErrorsItem) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorErrorsItem) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorErrorsItem) SetMessage(v string) {
	o.Message = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ErrorErrorsItem) GetParameters() []ErrorParametersItem {
	if o == nil || IsNil(o.Parameters) {
		var ret []ErrorParametersItem
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErrorsItem) GetParametersOk() ([]ErrorParametersItem, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ErrorErrorsItem) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ErrorParametersItem and assigns it to the Parameters field.
func (o *ErrorErrorsItem) SetParameters(v []ErrorParametersItem) {
	o.Parameters = v
}

func (o ErrorErrorsItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorErrorsItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorErrorsItem) UnmarshalJSON(data []byte) (err error) {
	varErrorErrorsItem := _ErrorErrorsItem{}

	err = json.Unmarshal(data, &varErrorErrorsItem)

	if err != nil {
		return err
	}

	*o = ErrorErrorsItem(varErrorErrorsItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "parameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ErrorErrorsItem) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ErrorErrorsItem) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableErrorErrorsItem struct {
	value *ErrorErrorsItem
	isSet bool
}

func (v NullableErrorErrorsItem) Get() *ErrorErrorsItem {
	return v.value
}

func (v *NullableErrorErrorsItem) Set(val *ErrorErrorsItem) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorErrorsItem) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorErrorsItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorErrorsItem(val *ErrorErrorsItem) *NullableErrorErrorsItem {
	return &NullableErrorErrorsItem{value: val, isSet: true}
}

func (v NullableErrorErrorsItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorErrorsItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
