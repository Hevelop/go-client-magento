/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxDataTaxRateInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxDataTaxRateInterface{}

// TaxDataTaxRateInterface Tax rate interface.
type TaxDataTaxRateInterface struct {
	// Id
	Id *int32 `json:"id,omitempty"`
	// Country id
	TaxCountryId string `json:"tax_country_id"`
	// Region id
	TaxRegionId *int32 `json:"tax_region_id,omitempty"`
	// Region name
	RegionName *string `json:"region_name,omitempty"`
	// Postcode
	TaxPostcode *string `json:"tax_postcode,omitempty"`
	// Zip is range
	ZipIsRange *int32 `json:"zip_is_range,omitempty"`
	// Zip range from
	ZipFrom *int32 `json:"zip_from,omitempty"`
	// Zip range to
	ZipTo *int32 `json:"zip_to,omitempty"`
	// Tax rate in percentage
	Rate float32 `json:"rate"`
	// Tax rate code
	Code string `json:"code"`
	// Tax rate titles
	Titles []TaxDataTaxRateTitleInterface `json:"titles,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaxDataTaxRateInterface TaxDataTaxRateInterface

// NewTaxDataTaxRateInterface instantiates a new TaxDataTaxRateInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxDataTaxRateInterface(taxCountryId string, rate float32, code string) *TaxDataTaxRateInterface {
	this := TaxDataTaxRateInterface{}
	this.TaxCountryId = taxCountryId
	this.Rate = rate
	this.Code = code
	return &this
}

// NewTaxDataTaxRateInterfaceWithDefaults instantiates a new TaxDataTaxRateInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxDataTaxRateInterfaceWithDefaults() *TaxDataTaxRateInterface {
	this := TaxDataTaxRateInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxDataTaxRateInterface) SetId(v int32) {
	o.Id = &v
}

// GetTaxCountryId returns the TaxCountryId field value
func (o *TaxDataTaxRateInterface) GetTaxCountryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaxCountryId
}

// GetTaxCountryIdOk returns a tuple with the TaxCountryId field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetTaxCountryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxCountryId, true
}

// SetTaxCountryId sets field value
func (o *TaxDataTaxRateInterface) SetTaxCountryId(v string) {
	o.TaxCountryId = v
}

// GetTaxRegionId returns the TaxRegionId field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetTaxRegionId() int32 {
	if o == nil || IsNil(o.TaxRegionId) {
		var ret int32
		return ret
	}
	return *o.TaxRegionId
}

// GetTaxRegionIdOk returns a tuple with the TaxRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetTaxRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxRegionId) {
		return nil, false
	}
	return o.TaxRegionId, true
}

// HasTaxRegionId returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasTaxRegionId() bool {
	if o != nil && !IsNil(o.TaxRegionId) {
		return true
	}

	return false
}

// SetTaxRegionId gets a reference to the given int32 and assigns it to the TaxRegionId field.
func (o *TaxDataTaxRateInterface) SetTaxRegionId(v int32) {
	o.TaxRegionId = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *TaxDataTaxRateInterface) SetRegionName(v string) {
	o.RegionName = &v
}

// GetTaxPostcode returns the TaxPostcode field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetTaxPostcode() string {
	if o == nil || IsNil(o.TaxPostcode) {
		var ret string
		return ret
	}
	return *o.TaxPostcode
}

// GetTaxPostcodeOk returns a tuple with the TaxPostcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetTaxPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxPostcode) {
		return nil, false
	}
	return o.TaxPostcode, true
}

// HasTaxPostcode returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasTaxPostcode() bool {
	if o != nil && !IsNil(o.TaxPostcode) {
		return true
	}

	return false
}

// SetTaxPostcode gets a reference to the given string and assigns it to the TaxPostcode field.
func (o *TaxDataTaxRateInterface) SetTaxPostcode(v string) {
	o.TaxPostcode = &v
}

// GetZipIsRange returns the ZipIsRange field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetZipIsRange() int32 {
	if o == nil || IsNil(o.ZipIsRange) {
		var ret int32
		return ret
	}
	return *o.ZipIsRange
}

// GetZipIsRangeOk returns a tuple with the ZipIsRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetZipIsRangeOk() (*int32, bool) {
	if o == nil || IsNil(o.ZipIsRange) {
		return nil, false
	}
	return o.ZipIsRange, true
}

// HasZipIsRange returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasZipIsRange() bool {
	if o != nil && !IsNil(o.ZipIsRange) {
		return true
	}

	return false
}

// SetZipIsRange gets a reference to the given int32 and assigns it to the ZipIsRange field.
func (o *TaxDataTaxRateInterface) SetZipIsRange(v int32) {
	o.ZipIsRange = &v
}

// GetZipFrom returns the ZipFrom field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetZipFrom() int32 {
	if o == nil || IsNil(o.ZipFrom) {
		var ret int32
		return ret
	}
	return *o.ZipFrom
}

// GetZipFromOk returns a tuple with the ZipFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetZipFromOk() (*int32, bool) {
	if o == nil || IsNil(o.ZipFrom) {
		return nil, false
	}
	return o.ZipFrom, true
}

// HasZipFrom returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasZipFrom() bool {
	if o != nil && !IsNil(o.ZipFrom) {
		return true
	}

	return false
}

// SetZipFrom gets a reference to the given int32 and assigns it to the ZipFrom field.
func (o *TaxDataTaxRateInterface) SetZipFrom(v int32) {
	o.ZipFrom = &v
}

// GetZipTo returns the ZipTo field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetZipTo() int32 {
	if o == nil || IsNil(o.ZipTo) {
		var ret int32
		return ret
	}
	return *o.ZipTo
}

// GetZipToOk returns a tuple with the ZipTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetZipToOk() (*int32, bool) {
	if o == nil || IsNil(o.ZipTo) {
		return nil, false
	}
	return o.ZipTo, true
}

// HasZipTo returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasZipTo() bool {
	if o != nil && !IsNil(o.ZipTo) {
		return true
	}

	return false
}

// SetZipTo gets a reference to the given int32 and assigns it to the ZipTo field.
func (o *TaxDataTaxRateInterface) SetZipTo(v int32) {
	o.ZipTo = &v
}

// GetRate returns the Rate field value
func (o *TaxDataTaxRateInterface) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *TaxDataTaxRateInterface) SetRate(v float32) {
	o.Rate = v
}

// GetCode returns the Code field value
func (o *TaxDataTaxRateInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TaxDataTaxRateInterface) SetCode(v string) {
	o.Code = v
}

// GetTitles returns the Titles field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetTitles() []TaxDataTaxRateTitleInterface {
	if o == nil || IsNil(o.Titles) {
		var ret []TaxDataTaxRateTitleInterface
		return ret
	}
	return o.Titles
}

// GetTitlesOk returns a tuple with the Titles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetTitlesOk() ([]TaxDataTaxRateTitleInterface, bool) {
	if o == nil || IsNil(o.Titles) {
		return nil, false
	}
	return o.Titles, true
}

// HasTitles returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasTitles() bool {
	if o != nil && !IsNil(o.Titles) {
		return true
	}

	return false
}

// SetTitles gets a reference to the given []TaxDataTaxRateTitleInterface and assigns it to the Titles field.
func (o *TaxDataTaxRateInterface) SetTitles(v []TaxDataTaxRateTitleInterface) {
	o.Titles = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *TaxDataTaxRateInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataTaxRateInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *TaxDataTaxRateInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *TaxDataTaxRateInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o TaxDataTaxRateInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxDataTaxRateInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["tax_country_id"] = o.TaxCountryId
	if !IsNil(o.TaxRegionId) {
		toSerialize["tax_region_id"] = o.TaxRegionId
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.TaxPostcode) {
		toSerialize["tax_postcode"] = o.TaxPostcode
	}
	if !IsNil(o.ZipIsRange) {
		toSerialize["zip_is_range"] = o.ZipIsRange
	}
	if !IsNil(o.ZipFrom) {
		toSerialize["zip_from"] = o.ZipFrom
	}
	if !IsNil(o.ZipTo) {
		toSerialize["zip_to"] = o.ZipTo
	}
	toSerialize["rate"] = o.Rate
	toSerialize["code"] = o.Code
	if !IsNil(o.Titles) {
		toSerialize["titles"] = o.Titles
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaxDataTaxRateInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tax_country_id",
		"rate",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxDataTaxRateInterface := _TaxDataTaxRateInterface{}

	err = json.Unmarshal(data, &varTaxDataTaxRateInterface)

	if err != nil {
		return err
	}

	*o = TaxDataTaxRateInterface(varTaxDataTaxRateInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "tax_country_id")
		delete(additionalProperties, "tax_region_id")
		delete(additionalProperties, "region_name")
		delete(additionalProperties, "tax_postcode")
		delete(additionalProperties, "zip_is_range")
		delete(additionalProperties, "zip_from")
		delete(additionalProperties, "zip_to")
		delete(additionalProperties, "rate")
		delete(additionalProperties, "code")
		delete(additionalProperties, "titles")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *TaxDataTaxRateInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *TaxDataTaxRateInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableTaxDataTaxRateInterface struct {
	value *TaxDataTaxRateInterface
	isSet bool
}

func (v NullableTaxDataTaxRateInterface) Get() *TaxDataTaxRateInterface {
	return v.value
}

func (v *NullableTaxDataTaxRateInterface) Set(val *TaxDataTaxRateInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxDataTaxRateInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxDataTaxRateInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxDataTaxRateInterface(val *TaxDataTaxRateInterface) *NullableTaxDataTaxRateInterface {
	return &NullableTaxDataTaxRateInterface{value: val, isSet: true}
}

func (v NullableTaxDataTaxRateInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxDataTaxRateInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
