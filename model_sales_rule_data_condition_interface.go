/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the SalesRuleDataConditionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesRuleDataConditionInterface{}

// SalesRuleDataConditionInterface Interface ConditionInterface
type SalesRuleDataConditionInterface struct {
	// Condition type
	ConditionType string `json:"condition_type"`
	// List of conditions
	Conditions []SalesRuleDataConditionInterface `json:"conditions,omitempty"`
	// The aggregator type
	AggregatorType *string `json:"aggregator_type,omitempty"`
	// The operator of the condition
	Operator string `json:"operator"`
	// The attribute name of the condition
	AttributeName *string `json:"attribute_name,omitempty"`
	// The value of the condition
	Value string `json:"value"`
	// ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SalesRuleDataConditionInterface SalesRuleDataConditionInterface

// NewSalesRuleDataConditionInterface instantiates a new SalesRuleDataConditionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesRuleDataConditionInterface(conditionType string, operator string, value string) *SalesRuleDataConditionInterface {
	this := SalesRuleDataConditionInterface{}
	this.ConditionType = conditionType
	this.Operator = operator
	this.Value = value
	return &this
}

// NewSalesRuleDataConditionInterfaceWithDefaults instantiates a new SalesRuleDataConditionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesRuleDataConditionInterfaceWithDefaults() *SalesRuleDataConditionInterface {
	this := SalesRuleDataConditionInterface{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *SalesRuleDataConditionInterface) GetConditionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetConditionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *SalesRuleDataConditionInterface) SetConditionType(v string) {
	o.ConditionType = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *SalesRuleDataConditionInterface) GetConditions() []SalesRuleDataConditionInterface {
	if o == nil || IsNil(o.Conditions) {
		var ret []SalesRuleDataConditionInterface
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetConditionsOk() ([]SalesRuleDataConditionInterface, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *SalesRuleDataConditionInterface) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []SalesRuleDataConditionInterface and assigns it to the Conditions field.
func (o *SalesRuleDataConditionInterface) SetConditions(v []SalesRuleDataConditionInterface) {
	o.Conditions = v
}

// GetAggregatorType returns the AggregatorType field value if set, zero value otherwise.
func (o *SalesRuleDataConditionInterface) GetAggregatorType() string {
	if o == nil || IsNil(o.AggregatorType) {
		var ret string
		return ret
	}
	return *o.AggregatorType
}

// GetAggregatorTypeOk returns a tuple with the AggregatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetAggregatorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AggregatorType) {
		return nil, false
	}
	return o.AggregatorType, true
}

// HasAggregatorType returns a boolean if a field has been set.
func (o *SalesRuleDataConditionInterface) HasAggregatorType() bool {
	if o != nil && !IsNil(o.AggregatorType) {
		return true
	}

	return false
}

// SetAggregatorType gets a reference to the given string and assigns it to the AggregatorType field.
func (o *SalesRuleDataConditionInterface) SetAggregatorType(v string) {
	o.AggregatorType = &v
}

// GetOperator returns the Operator field value
func (o *SalesRuleDataConditionInterface) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *SalesRuleDataConditionInterface) SetOperator(v string) {
	o.Operator = v
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *SalesRuleDataConditionInterface) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *SalesRuleDataConditionInterface) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *SalesRuleDataConditionInterface) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetValue returns the Value field value
func (o *SalesRuleDataConditionInterface) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SalesRuleDataConditionInterface) SetValue(v string) {
	o.Value = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *SalesRuleDataConditionInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataConditionInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *SalesRuleDataConditionInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *SalesRuleDataConditionInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o SalesRuleDataConditionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesRuleDataConditionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition_type"] = o.ConditionType
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.AggregatorType) {
		toSerialize["aggregator_type"] = o.AggregatorType
	}
	toSerialize["operator"] = o.Operator
	if !IsNil(o.AttributeName) {
		toSerialize["attribute_name"] = o.AttributeName
	}
	toSerialize["value"] = o.Value
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SalesRuleDataConditionInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition_type",
		"operator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSalesRuleDataConditionInterface := _SalesRuleDataConditionInterface{}

	err = json.Unmarshal(data, &varSalesRuleDataConditionInterface)

	if err != nil {
		return err
	}

	*o = SalesRuleDataConditionInterface(varSalesRuleDataConditionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "condition_type")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "aggregator_type")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "attribute_name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SalesRuleDataConditionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SalesRuleDataConditionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSalesRuleDataConditionInterface struct {
	value *SalesRuleDataConditionInterface
	isSet bool
}

func (v NullableSalesRuleDataConditionInterface) Get() *SalesRuleDataConditionInterface {
	return v.value
}

func (v *NullableSalesRuleDataConditionInterface) Set(val *SalesRuleDataConditionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesRuleDataConditionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesRuleDataConditionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesRuleDataConditionInterface(val *SalesRuleDataConditionInterface) *NullableSalesRuleDataConditionInterface {
	return &NullableSalesRuleDataConditionInterface{value: val, isSet: true}
}

func (v NullableSalesRuleDataConditionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesRuleDataConditionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
