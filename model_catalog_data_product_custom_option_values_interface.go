/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataProductCustomOptionValuesInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductCustomOptionValuesInterface{}

// CatalogDataProductCustomOptionValuesInterface
type CatalogDataProductCustomOptionValuesInterface struct {
	// Option title
	Title string `json:"title"`
	// Sort order
	SortOrder int32 `json:"sort_order"`
	// Price
	Price float32 `json:"price"`
	// Price type
	PriceType string `json:"price_type"`
	// Sku
	Sku *string `json:"sku,omitempty"`
	// Option type id
	OptionTypeId         *int32 `json:"option_type_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataProductCustomOptionValuesInterface CatalogDataProductCustomOptionValuesInterface

// NewCatalogDataProductCustomOptionValuesInterface instantiates a new CatalogDataProductCustomOptionValuesInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductCustomOptionValuesInterface(title string, sortOrder int32, price float32, priceType string) *CatalogDataProductCustomOptionValuesInterface {
	this := CatalogDataProductCustomOptionValuesInterface{}
	this.Title = title
	this.SortOrder = sortOrder
	this.Price = price
	this.PriceType = priceType
	return &this
}

// NewCatalogDataProductCustomOptionValuesInterfaceWithDefaults instantiates a new CatalogDataProductCustomOptionValuesInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductCustomOptionValuesInterfaceWithDefaults() *CatalogDataProductCustomOptionValuesInterface {
	this := CatalogDataProductCustomOptionValuesInterface{}
	return &this
}

// GetTitle returns the Title field value
func (o *CatalogDataProductCustomOptionValuesInterface) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CatalogDataProductCustomOptionValuesInterface) SetTitle(v string) {
	o.Title = v
}

// GetSortOrder returns the SortOrder field value
func (o *CatalogDataProductCustomOptionValuesInterface) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *CatalogDataProductCustomOptionValuesInterface) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetPrice returns the Price field value
func (o *CatalogDataProductCustomOptionValuesInterface) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *CatalogDataProductCustomOptionValuesInterface) SetPrice(v float32) {
	o.Price = v
}

// GetPriceType returns the PriceType field value
func (o *CatalogDataProductCustomOptionValuesInterface) GetPriceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetPriceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *CatalogDataProductCustomOptionValuesInterface) SetPriceType(v string) {
	o.PriceType = v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *CatalogDataProductCustomOptionValuesInterface) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *CatalogDataProductCustomOptionValuesInterface) SetSku(v string) {
	o.Sku = &v
}

// GetOptionTypeId returns the OptionTypeId field value if set, zero value otherwise.
func (o *CatalogDataProductCustomOptionValuesInterface) GetOptionTypeId() int32 {
	if o == nil || IsNil(o.OptionTypeId) {
		var ret int32
		return ret
	}
	return *o.OptionTypeId
}

// GetOptionTypeIdOk returns a tuple with the OptionTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) GetOptionTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OptionTypeId) {
		return nil, false
	}
	return o.OptionTypeId, true
}

// HasOptionTypeId returns a boolean if a field has been set.
func (o *CatalogDataProductCustomOptionValuesInterface) HasOptionTypeId() bool {
	if o != nil && !IsNil(o.OptionTypeId) {
		return true
	}

	return false
}

// SetOptionTypeId gets a reference to the given int32 and assigns it to the OptionTypeId field.
func (o *CatalogDataProductCustomOptionValuesInterface) SetOptionTypeId(v int32) {
	o.OptionTypeId = &v
}

func (o CatalogDataProductCustomOptionValuesInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductCustomOptionValuesInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["sort_order"] = o.SortOrder
	toSerialize["price"] = o.Price
	toSerialize["price_type"] = o.PriceType
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.OptionTypeId) {
		toSerialize["option_type_id"] = o.OptionTypeId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductCustomOptionValuesInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"sort_order",
		"price",
		"price_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataProductCustomOptionValuesInterface := _CatalogDataProductCustomOptionValuesInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductCustomOptionValuesInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductCustomOptionValuesInterface(varCatalogDataProductCustomOptionValuesInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "sort_order")
		delete(additionalProperties, "price")
		delete(additionalProperties, "price_type")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "option_type_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductCustomOptionValuesInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductCustomOptionValuesInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductCustomOptionValuesInterface struct {
	value *CatalogDataProductCustomOptionValuesInterface
	isSet bool
}

func (v NullableCatalogDataProductCustomOptionValuesInterface) Get() *CatalogDataProductCustomOptionValuesInterface {
	return v.value
}

func (v *NullableCatalogDataProductCustomOptionValuesInterface) Set(val *CatalogDataProductCustomOptionValuesInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductCustomOptionValuesInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductCustomOptionValuesInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductCustomOptionValuesInterface(val *CatalogDataProductCustomOptionValuesInterface) *NullableCatalogDataProductCustomOptionValuesInterface {
	return &NullableCatalogDataProductCustomOptionValuesInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductCustomOptionValuesInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductCustomOptionValuesInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
