/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the CatalogDataCategoryInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataCategoryInterface{}

// CatalogDataCategoryInterface Category data interface.
type CatalogDataCategoryInterface struct {
	// Category id.
	Id *int32 `json:"id,omitempty"`
	// Parent category ID
	ParentId *int32 `json:"parent_id,omitempty"`
	// Category name
	Name *string `json:"name,omitempty"`
	// Whether category is active
	IsActive *bool `json:"is_active,omitempty"`
	// Category position
	Position *int32 `json:"position,omitempty"`
	// Category level
	Level *int32 `json:"level,omitempty"`
	// Children ids comma separated.
	Children *string `json:"children,omitempty"`
	// Category creation date and time.
	CreatedAt *string `json:"created_at,omitempty"`
	// Category last update date and time.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Category full path.
	Path *string `json:"path,omitempty"`
	// Available sort by for category.
	AvailableSortBy []string `json:"available_sort_by,omitempty"`
	// Category is included in menu.
	IncludeInMenu *bool `json:"include_in_menu,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface
	ExtensionAttributes map[string]interface{} `json:"extension_attributes,omitempty"`
	// Custom attributes values.
	CustomAttributes     []FrameworkAttributeInterface `json:"custom_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataCategoryInterface CatalogDataCategoryInterface

// NewCatalogDataCategoryInterface instantiates a new CatalogDataCategoryInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataCategoryInterface() *CatalogDataCategoryInterface {
	this := CatalogDataCategoryInterface{}
	return &this
}

// NewCatalogDataCategoryInterfaceWithDefaults instantiates a new CatalogDataCategoryInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataCategoryInterfaceWithDefaults() *CatalogDataCategoryInterface {
	this := CatalogDataCategoryInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogDataCategoryInterface) SetId(v int32) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId) {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetParentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *CatalogDataCategoryInterface) SetParentId(v int32) {
	o.ParentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogDataCategoryInterface) SetName(v string) {
	o.Name = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *CatalogDataCategoryInterface) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *CatalogDataCategoryInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *CatalogDataCategoryInterface) SetLevel(v int32) {
	o.Level = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetChildren() string {
	if o == nil || IsNil(o.Children) {
		var ret string
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetChildrenOk() (*string, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given string and assigns it to the Children field.
func (o *CatalogDataCategoryInterface) SetChildren(v string) {
	o.Children = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CatalogDataCategoryInterface) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *CatalogDataCategoryInterface) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *CatalogDataCategoryInterface) SetPath(v string) {
	o.Path = &v
}

// GetAvailableSortBy returns the AvailableSortBy field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetAvailableSortBy() []string {
	if o == nil || IsNil(o.AvailableSortBy) {
		var ret []string
		return ret
	}
	return o.AvailableSortBy
}

// GetAvailableSortByOk returns a tuple with the AvailableSortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetAvailableSortByOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableSortBy) {
		return nil, false
	}
	return o.AvailableSortBy, true
}

// HasAvailableSortBy returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasAvailableSortBy() bool {
	if o != nil && !IsNil(o.AvailableSortBy) {
		return true
	}

	return false
}

// SetAvailableSortBy gets a reference to the given []string and assigns it to the AvailableSortBy field.
func (o *CatalogDataCategoryInterface) SetAvailableSortBy(v []string) {
	o.AvailableSortBy = v
}

// GetIncludeInMenu returns the IncludeInMenu field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetIncludeInMenu() bool {
	if o == nil || IsNil(o.IncludeInMenu) {
		var ret bool
		return ret
	}
	return *o.IncludeInMenu
}

// GetIncludeInMenuOk returns a tuple with the IncludeInMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetIncludeInMenuOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeInMenu) {
		return nil, false
	}
	return o.IncludeInMenu, true
}

// HasIncludeInMenu returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasIncludeInMenu() bool {
	if o != nil && !IsNil(o.IncludeInMenu) {
		return true
	}

	return false
}

// SetIncludeInMenu gets a reference to the given bool and assigns it to the IncludeInMenu field.
func (o *CatalogDataCategoryInterface) SetIncludeInMenu(v bool) {
	o.IncludeInMenu = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataCategoryInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *CatalogDataCategoryInterface) GetCustomAttributes() []FrameworkAttributeInterface {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []FrameworkAttributeInterface
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryInterface) GetCustomAttributesOk() ([]FrameworkAttributeInterface, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *CatalogDataCategoryInterface) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []FrameworkAttributeInterface and assigns it to the CustomAttributes field.
func (o *CatalogDataCategoryInterface) SetCustomAttributes(v []FrameworkAttributeInterface) {
	o.CustomAttributes = v
}

func (o CatalogDataCategoryInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataCategoryInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.AvailableSortBy) {
		toSerialize["available_sort_by"] = o.AvailableSortBy
	}
	if !IsNil(o.IncludeInMenu) {
		toSerialize["include_in_menu"] = o.IncludeInMenu
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["custom_attributes"] = o.CustomAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataCategoryInterface) UnmarshalJSON(data []byte) (err error) {
	varCatalogDataCategoryInterface := _CatalogDataCategoryInterface{}

	err = json.Unmarshal(data, &varCatalogDataCategoryInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataCategoryInterface(varCatalogDataCategoryInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "parent_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "position")
		delete(additionalProperties, "level")
		delete(additionalProperties, "children")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "path")
		delete(additionalProperties, "available_sort_by")
		delete(additionalProperties, "include_in_menu")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "custom_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataCategoryInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataCategoryInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataCategoryInterface struct {
	value *CatalogDataCategoryInterface
	isSet bool
}

func (v NullableCatalogDataCategoryInterface) Get() *CatalogDataCategoryInterface {
	return v.value
}

func (v *NullableCatalogDataCategoryInterface) Set(val *CatalogDataCategoryInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataCategoryInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataCategoryInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataCategoryInterface(val *CatalogDataCategoryInterface) *NullableCatalogDataCategoryInterface {
	return &NullableCatalogDataCategoryInterface{value: val, isSet: true}
}

func (v NullableCatalogDataCategoryInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataCategoryInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
