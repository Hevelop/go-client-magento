/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyDataCompanyInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyDataCompanyInterface{}

// CompanyDataCompanyInterface Interface for Company entity.
type CompanyDataCompanyInterface struct {
	// Id.
	Id *int32 `json:"id,omitempty"`
	// Status.
	Status *int32 `json:"status,omitempty"`
	// Company name.
	CompanyName *string `json:"company_name,omitempty"`
	// Legal name.
	LegalName *string `json:"legal_name,omitempty"`
	// Company email.
	CompanyEmail *string `json:"company_email,omitempty"`
	// Vat tax id.
	VatTaxId *string `json:"vat_tax_id,omitempty"`
	// Reseller Id.
	ResellerId *string `json:"reseller_id,omitempty"`
	// Comment.
	Comment *string `json:"comment,omitempty"`
	// Street.
	Street []string `json:"street"`
	// City.
	City *string `json:"city,omitempty"`
	// Country.
	CountryId *string `json:"country_id,omitempty"`
	// Region.
	Region *string `json:"region,omitempty"`
	// Region Id.
	RegionId *string `json:"region_id,omitempty"`
	// Postcode.
	Postcode *string `json:"postcode,omitempty"`
	// Telephone.
	Telephone *string `json:"telephone,omitempty"`
	// Customer Group Id.
	CustomerGroupId int32 `json:"customer_group_id"`
	// Sales Representative Id.
	SalesRepresentativeId int32 `json:"sales_representative_id"`
	// Reject Reason.
	RejectReason string `json:"reject_reason"`
	// Rejected at time.
	RejectedAt string `json:"rejected_at"`
	// Company admin customer id.
	SuperUserId          int32                                 `json:"super_user_id"`
	ExtensionAttributes  *CompanyDataCompanyExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyDataCompanyInterface CompanyDataCompanyInterface

// NewCompanyDataCompanyInterface instantiates a new CompanyDataCompanyInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDataCompanyInterface(street []string, customerGroupId int32, salesRepresentativeId int32, rejectReason string, rejectedAt string, superUserId int32) *CompanyDataCompanyInterface {
	this := CompanyDataCompanyInterface{}
	this.Street = street
	this.CustomerGroupId = customerGroupId
	this.SalesRepresentativeId = salesRepresentativeId
	this.RejectReason = rejectReason
	this.RejectedAt = rejectedAt
	this.SuperUserId = superUserId
	return &this
}

// NewCompanyDataCompanyInterfaceWithDefaults instantiates a new CompanyDataCompanyInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDataCompanyInterfaceWithDefaults() *CompanyDataCompanyInterface {
	this := CompanyDataCompanyInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyDataCompanyInterface) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *CompanyDataCompanyInterface) SetStatus(v int32) {
	o.Status = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *CompanyDataCompanyInterface) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetLegalName returns the LegalName field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetLegalName() string {
	if o == nil || IsNil(o.LegalName) {
		var ret string
		return ret
	}
	return *o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetLegalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegalName) {
		return nil, false
	}
	return o.LegalName, true
}

// HasLegalName returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasLegalName() bool {
	if o != nil && !IsNil(o.LegalName) {
		return true
	}

	return false
}

// SetLegalName gets a reference to the given string and assigns it to the LegalName field.
func (o *CompanyDataCompanyInterface) SetLegalName(v string) {
	o.LegalName = &v
}

// GetCompanyEmail returns the CompanyEmail field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetCompanyEmail() string {
	if o == nil || IsNil(o.CompanyEmail) {
		var ret string
		return ret
	}
	return *o.CompanyEmail
}

// GetCompanyEmailOk returns a tuple with the CompanyEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCompanyEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyEmail) {
		return nil, false
	}
	return o.CompanyEmail, true
}

// HasCompanyEmail returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasCompanyEmail() bool {
	if o != nil && !IsNil(o.CompanyEmail) {
		return true
	}

	return false
}

// SetCompanyEmail gets a reference to the given string and assigns it to the CompanyEmail field.
func (o *CompanyDataCompanyInterface) SetCompanyEmail(v string) {
	o.CompanyEmail = &v
}

// GetVatTaxId returns the VatTaxId field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetVatTaxId() string {
	if o == nil || IsNil(o.VatTaxId) {
		var ret string
		return ret
	}
	return *o.VatTaxId
}

// GetVatTaxIdOk returns a tuple with the VatTaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetVatTaxIdOk() (*string, bool) {
	if o == nil || IsNil(o.VatTaxId) {
		return nil, false
	}
	return o.VatTaxId, true
}

// HasVatTaxId returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasVatTaxId() bool {
	if o != nil && !IsNil(o.VatTaxId) {
		return true
	}

	return false
}

// SetVatTaxId gets a reference to the given string and assigns it to the VatTaxId field.
func (o *CompanyDataCompanyInterface) SetVatTaxId(v string) {
	o.VatTaxId = &v
}

// GetResellerId returns the ResellerId field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetResellerId() string {
	if o == nil || IsNil(o.ResellerId) {
		var ret string
		return ret
	}
	return *o.ResellerId
}

// GetResellerIdOk returns a tuple with the ResellerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetResellerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResellerId) {
		return nil, false
	}
	return o.ResellerId, true
}

// HasResellerId returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasResellerId() bool {
	if o != nil && !IsNil(o.ResellerId) {
		return true
	}

	return false
}

// SetResellerId gets a reference to the given string and assigns it to the ResellerId field.
func (o *CompanyDataCompanyInterface) SetResellerId(v string) {
	o.ResellerId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CompanyDataCompanyInterface) SetComment(v string) {
	o.Comment = &v
}

// GetStreet returns the Street field value
func (o *CompanyDataCompanyInterface) GetStreet() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetStreetOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Street, true
}

// SetStreet sets field value
func (o *CompanyDataCompanyInterface) SetStreet(v []string) {
	o.Street = v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CompanyDataCompanyInterface) SetCity(v string) {
	o.City = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetCountryId() string {
	if o == nil || IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCountryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *CompanyDataCompanyInterface) SetCountryId(v string) {
	o.CountryId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CompanyDataCompanyInterface) SetRegion(v string) {
	o.Region = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetRegionId() string {
	if o == nil || IsNil(o.RegionId) {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetRegionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *CompanyDataCompanyInterface) SetRegionId(v string) {
	o.RegionId = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *CompanyDataCompanyInterface) SetPostcode(v string) {
	o.Postcode = &v
}

// GetTelephone returns the Telephone field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetTelephone() string {
	if o == nil || IsNil(o.Telephone) {
		var ret string
		return ret
	}
	return *o.Telephone
}

// GetTelephoneOk returns a tuple with the Telephone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetTelephoneOk() (*string, bool) {
	if o == nil || IsNil(o.Telephone) {
		return nil, false
	}
	return o.Telephone, true
}

// HasTelephone returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasTelephone() bool {
	if o != nil && !IsNil(o.Telephone) {
		return true
	}

	return false
}

// SetTelephone gets a reference to the given string and assigns it to the Telephone field.
func (o *CompanyDataCompanyInterface) SetTelephone(v string) {
	o.Telephone = &v
}

// GetCustomerGroupId returns the CustomerGroupId field value
func (o *CompanyDataCompanyInterface) GetCustomerGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomerGroupId
}

// GetCustomerGroupIdOk returns a tuple with the CustomerGroupId field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetCustomerGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerGroupId, true
}

// SetCustomerGroupId sets field value
func (o *CompanyDataCompanyInterface) SetCustomerGroupId(v int32) {
	o.CustomerGroupId = v
}

// GetSalesRepresentativeId returns the SalesRepresentativeId field value
func (o *CompanyDataCompanyInterface) GetSalesRepresentativeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SalesRepresentativeId
}

// GetSalesRepresentativeIdOk returns a tuple with the SalesRepresentativeId field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetSalesRepresentativeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesRepresentativeId, true
}

// SetSalesRepresentativeId sets field value
func (o *CompanyDataCompanyInterface) SetSalesRepresentativeId(v int32) {
	o.SalesRepresentativeId = v
}

// GetRejectReason returns the RejectReason field value
func (o *CompanyDataCompanyInterface) GetRejectReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetRejectReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectReason, true
}

// SetRejectReason sets field value
func (o *CompanyDataCompanyInterface) SetRejectReason(v string) {
	o.RejectReason = v
}

// GetRejectedAt returns the RejectedAt field value
func (o *CompanyDataCompanyInterface) GetRejectedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RejectedAt
}

// GetRejectedAtOk returns a tuple with the RejectedAt field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetRejectedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectedAt, true
}

// SetRejectedAt sets field value
func (o *CompanyDataCompanyInterface) SetRejectedAt(v string) {
	o.RejectedAt = v
}

// GetSuperUserId returns the SuperUserId field value
func (o *CompanyDataCompanyInterface) GetSuperUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuperUserId
}

// GetSuperUserIdOk returns a tuple with the SuperUserId field value
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetSuperUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperUserId, true
}

// SetSuperUserId sets field value
func (o *CompanyDataCompanyInterface) SetSuperUserId(v int32) {
	o.SuperUserId = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CompanyDataCompanyInterface) GetExtensionAttributes() CompanyDataCompanyExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret CompanyDataCompanyExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataCompanyInterface) GetExtensionAttributesOk() (*CompanyDataCompanyExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CompanyDataCompanyInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given CompanyDataCompanyExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *CompanyDataCompanyInterface) SetExtensionAttributes(v CompanyDataCompanyExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o CompanyDataCompanyInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyDataCompanyInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.LegalName) {
		toSerialize["legal_name"] = o.LegalName
	}
	if !IsNil(o.CompanyEmail) {
		toSerialize["company_email"] = o.CompanyEmail
	}
	if !IsNil(o.VatTaxId) {
		toSerialize["vat_tax_id"] = o.VatTaxId
	}
	if !IsNil(o.ResellerId) {
		toSerialize["reseller_id"] = o.ResellerId
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["street"] = o.Street
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !IsNil(o.Telephone) {
		toSerialize["telephone"] = o.Telephone
	}
	toSerialize["customer_group_id"] = o.CustomerGroupId
	toSerialize["sales_representative_id"] = o.SalesRepresentativeId
	toSerialize["reject_reason"] = o.RejectReason
	toSerialize["rejected_at"] = o.RejectedAt
	toSerialize["super_user_id"] = o.SuperUserId
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyDataCompanyInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"street",
		"customer_group_id",
		"sales_representative_id",
		"reject_reason",
		"rejected_at",
		"super_user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyDataCompanyInterface := _CompanyDataCompanyInterface{}

	err = json.Unmarshal(data, &varCompanyDataCompanyInterface)

	if err != nil {
		return err
	}

	*o = CompanyDataCompanyInterface(varCompanyDataCompanyInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "company_name")
		delete(additionalProperties, "legal_name")
		delete(additionalProperties, "company_email")
		delete(additionalProperties, "vat_tax_id")
		delete(additionalProperties, "reseller_id")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "street")
		delete(additionalProperties, "city")
		delete(additionalProperties, "country_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "postcode")
		delete(additionalProperties, "telephone")
		delete(additionalProperties, "customer_group_id")
		delete(additionalProperties, "sales_representative_id")
		delete(additionalProperties, "reject_reason")
		delete(additionalProperties, "rejected_at")
		delete(additionalProperties, "super_user_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CompanyDataCompanyInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CompanyDataCompanyInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCompanyDataCompanyInterface struct {
	value *CompanyDataCompanyInterface
	isSet bool
}

func (v NullableCompanyDataCompanyInterface) Get() *CompanyDataCompanyInterface {
	return v.value
}

func (v *NullableCompanyDataCompanyInterface) Set(val *CompanyDataCompanyInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDataCompanyInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDataCompanyInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDataCompanyInterface(val *CompanyDataCompanyInterface) *NullableCompanyDataCompanyInterface {
	return &NullableCompanyDataCompanyInterface{value: val, isSet: true}
}

func (v NullableCompanyDataCompanyInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDataCompanyInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
