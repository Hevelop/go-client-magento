/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the QuoteDataCartInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteDataCartInterface{}

// QuoteDataCartInterface Interface CartInterface
type QuoteDataCartInterface struct {
	// Cart/quote ID.
	Id int32 `json:"id"`
	// Cart creation date and time. Otherwise, null.
	CreatedAt *string `json:"created_at,omitempty"`
	// Cart last update date and time. Otherwise, null.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Cart conversion date and time. Otherwise, null.
	ConvertedAt *string `json:"converted_at,omitempty"`
	// Active status flag value. Otherwise, null.
	IsActive *bool `json:"is_active,omitempty"`
	// Virtual flag value. Otherwise, null.
	IsVirtual *bool `json:"is_virtual,omitempty"`
	// Array of items. Otherwise, null.
	Items []QuoteDataCartItemInterface `json:"items,omitempty"`
	// Number of different items or products in the cart. Otherwise, null.
	ItemsCount *int32 `json:"items_count,omitempty"`
	// Total quantity of all cart items. Otherwise, null.
	ItemsQty       *float32                      `json:"items_qty,omitempty"`
	Customer       CustomerDataCustomerInterface `json:"customer"`
	BillingAddress *QuoteDataAddressInterface    `json:"billing_address,omitempty"`
	// Reserved order ID. Otherwise, null.
	ReservedOrderId *string `json:"reserved_order_id,omitempty"`
	// Original order ID. Otherwise, null.
	OrigOrderId *int32                      `json:"orig_order_id,omitempty"`
	Currency    *QuoteDataCurrencyInterface `json:"currency,omitempty"`
	// For guest customers, false for logged in customers
	CustomerIsGuest *bool `json:"customer_is_guest,omitempty"`
	// Notice text
	CustomerNote *string `json:"customer_note,omitempty"`
	// Customer notification flag
	CustomerNoteNotify *bool `json:"customer_note_notify,omitempty"`
	// Customer tax class ID.
	CustomerTaxClassId *int32 `json:"customer_tax_class_id,omitempty"`
	// Store identifier
	StoreId              int32                            `json:"store_id"`
	ExtensionAttributes  *QuoteDataCartExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuoteDataCartInterface QuoteDataCartInterface

// NewQuoteDataCartInterface instantiates a new QuoteDataCartInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteDataCartInterface(id int32, customer CustomerDataCustomerInterface, storeId int32) *QuoteDataCartInterface {
	this := QuoteDataCartInterface{}
	this.Id = id
	this.Customer = customer
	this.StoreId = storeId
	return &this
}

// NewQuoteDataCartInterfaceWithDefaults instantiates a new QuoteDataCartInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteDataCartInterfaceWithDefaults() *QuoteDataCartInterface {
	this := QuoteDataCartInterface{}
	return &this
}

// GetId returns the Id field value
func (o *QuoteDataCartInterface) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuoteDataCartInterface) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *QuoteDataCartInterface) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *QuoteDataCartInterface) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetConvertedAt returns the ConvertedAt field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetConvertedAt() string {
	if o == nil || IsNil(o.ConvertedAt) {
		var ret string
		return ret
	}
	return *o.ConvertedAt
}

// GetConvertedAtOk returns a tuple with the ConvertedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetConvertedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ConvertedAt) {
		return nil, false
	}
	return o.ConvertedAt, true
}

// HasConvertedAt returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasConvertedAt() bool {
	if o != nil && !IsNil(o.ConvertedAt) {
		return true
	}

	return false
}

// SetConvertedAt gets a reference to the given string and assigns it to the ConvertedAt field.
func (o *QuoteDataCartInterface) SetConvertedAt(v string) {
	o.ConvertedAt = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuoteDataCartInterface) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsVirtual returns the IsVirtual field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetIsVirtual() bool {
	if o == nil || IsNil(o.IsVirtual) {
		var ret bool
		return ret
	}
	return *o.IsVirtual
}

// GetIsVirtualOk returns a tuple with the IsVirtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetIsVirtualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtual) {
		return nil, false
	}
	return o.IsVirtual, true
}

// HasIsVirtual returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasIsVirtual() bool {
	if o != nil && !IsNil(o.IsVirtual) {
		return true
	}

	return false
}

// SetIsVirtual gets a reference to the given bool and assigns it to the IsVirtual field.
func (o *QuoteDataCartInterface) SetIsVirtual(v bool) {
	o.IsVirtual = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetItems() []QuoteDataCartItemInterface {
	if o == nil || IsNil(o.Items) {
		var ret []QuoteDataCartItemInterface
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetItemsOk() ([]QuoteDataCartItemInterface, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []QuoteDataCartItemInterface and assigns it to the Items field.
func (o *QuoteDataCartInterface) SetItems(v []QuoteDataCartItemInterface) {
	o.Items = v
}

// GetItemsCount returns the ItemsCount field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetItemsCount() int32 {
	if o == nil || IsNil(o.ItemsCount) {
		var ret int32
		return ret
	}
	return *o.ItemsCount
}

// GetItemsCountOk returns a tuple with the ItemsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetItemsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemsCount) {
		return nil, false
	}
	return o.ItemsCount, true
}

// HasItemsCount returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasItemsCount() bool {
	if o != nil && !IsNil(o.ItemsCount) {
		return true
	}

	return false
}

// SetItemsCount gets a reference to the given int32 and assigns it to the ItemsCount field.
func (o *QuoteDataCartInterface) SetItemsCount(v int32) {
	o.ItemsCount = &v
}

// GetItemsQty returns the ItemsQty field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetItemsQty() float32 {
	if o == nil || IsNil(o.ItemsQty) {
		var ret float32
		return ret
	}
	return *o.ItemsQty
}

// GetItemsQtyOk returns a tuple with the ItemsQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetItemsQtyOk() (*float32, bool) {
	if o == nil || IsNil(o.ItemsQty) {
		return nil, false
	}
	return o.ItemsQty, true
}

// HasItemsQty returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasItemsQty() bool {
	if o != nil && !IsNil(o.ItemsQty) {
		return true
	}

	return false
}

// SetItemsQty gets a reference to the given float32 and assigns it to the ItemsQty field.
func (o *QuoteDataCartInterface) SetItemsQty(v float32) {
	o.ItemsQty = &v
}

// GetCustomer returns the Customer field value
func (o *QuoteDataCartInterface) GetCustomer() CustomerDataCustomerInterface {
	if o == nil {
		var ret CustomerDataCustomerInterface
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCustomerOk() (*CustomerDataCustomerInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *QuoteDataCartInterface) SetCustomer(v CustomerDataCustomerInterface) {
	o.Customer = v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetBillingAddress() QuoteDataAddressInterface {
	if o == nil || IsNil(o.BillingAddress) {
		var ret QuoteDataAddressInterface
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetBillingAddressOk() (*QuoteDataAddressInterface, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given QuoteDataAddressInterface and assigns it to the BillingAddress field.
func (o *QuoteDataCartInterface) SetBillingAddress(v QuoteDataAddressInterface) {
	o.BillingAddress = &v
}

// GetReservedOrderId returns the ReservedOrderId field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetReservedOrderId() string {
	if o == nil || IsNil(o.ReservedOrderId) {
		var ret string
		return ret
	}
	return *o.ReservedOrderId
}

// GetReservedOrderIdOk returns a tuple with the ReservedOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetReservedOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedOrderId) {
		return nil, false
	}
	return o.ReservedOrderId, true
}

// HasReservedOrderId returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasReservedOrderId() bool {
	if o != nil && !IsNil(o.ReservedOrderId) {
		return true
	}

	return false
}

// SetReservedOrderId gets a reference to the given string and assigns it to the ReservedOrderId field.
func (o *QuoteDataCartInterface) SetReservedOrderId(v string) {
	o.ReservedOrderId = &v
}

// GetOrigOrderId returns the OrigOrderId field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetOrigOrderId() int32 {
	if o == nil || IsNil(o.OrigOrderId) {
		var ret int32
		return ret
	}
	return *o.OrigOrderId
}

// GetOrigOrderIdOk returns a tuple with the OrigOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetOrigOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrigOrderId) {
		return nil, false
	}
	return o.OrigOrderId, true
}

// HasOrigOrderId returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasOrigOrderId() bool {
	if o != nil && !IsNil(o.OrigOrderId) {
		return true
	}

	return false
}

// SetOrigOrderId gets a reference to the given int32 and assigns it to the OrigOrderId field.
func (o *QuoteDataCartInterface) SetOrigOrderId(v int32) {
	o.OrigOrderId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCurrency() QuoteDataCurrencyInterface {
	if o == nil || IsNil(o.Currency) {
		var ret QuoteDataCurrencyInterface
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCurrencyOk() (*QuoteDataCurrencyInterface, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given QuoteDataCurrencyInterface and assigns it to the Currency field.
func (o *QuoteDataCartInterface) SetCurrency(v QuoteDataCurrencyInterface) {
	o.Currency = &v
}

// GetCustomerIsGuest returns the CustomerIsGuest field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCustomerIsGuest() bool {
	if o == nil || IsNil(o.CustomerIsGuest) {
		var ret bool
		return ret
	}
	return *o.CustomerIsGuest
}

// GetCustomerIsGuestOk returns a tuple with the CustomerIsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCustomerIsGuestOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomerIsGuest) {
		return nil, false
	}
	return o.CustomerIsGuest, true
}

// HasCustomerIsGuest returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCustomerIsGuest() bool {
	if o != nil && !IsNil(o.CustomerIsGuest) {
		return true
	}

	return false
}

// SetCustomerIsGuest gets a reference to the given bool and assigns it to the CustomerIsGuest field.
func (o *QuoteDataCartInterface) SetCustomerIsGuest(v bool) {
	o.CustomerIsGuest = &v
}

// GetCustomerNote returns the CustomerNote field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCustomerNote() string {
	if o == nil || IsNil(o.CustomerNote) {
		var ret string
		return ret
	}
	return *o.CustomerNote
}

// GetCustomerNoteOk returns a tuple with the CustomerNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCustomerNoteOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerNote) {
		return nil, false
	}
	return o.CustomerNote, true
}

// HasCustomerNote returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCustomerNote() bool {
	if o != nil && !IsNil(o.CustomerNote) {
		return true
	}

	return false
}

// SetCustomerNote gets a reference to the given string and assigns it to the CustomerNote field.
func (o *QuoteDataCartInterface) SetCustomerNote(v string) {
	o.CustomerNote = &v
}

// GetCustomerNoteNotify returns the CustomerNoteNotify field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCustomerNoteNotify() bool {
	if o == nil || IsNil(o.CustomerNoteNotify) {
		var ret bool
		return ret
	}
	return *o.CustomerNoteNotify
}

// GetCustomerNoteNotifyOk returns a tuple with the CustomerNoteNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCustomerNoteNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomerNoteNotify) {
		return nil, false
	}
	return o.CustomerNoteNotify, true
}

// HasCustomerNoteNotify returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCustomerNoteNotify() bool {
	if o != nil && !IsNil(o.CustomerNoteNotify) {
		return true
	}

	return false
}

// SetCustomerNoteNotify gets a reference to the given bool and assigns it to the CustomerNoteNotify field.
func (o *QuoteDataCartInterface) SetCustomerNoteNotify(v bool) {
	o.CustomerNoteNotify = &v
}

// GetCustomerTaxClassId returns the CustomerTaxClassId field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetCustomerTaxClassId() int32 {
	if o == nil || IsNil(o.CustomerTaxClassId) {
		var ret int32
		return ret
	}
	return *o.CustomerTaxClassId
}

// GetCustomerTaxClassIdOk returns a tuple with the CustomerTaxClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetCustomerTaxClassIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerTaxClassId) {
		return nil, false
	}
	return o.CustomerTaxClassId, true
}

// HasCustomerTaxClassId returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasCustomerTaxClassId() bool {
	if o != nil && !IsNil(o.CustomerTaxClassId) {
		return true
	}

	return false
}

// SetCustomerTaxClassId gets a reference to the given int32 and assigns it to the CustomerTaxClassId field.
func (o *QuoteDataCartInterface) SetCustomerTaxClassId(v int32) {
	o.CustomerTaxClassId = &v
}

// GetStoreId returns the StoreId field value
func (o *QuoteDataCartInterface) GetStoreId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetStoreIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreId, true
}

// SetStoreId sets field value
func (o *QuoteDataCartInterface) SetStoreId(v int32) {
	o.StoreId = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *QuoteDataCartInterface) GetExtensionAttributes() QuoteDataCartExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret QuoteDataCartExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCartInterface) GetExtensionAttributesOk() (*QuoteDataCartExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *QuoteDataCartInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given QuoteDataCartExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *QuoteDataCartInterface) SetExtensionAttributes(v QuoteDataCartExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o QuoteDataCartInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteDataCartInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ConvertedAt) {
		toSerialize["converted_at"] = o.ConvertedAt
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsVirtual) {
		toSerialize["is_virtual"] = o.IsVirtual
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.ItemsCount) {
		toSerialize["items_count"] = o.ItemsCount
	}
	if !IsNil(o.ItemsQty) {
		toSerialize["items_qty"] = o.ItemsQty
	}
	toSerialize["customer"] = o.Customer
	if !IsNil(o.BillingAddress) {
		toSerialize["billing_address"] = o.BillingAddress
	}
	if !IsNil(o.ReservedOrderId) {
		toSerialize["reserved_order_id"] = o.ReservedOrderId
	}
	if !IsNil(o.OrigOrderId) {
		toSerialize["orig_order_id"] = o.OrigOrderId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CustomerIsGuest) {
		toSerialize["customer_is_guest"] = o.CustomerIsGuest
	}
	if !IsNil(o.CustomerNote) {
		toSerialize["customer_note"] = o.CustomerNote
	}
	if !IsNil(o.CustomerNoteNotify) {
		toSerialize["customer_note_notify"] = o.CustomerNoteNotify
	}
	if !IsNil(o.CustomerTaxClassId) {
		toSerialize["customer_tax_class_id"] = o.CustomerTaxClassId
	}
	toSerialize["store_id"] = o.StoreId
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuoteDataCartInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"customer",
		"store_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteDataCartInterface := _QuoteDataCartInterface{}

	err = json.Unmarshal(data, &varQuoteDataCartInterface)

	if err != nil {
		return err
	}

	*o = QuoteDataCartInterface(varQuoteDataCartInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "converted_at")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_virtual")
		delete(additionalProperties, "items")
		delete(additionalProperties, "items_count")
		delete(additionalProperties, "items_qty")
		delete(additionalProperties, "customer")
		delete(additionalProperties, "billing_address")
		delete(additionalProperties, "reserved_order_id")
		delete(additionalProperties, "orig_order_id")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "customer_is_guest")
		delete(additionalProperties, "customer_note")
		delete(additionalProperties, "customer_note_notify")
		delete(additionalProperties, "customer_tax_class_id")
		delete(additionalProperties, "store_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *QuoteDataCartInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *QuoteDataCartInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableQuoteDataCartInterface struct {
	value *QuoteDataCartInterface
	isSet bool
}

func (v NullableQuoteDataCartInterface) Get() *QuoteDataCartInterface {
	return v.value
}

func (v *NullableQuoteDataCartInterface) Set(val *QuoteDataCartInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteDataCartInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteDataCartInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteDataCartInterface(val *QuoteDataCartInterface) *NullableQuoteDataCartInterface {
	return &NullableQuoteDataCartInterface{value: val, isSet: true}
}

func (v NullableQuoteDataCartInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteDataCartInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
