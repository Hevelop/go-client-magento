/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the BundleDataLinkInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleDataLinkInterface{}

// BundleDataLinkInterface Interface LinkInterface
type BundleDataLinkInterface struct {
	// The identifier
	Id *string `json:"id,omitempty"`
	// Linked product sku
	Sku *string `json:"sku,omitempty"`
	// Option id
	OptionId *int32 `json:"option_id,omitempty"`
	// Qty
	Qty *float32 `json:"qty,omitempty"`
	// Position
	Position *int32 `json:"position,omitempty"`
	// Is default
	IsDefault bool `json:"is_default"`
	// Price
	Price float32 `json:"price"`
	// Price type
	PriceType int32 `json:"price_type"`
	// Whether quantity could be changed
	CanChangeQuantity *int32 `json:"can_change_quantity,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BundleDataLinkInterface BundleDataLinkInterface

// NewBundleDataLinkInterface instantiates a new BundleDataLinkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleDataLinkInterface(isDefault bool, price float32, priceType int32) *BundleDataLinkInterface {
	this := BundleDataLinkInterface{}
	this.IsDefault = isDefault
	this.Price = price
	this.PriceType = priceType
	return &this
}

// NewBundleDataLinkInterfaceWithDefaults instantiates a new BundleDataLinkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleDataLinkInterfaceWithDefaults() *BundleDataLinkInterface {
	this := BundleDataLinkInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BundleDataLinkInterface) SetId(v string) {
	o.Id = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *BundleDataLinkInterface) SetSku(v string) {
	o.Sku = &v
}

// GetOptionId returns the OptionId field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetOptionId() int32 {
	if o == nil || IsNil(o.OptionId) {
		var ret int32
		return ret
	}
	return *o.OptionId
}

// GetOptionIdOk returns a tuple with the OptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetOptionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OptionId) {
		return nil, false
	}
	return o.OptionId, true
}

// HasOptionId returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasOptionId() bool {
	if o != nil && !IsNil(o.OptionId) {
		return true
	}

	return false
}

// SetOptionId gets a reference to the given int32 and assigns it to the OptionId field.
func (o *BundleDataLinkInterface) SetOptionId(v int32) {
	o.OptionId = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetQty() float32 {
	if o == nil || IsNil(o.Qty) {
		var ret float32
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetQtyOk() (*float32, bool) {
	if o == nil || IsNil(o.Qty) {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasQty() bool {
	if o != nil && !IsNil(o.Qty) {
		return true
	}

	return false
}

// SetQty gets a reference to the given float32 and assigns it to the Qty field.
func (o *BundleDataLinkInterface) SetQty(v float32) {
	o.Qty = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *BundleDataLinkInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetIsDefault returns the IsDefault field value
func (o *BundleDataLinkInterface) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *BundleDataLinkInterface) SetIsDefault(v bool) {
	o.IsDefault = v
}

// GetPrice returns the Price field value
func (o *BundleDataLinkInterface) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *BundleDataLinkInterface) SetPrice(v float32) {
	o.Price = v
}

// GetPriceType returns the PriceType field value
func (o *BundleDataLinkInterface) GetPriceType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetPriceTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *BundleDataLinkInterface) SetPriceType(v int32) {
	o.PriceType = v
}

// GetCanChangeQuantity returns the CanChangeQuantity field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetCanChangeQuantity() int32 {
	if o == nil || IsNil(o.CanChangeQuantity) {
		var ret int32
		return ret
	}
	return *o.CanChangeQuantity
}

// GetCanChangeQuantityOk returns a tuple with the CanChangeQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetCanChangeQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.CanChangeQuantity) {
		return nil, false
	}
	return o.CanChangeQuantity, true
}

// HasCanChangeQuantity returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasCanChangeQuantity() bool {
	if o != nil && !IsNil(o.CanChangeQuantity) {
		return true
	}

	return false
}

// SetCanChangeQuantity gets a reference to the given int32 and assigns it to the CanChangeQuantity field.
func (o *BundleDataLinkInterface) SetCanChangeQuantity(v int32) {
	o.CanChangeQuantity = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *BundleDataLinkInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleDataLinkInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *BundleDataLinkInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *BundleDataLinkInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o BundleDataLinkInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleDataLinkInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.OptionId) {
		toSerialize["option_id"] = o.OptionId
	}
	if !IsNil(o.Qty) {
		toSerialize["qty"] = o.Qty
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	toSerialize["is_default"] = o.IsDefault
	toSerialize["price"] = o.Price
	toSerialize["price_type"] = o.PriceType
	if !IsNil(o.CanChangeQuantity) {
		toSerialize["can_change_quantity"] = o.CanChangeQuantity
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BundleDataLinkInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_default",
		"price",
		"price_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBundleDataLinkInterface := _BundleDataLinkInterface{}

	err = json.Unmarshal(data, &varBundleDataLinkInterface)

	if err != nil {
		return err
	}

	*o = BundleDataLinkInterface(varBundleDataLinkInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "option_id")
		delete(additionalProperties, "qty")
		delete(additionalProperties, "position")
		delete(additionalProperties, "is_default")
		delete(additionalProperties, "price")
		delete(additionalProperties, "price_type")
		delete(additionalProperties, "can_change_quantity")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *BundleDataLinkInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *BundleDataLinkInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableBundleDataLinkInterface struct {
	value *BundleDataLinkInterface
	isSet bool
}

func (v NullableBundleDataLinkInterface) Get() *BundleDataLinkInterface {
	return v.value
}

func (v *NullableBundleDataLinkInterface) Set(val *BundleDataLinkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleDataLinkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleDataLinkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleDataLinkInterface(val *BundleDataLinkInterface) *NullableBundleDataLinkInterface {
	return &NullableBundleDataLinkInterface{value: val, isSet: true}
}

func (v NullableBundleDataLinkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleDataLinkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
