/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the RmaDataCommentInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmaDataCommentInterface{}

// RmaDataCommentInterface Interface CommentInterface
type RmaDataCommentInterface struct {
	// Comment
	Comment string `json:"comment"`
	// Rma Id
	RmaEntityId int32 `json:"rma_entity_id"`
	// Created_at
	CreatedAt string `json:"created_at"`
	// Entity_id
	EntityId int32 `json:"entity_id"`
	// Is_customer_notified
	CustomerNotified bool `json:"customer_notified"`
	// Is_visible_on_front
	VisibleOnFront bool `json:"visible_on_front"`
	// Status
	Status string `json:"status"`
	// Is_admin
	Admin bool `json:"admin"`
	// ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface
	ExtensionAttributes map[string]interface{} `json:"extension_attributes,omitempty"`
	// Custom attributes values.
	CustomAttributes     []FrameworkAttributeInterface `json:"custom_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RmaDataCommentInterface RmaDataCommentInterface

// NewRmaDataCommentInterface instantiates a new RmaDataCommentInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmaDataCommentInterface(comment string, rmaEntityId int32, createdAt string, entityId int32, customerNotified bool, visibleOnFront bool, status string, admin bool) *RmaDataCommentInterface {
	this := RmaDataCommentInterface{}
	this.Comment = comment
	this.RmaEntityId = rmaEntityId
	this.CreatedAt = createdAt
	this.EntityId = entityId
	this.CustomerNotified = customerNotified
	this.VisibleOnFront = visibleOnFront
	this.Status = status
	this.Admin = admin
	return &this
}

// NewRmaDataCommentInterfaceWithDefaults instantiates a new RmaDataCommentInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmaDataCommentInterfaceWithDefaults() *RmaDataCommentInterface {
	this := RmaDataCommentInterface{}
	return &this
}

// GetComment returns the Comment field value
func (o *RmaDataCommentInterface) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *RmaDataCommentInterface) SetComment(v string) {
	o.Comment = v
}

// GetRmaEntityId returns the RmaEntityId field value
func (o *RmaDataCommentInterface) GetRmaEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RmaEntityId
}

// GetRmaEntityIdOk returns a tuple with the RmaEntityId field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetRmaEntityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RmaEntityId, true
}

// SetRmaEntityId sets field value
func (o *RmaDataCommentInterface) SetRmaEntityId(v int32) {
	o.RmaEntityId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RmaDataCommentInterface) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RmaDataCommentInterface) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetEntityId returns the EntityId field value
func (o *RmaDataCommentInterface) GetEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetEntityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *RmaDataCommentInterface) SetEntityId(v int32) {
	o.EntityId = v
}

// GetCustomerNotified returns the CustomerNotified field value
func (o *RmaDataCommentInterface) GetCustomerNotified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CustomerNotified
}

// GetCustomerNotifiedOk returns a tuple with the CustomerNotified field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetCustomerNotifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerNotified, true
}

// SetCustomerNotified sets field value
func (o *RmaDataCommentInterface) SetCustomerNotified(v bool) {
	o.CustomerNotified = v
}

// GetVisibleOnFront returns the VisibleOnFront field value
func (o *RmaDataCommentInterface) GetVisibleOnFront() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VisibleOnFront
}

// GetVisibleOnFrontOk returns a tuple with the VisibleOnFront field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetVisibleOnFrontOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisibleOnFront, true
}

// SetVisibleOnFront sets field value
func (o *RmaDataCommentInterface) SetVisibleOnFront(v bool) {
	o.VisibleOnFront = v
}

// GetStatus returns the Status field value
func (o *RmaDataCommentInterface) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RmaDataCommentInterface) SetStatus(v string) {
	o.Status = v
}

// GetAdmin returns the Admin field value
func (o *RmaDataCommentInterface) GetAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Admin
}

// GetAdminOk returns a tuple with the Admin field value
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Admin, true
}

// SetAdmin sets field value
func (o *RmaDataCommentInterface) SetAdmin(v bool) {
	o.Admin = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *RmaDataCommentInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *RmaDataCommentInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *RmaDataCommentInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *RmaDataCommentInterface) GetCustomAttributes() []FrameworkAttributeInterface {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []FrameworkAttributeInterface
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaDataCommentInterface) GetCustomAttributesOk() ([]FrameworkAttributeInterface, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *RmaDataCommentInterface) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []FrameworkAttributeInterface and assigns it to the CustomAttributes field.
func (o *RmaDataCommentInterface) SetCustomAttributes(v []FrameworkAttributeInterface) {
	o.CustomAttributes = v
}

func (o RmaDataCommentInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmaDataCommentInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["rma_entity_id"] = o.RmaEntityId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["entity_id"] = o.EntityId
	toSerialize["customer_notified"] = o.CustomerNotified
	toSerialize["visible_on_front"] = o.VisibleOnFront
	toSerialize["status"] = o.Status
	toSerialize["admin"] = o.Admin
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["custom_attributes"] = o.CustomAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RmaDataCommentInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
		"rma_entity_id",
		"created_at",
		"entity_id",
		"customer_notified",
		"visible_on_front",
		"status",
		"admin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRmaDataCommentInterface := _RmaDataCommentInterface{}

	err = json.Unmarshal(data, &varRmaDataCommentInterface)

	if err != nil {
		return err
	}

	*o = RmaDataCommentInterface(varRmaDataCommentInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "rma_entity_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "entity_id")
		delete(additionalProperties, "customer_notified")
		delete(additionalProperties, "visible_on_front")
		delete(additionalProperties, "status")
		delete(additionalProperties, "admin")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "custom_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *RmaDataCommentInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *RmaDataCommentInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableRmaDataCommentInterface struct {
	value *RmaDataCommentInterface
	isSet bool
}

func (v NullableRmaDataCommentInterface) Get() *RmaDataCommentInterface {
	return v.value
}

func (v *NullableRmaDataCommentInterface) Set(val *RmaDataCommentInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaDataCommentInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaDataCommentInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaDataCommentInterface(val *RmaDataCommentInterface) *NullableRmaDataCommentInterface {
	return &NullableRmaDataCommentInterface{value: val, isSet: true}
}

func (v NullableRmaDataCommentInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaDataCommentInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
