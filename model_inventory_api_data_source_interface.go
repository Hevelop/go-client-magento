/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the InventoryApiDataSourceInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryApiDataSourceInterface{}

// InventoryApiDataSourceInterface Represents physical storage, i.e. brick and mortar store or warehouse Used fully qualified namespaces in annotations for proper work of WebApi request parser
type InventoryApiDataSourceInterface struct {
	// Source code
	SourceCode *string `json:"source_code,omitempty"`
	// Source name
	Name *string `json:"name,omitempty"`
	// Source email
	Email *string `json:"email,omitempty"`
	// Source contact name
	ContactName *string `json:"contact_name,omitempty"`
	// If source is enabled. For new entity can be null
	Enabled *bool `json:"enabled,omitempty"`
	// Source description
	Description *string `json:"description,omitempty"`
	// Source latitude
	Latitude *float32 `json:"latitude,omitempty"`
	// Source longitude
	Longitude *float32 `json:"longitude,omitempty"`
	// Source country id
	CountryId *string `json:"country_id,omitempty"`
	// Region id if source has registered region.
	RegionId *int32 `json:"region_id,omitempty"`
	// Region title if source has custom region
	Region *string `json:"region,omitempty"`
	// Source city
	City *string `json:"city,omitempty"`
	// Source street name
	Street *string `json:"street,omitempty"`
	// Source post code
	Postcode *string `json:"postcode,omitempty"`
	// Source phone number
	Phone *string `json:"phone,omitempty"`
	// Source fax
	Fax *string `json:"fax,omitempty"`
	// Is need to use default config
	UseDefaultCarrierConfig *bool                                        `json:"use_default_carrier_config,omitempty"`
	CarrierLinks            []InventoryApiDataSourceCarrierLinkInterface `json:"carrier_links,omitempty"`
	ExtensionAttributes     *InventoryApiDataSourceExtensionInterface    `json:"extension_attributes,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _InventoryApiDataSourceInterface InventoryApiDataSourceInterface

// NewInventoryApiDataSourceInterface instantiates a new InventoryApiDataSourceInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryApiDataSourceInterface() *InventoryApiDataSourceInterface {
	this := InventoryApiDataSourceInterface{}
	return &this
}

// NewInventoryApiDataSourceInterfaceWithDefaults instantiates a new InventoryApiDataSourceInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryApiDataSourceInterfaceWithDefaults() *InventoryApiDataSourceInterface {
	this := InventoryApiDataSourceInterface{}
	return &this
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetSourceCode() string {
	if o == nil || IsNil(o.SourceCode) {
		var ret string
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetSourceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCode) {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasSourceCode() bool {
	if o != nil && !IsNil(o.SourceCode) {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given string and assigns it to the SourceCode field.
func (o *InventoryApiDataSourceInterface) SetSourceCode(v string) {
	o.SourceCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InventoryApiDataSourceInterface) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *InventoryApiDataSourceInterface) SetEmail(v string) {
	o.Email = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *InventoryApiDataSourceInterface) SetContactName(v string) {
	o.ContactName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InventoryApiDataSourceInterface) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InventoryApiDataSourceInterface) SetDescription(v string) {
	o.Description = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *InventoryApiDataSourceInterface) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *InventoryApiDataSourceInterface) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetCountryId() string {
	if o == nil || IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetCountryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *InventoryApiDataSourceInterface) SetCountryId(v string) {
	o.CountryId = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *InventoryApiDataSourceInterface) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *InventoryApiDataSourceInterface) SetRegion(v string) {
	o.Region = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *InventoryApiDataSourceInterface) SetCity(v string) {
	o.City = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *InventoryApiDataSourceInterface) SetStreet(v string) {
	o.Street = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *InventoryApiDataSourceInterface) SetPostcode(v string) {
	o.Postcode = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *InventoryApiDataSourceInterface) SetPhone(v string) {
	o.Phone = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetFax() string {
	if o == nil || IsNil(o.Fax) {
		var ret string
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetFaxOk() (*string, bool) {
	if o == nil || IsNil(o.Fax) {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasFax() bool {
	if o != nil && !IsNil(o.Fax) {
		return true
	}

	return false
}

// SetFax gets a reference to the given string and assigns it to the Fax field.
func (o *InventoryApiDataSourceInterface) SetFax(v string) {
	o.Fax = &v
}

// GetUseDefaultCarrierConfig returns the UseDefaultCarrierConfig field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetUseDefaultCarrierConfig() bool {
	if o == nil || IsNil(o.UseDefaultCarrierConfig) {
		var ret bool
		return ret
	}
	return *o.UseDefaultCarrierConfig
}

// GetUseDefaultCarrierConfigOk returns a tuple with the UseDefaultCarrierConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetUseDefaultCarrierConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultCarrierConfig) {
		return nil, false
	}
	return o.UseDefaultCarrierConfig, true
}

// HasUseDefaultCarrierConfig returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasUseDefaultCarrierConfig() bool {
	if o != nil && !IsNil(o.UseDefaultCarrierConfig) {
		return true
	}

	return false
}

// SetUseDefaultCarrierConfig gets a reference to the given bool and assigns it to the UseDefaultCarrierConfig field.
func (o *InventoryApiDataSourceInterface) SetUseDefaultCarrierConfig(v bool) {
	o.UseDefaultCarrierConfig = &v
}

// GetCarrierLinks returns the CarrierLinks field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetCarrierLinks() []InventoryApiDataSourceCarrierLinkInterface {
	if o == nil || IsNil(o.CarrierLinks) {
		var ret []InventoryApiDataSourceCarrierLinkInterface
		return ret
	}
	return o.CarrierLinks
}

// GetCarrierLinksOk returns a tuple with the CarrierLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetCarrierLinksOk() ([]InventoryApiDataSourceCarrierLinkInterface, bool) {
	if o == nil || IsNil(o.CarrierLinks) {
		return nil, false
	}
	return o.CarrierLinks, true
}

// HasCarrierLinks returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasCarrierLinks() bool {
	if o != nil && !IsNil(o.CarrierLinks) {
		return true
	}

	return false
}

// SetCarrierLinks gets a reference to the given []InventoryApiDataSourceCarrierLinkInterface and assigns it to the CarrierLinks field.
func (o *InventoryApiDataSourceInterface) SetCarrierLinks(v []InventoryApiDataSourceCarrierLinkInterface) {
	o.CarrierLinks = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *InventoryApiDataSourceInterface) GetExtensionAttributes() InventoryApiDataSourceExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret InventoryApiDataSourceExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataSourceInterface) GetExtensionAttributesOk() (*InventoryApiDataSourceExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *InventoryApiDataSourceInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given InventoryApiDataSourceExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *InventoryApiDataSourceInterface) SetExtensionAttributes(v InventoryApiDataSourceExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o InventoryApiDataSourceInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryApiDataSourceInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceCode) {
		toSerialize["source_code"] = o.SourceCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ContactName) {
		toSerialize["contact_name"] = o.ContactName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Fax) {
		toSerialize["fax"] = o.Fax
	}
	if !IsNil(o.UseDefaultCarrierConfig) {
		toSerialize["use_default_carrier_config"] = o.UseDefaultCarrierConfig
	}
	if !IsNil(o.CarrierLinks) {
		toSerialize["carrier_links"] = o.CarrierLinks
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventoryApiDataSourceInterface) UnmarshalJSON(data []byte) (err error) {
	varInventoryApiDataSourceInterface := _InventoryApiDataSourceInterface{}

	err = json.Unmarshal(data, &varInventoryApiDataSourceInterface)

	if err != nil {
		return err
	}

	*o = InventoryApiDataSourceInterface(varInventoryApiDataSourceInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source_code")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "contact_name")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "description")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		delete(additionalProperties, "country_id")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "city")
		delete(additionalProperties, "street")
		delete(additionalProperties, "postcode")
		delete(additionalProperties, "phone")
		delete(additionalProperties, "fax")
		delete(additionalProperties, "use_default_carrier_config")
		delete(additionalProperties, "carrier_links")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *InventoryApiDataSourceInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *InventoryApiDataSourceInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableInventoryApiDataSourceInterface struct {
	value *InventoryApiDataSourceInterface
	isSet bool
}

func (v NullableInventoryApiDataSourceInterface) Get() *InventoryApiDataSourceInterface {
	return v.value
}

func (v *NullableInventoryApiDataSourceInterface) Set(val *InventoryApiDataSourceInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryApiDataSourceInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryApiDataSourceInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryApiDataSourceInterface(val *InventoryApiDataSourceInterface) *NullableInventoryApiDataSourceInterface {
	return &NullableInventoryApiDataSourceInterface{value: val, isSet: true}
}

func (v NullableInventoryApiDataSourceInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryApiDataSourceInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
