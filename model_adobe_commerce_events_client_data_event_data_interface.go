/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the AdobeCommerceEventsClientDataEventDataInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdobeCommerceEventsClientDataEventDataInterface{}

// AdobeCommerceEventsClientDataEventDataInterface Interface for event data from webapi requests
type AdobeCommerceEventsClientDataEventDataInterface struct {
	// Event name
	Name string `json:"name"`
	// Event parent name
	Parent string `json:"parent"`
	// Event fields
	Fields []AdobeCommerceEventsClientDataEventFieldInterface `json:"fields"`
	// Event fields
	Rules []AdobeCommerceEventsClientDataEventRuleInterface `json:"rules"`
	// Event destination
	Destination string `json:"destination"`
	// Event priority
	Priority             bool `json:"priority"`
	AdditionalProperties map[string]interface{}
}

type _AdobeCommerceEventsClientDataEventDataInterface AdobeCommerceEventsClientDataEventDataInterface

// NewAdobeCommerceEventsClientDataEventDataInterface instantiates a new AdobeCommerceEventsClientDataEventDataInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdobeCommerceEventsClientDataEventDataInterface(name string, parent string, fields []AdobeCommerceEventsClientDataEventFieldInterface, rules []AdobeCommerceEventsClientDataEventRuleInterface, destination string, priority bool) *AdobeCommerceEventsClientDataEventDataInterface {
	this := AdobeCommerceEventsClientDataEventDataInterface{}
	this.Name = name
	this.Parent = parent
	this.Fields = fields
	this.Rules = rules
	this.Destination = destination
	this.Priority = priority
	return &this
}

// NewAdobeCommerceEventsClientDataEventDataInterfaceWithDefaults instantiates a new AdobeCommerceEventsClientDataEventDataInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdobeCommerceEventsClientDataEventDataInterfaceWithDefaults() *AdobeCommerceEventsClientDataEventDataInterface {
	this := AdobeCommerceEventsClientDataEventDataInterface{}
	return &this
}

// GetName returns the Name field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetParent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetParent(v string) {
	o.Parent = v
}

// GetFields returns the Fields field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetFields() []AdobeCommerceEventsClientDataEventFieldInterface {
	if o == nil {
		var ret []AdobeCommerceEventsClientDataEventFieldInterface
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetFieldsOk() ([]AdobeCommerceEventsClientDataEventFieldInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetFields(v []AdobeCommerceEventsClientDataEventFieldInterface) {
	o.Fields = v
}

// GetRules returns the Rules field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetRules() []AdobeCommerceEventsClientDataEventRuleInterface {
	if o == nil {
		var ret []AdobeCommerceEventsClientDataEventRuleInterface
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetRulesOk() ([]AdobeCommerceEventsClientDataEventRuleInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetRules(v []AdobeCommerceEventsClientDataEventRuleInterface) {
	o.Rules = v
}

// GetDestination returns the Destination field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetDestination(v string) {
	o.Destination = v
}

// GetPriority returns the Priority field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetPriority() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetPriorityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetPriority(v bool) {
	o.Priority = v
}

func (o AdobeCommerceEventsClientDataEventDataInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdobeCommerceEventsClientDataEventDataInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["parent"] = o.Parent
	toSerialize["fields"] = o.Fields
	toSerialize["rules"] = o.Rules
	toSerialize["destination"] = o.Destination
	toSerialize["priority"] = o.Priority

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdobeCommerceEventsClientDataEventDataInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"parent",
		"fields",
		"rules",
		"destination",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdobeCommerceEventsClientDataEventDataInterface := _AdobeCommerceEventsClientDataEventDataInterface{}

	err = json.Unmarshal(data, &varAdobeCommerceEventsClientDataEventDataInterface)

	if err != nil {
		return err
	}

	*o = AdobeCommerceEventsClientDataEventDataInterface(varAdobeCommerceEventsClientDataEventDataInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "priority")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *AdobeCommerceEventsClientDataEventDataInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *AdobeCommerceEventsClientDataEventDataInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableAdobeCommerceEventsClientDataEventDataInterface struct {
	value *AdobeCommerceEventsClientDataEventDataInterface
	isSet bool
}

func (v NullableAdobeCommerceEventsClientDataEventDataInterface) Get() *AdobeCommerceEventsClientDataEventDataInterface {
	return v.value
}

func (v *NullableAdobeCommerceEventsClientDataEventDataInterface) Set(val *AdobeCommerceEventsClientDataEventDataInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableAdobeCommerceEventsClientDataEventDataInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableAdobeCommerceEventsClientDataEventDataInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdobeCommerceEventsClientDataEventDataInterface(val *AdobeCommerceEventsClientDataEventDataInterface) *NullableAdobeCommerceEventsClientDataEventDataInterface {
	return &NullableAdobeCommerceEventsClientDataEventDataInterface{value: val, isSet: true}
}

func (v NullableAdobeCommerceEventsClientDataEventDataInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdobeCommerceEventsClientDataEventDataInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
