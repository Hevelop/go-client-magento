/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the FrameworkFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworkFilter{}

// FrameworkFilter Filter which can be used by any methods from service layer.
type FrameworkFilter struct {
	// Field
	Field string `json:"field"`
	// Value
	Value string `json:"value"`
	// Condition type
	ConditionType        *string `json:"condition_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FrameworkFilter FrameworkFilter

// NewFrameworkFilter instantiates a new FrameworkFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworkFilter(field string, value string) *FrameworkFilter {
	this := FrameworkFilter{}
	this.Field = field
	this.Value = value
	return &this
}

// NewFrameworkFilterWithDefaults instantiates a new FrameworkFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworkFilterWithDefaults() *FrameworkFilter {
	this := FrameworkFilter{}
	return &this
}

// GetField returns the Field field value
func (o *FrameworkFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *FrameworkFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *FrameworkFilter) SetField(v string) {
	o.Field = v
}

// GetValue returns the Value field value
func (o *FrameworkFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *FrameworkFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *FrameworkFilter) SetValue(v string) {
	o.Value = v
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *FrameworkFilter) GetConditionType() string {
	if o == nil || IsNil(o.ConditionType) {
		var ret string
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameworkFilter) GetConditionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *FrameworkFilter) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given string and assigns it to the ConditionType field.
func (o *FrameworkFilter) SetConditionType(v string) {
	o.ConditionType = &v
}

func (o FrameworkFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworkFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["value"] = o.Value
	if !IsNil(o.ConditionType) {
		toSerialize["condition_type"] = o.ConditionType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FrameworkFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFrameworkFilter := _FrameworkFilter{}

	err = json.Unmarshal(data, &varFrameworkFilter)

	if err != nil {
		return err
	}

	*o = FrameworkFilter(varFrameworkFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "field")
		delete(additionalProperties, "value")
		delete(additionalProperties, "condition_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *FrameworkFilter) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *FrameworkFilter) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableFrameworkFilter struct {
	value *FrameworkFilter
	isSet bool
}

func (v NullableFrameworkFilter) Get() *FrameworkFilter {
	return v.value
}

func (v *NullableFrameworkFilter) Set(val *FrameworkFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworkFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworkFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworkFilter(val *FrameworkFilter) *NullableFrameworkFilter {
	return &NullableFrameworkFilter{value: val, isSet: true}
}

func (v NullableFrameworkFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworkFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
