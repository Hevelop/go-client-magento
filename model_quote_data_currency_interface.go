/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the QuoteDataCurrencyInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteDataCurrencyInterface{}

// QuoteDataCurrencyInterface Interface CurrencyInterface
type QuoteDataCurrencyInterface struct {
	// Global currency code
	GlobalCurrencyCode *string `json:"global_currency_code,omitempty"`
	// Base currency code
	BaseCurrencyCode *string `json:"base_currency_code,omitempty"`
	// Store currency code
	StoreCurrencyCode *string `json:"store_currency_code,omitempty"`
	// Quote currency code
	QuoteCurrencyCode *string `json:"quote_currency_code,omitempty"`
	// Store currency to base currency rate
	StoreToBaseRate *float32 `json:"store_to_base_rate,omitempty"`
	// Store currency to quote currency rate
	StoreToQuoteRate *float32 `json:"store_to_quote_rate,omitempty"`
	// Base currency to global currency rate
	BaseToGlobalRate *float32 `json:"base_to_global_rate,omitempty"`
	// Base currency to quote currency rate
	BaseToQuoteRate *float32 `json:"base_to_quote_rate,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuoteDataCurrencyInterface QuoteDataCurrencyInterface

// NewQuoteDataCurrencyInterface instantiates a new QuoteDataCurrencyInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteDataCurrencyInterface() *QuoteDataCurrencyInterface {
	this := QuoteDataCurrencyInterface{}
	return &this
}

// NewQuoteDataCurrencyInterfaceWithDefaults instantiates a new QuoteDataCurrencyInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteDataCurrencyInterfaceWithDefaults() *QuoteDataCurrencyInterface {
	this := QuoteDataCurrencyInterface{}
	return &this
}

// GetGlobalCurrencyCode returns the GlobalCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetGlobalCurrencyCode() string {
	if o == nil || IsNil(o.GlobalCurrencyCode) {
		var ret string
		return ret
	}
	return *o.GlobalCurrencyCode
}

// GetGlobalCurrencyCodeOk returns a tuple with the GlobalCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetGlobalCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalCurrencyCode) {
		return nil, false
	}
	return o.GlobalCurrencyCode, true
}

// HasGlobalCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasGlobalCurrencyCode() bool {
	if o != nil && !IsNil(o.GlobalCurrencyCode) {
		return true
	}

	return false
}

// SetGlobalCurrencyCode gets a reference to the given string and assigns it to the GlobalCurrencyCode field.
func (o *QuoteDataCurrencyInterface) SetGlobalCurrencyCode(v string) {
	o.GlobalCurrencyCode = &v
}

// GetBaseCurrencyCode returns the BaseCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetBaseCurrencyCode() string {
	if o == nil || IsNil(o.BaseCurrencyCode) {
		var ret string
		return ret
	}
	return *o.BaseCurrencyCode
}

// GetBaseCurrencyCodeOk returns a tuple with the BaseCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetBaseCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseCurrencyCode) {
		return nil, false
	}
	return o.BaseCurrencyCode, true
}

// HasBaseCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasBaseCurrencyCode() bool {
	if o != nil && !IsNil(o.BaseCurrencyCode) {
		return true
	}

	return false
}

// SetBaseCurrencyCode gets a reference to the given string and assigns it to the BaseCurrencyCode field.
func (o *QuoteDataCurrencyInterface) SetBaseCurrencyCode(v string) {
	o.BaseCurrencyCode = &v
}

// GetStoreCurrencyCode returns the StoreCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetStoreCurrencyCode() string {
	if o == nil || IsNil(o.StoreCurrencyCode) {
		var ret string
		return ret
	}
	return *o.StoreCurrencyCode
}

// GetStoreCurrencyCodeOk returns a tuple with the StoreCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetStoreCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StoreCurrencyCode) {
		return nil, false
	}
	return o.StoreCurrencyCode, true
}

// HasStoreCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasStoreCurrencyCode() bool {
	if o != nil && !IsNil(o.StoreCurrencyCode) {
		return true
	}

	return false
}

// SetStoreCurrencyCode gets a reference to the given string and assigns it to the StoreCurrencyCode field.
func (o *QuoteDataCurrencyInterface) SetStoreCurrencyCode(v string) {
	o.StoreCurrencyCode = &v
}

// GetQuoteCurrencyCode returns the QuoteCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetQuoteCurrencyCode() string {
	if o == nil || IsNil(o.QuoteCurrencyCode) {
		var ret string
		return ret
	}
	return *o.QuoteCurrencyCode
}

// GetQuoteCurrencyCodeOk returns a tuple with the QuoteCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetQuoteCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCurrencyCode) {
		return nil, false
	}
	return o.QuoteCurrencyCode, true
}

// HasQuoteCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasQuoteCurrencyCode() bool {
	if o != nil && !IsNil(o.QuoteCurrencyCode) {
		return true
	}

	return false
}

// SetQuoteCurrencyCode gets a reference to the given string and assigns it to the QuoteCurrencyCode field.
func (o *QuoteDataCurrencyInterface) SetQuoteCurrencyCode(v string) {
	o.QuoteCurrencyCode = &v
}

// GetStoreToBaseRate returns the StoreToBaseRate field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetStoreToBaseRate() float32 {
	if o == nil || IsNil(o.StoreToBaseRate) {
		var ret float32
		return ret
	}
	return *o.StoreToBaseRate
}

// GetStoreToBaseRateOk returns a tuple with the StoreToBaseRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetStoreToBaseRateOk() (*float32, bool) {
	if o == nil || IsNil(o.StoreToBaseRate) {
		return nil, false
	}
	return o.StoreToBaseRate, true
}

// HasStoreToBaseRate returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasStoreToBaseRate() bool {
	if o != nil && !IsNil(o.StoreToBaseRate) {
		return true
	}

	return false
}

// SetStoreToBaseRate gets a reference to the given float32 and assigns it to the StoreToBaseRate field.
func (o *QuoteDataCurrencyInterface) SetStoreToBaseRate(v float32) {
	o.StoreToBaseRate = &v
}

// GetStoreToQuoteRate returns the StoreToQuoteRate field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetStoreToQuoteRate() float32 {
	if o == nil || IsNil(o.StoreToQuoteRate) {
		var ret float32
		return ret
	}
	return *o.StoreToQuoteRate
}

// GetStoreToQuoteRateOk returns a tuple with the StoreToQuoteRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetStoreToQuoteRateOk() (*float32, bool) {
	if o == nil || IsNil(o.StoreToQuoteRate) {
		return nil, false
	}
	return o.StoreToQuoteRate, true
}

// HasStoreToQuoteRate returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasStoreToQuoteRate() bool {
	if o != nil && !IsNil(o.StoreToQuoteRate) {
		return true
	}

	return false
}

// SetStoreToQuoteRate gets a reference to the given float32 and assigns it to the StoreToQuoteRate field.
func (o *QuoteDataCurrencyInterface) SetStoreToQuoteRate(v float32) {
	o.StoreToQuoteRate = &v
}

// GetBaseToGlobalRate returns the BaseToGlobalRate field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetBaseToGlobalRate() float32 {
	if o == nil || IsNil(o.BaseToGlobalRate) {
		var ret float32
		return ret
	}
	return *o.BaseToGlobalRate
}

// GetBaseToGlobalRateOk returns a tuple with the BaseToGlobalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetBaseToGlobalRateOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseToGlobalRate) {
		return nil, false
	}
	return o.BaseToGlobalRate, true
}

// HasBaseToGlobalRate returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasBaseToGlobalRate() bool {
	if o != nil && !IsNil(o.BaseToGlobalRate) {
		return true
	}

	return false
}

// SetBaseToGlobalRate gets a reference to the given float32 and assigns it to the BaseToGlobalRate field.
func (o *QuoteDataCurrencyInterface) SetBaseToGlobalRate(v float32) {
	o.BaseToGlobalRate = &v
}

// GetBaseToQuoteRate returns the BaseToQuoteRate field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetBaseToQuoteRate() float32 {
	if o == nil || IsNil(o.BaseToQuoteRate) {
		var ret float32
		return ret
	}
	return *o.BaseToQuoteRate
}

// GetBaseToQuoteRateOk returns a tuple with the BaseToQuoteRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetBaseToQuoteRateOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseToQuoteRate) {
		return nil, false
	}
	return o.BaseToQuoteRate, true
}

// HasBaseToQuoteRate returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasBaseToQuoteRate() bool {
	if o != nil && !IsNil(o.BaseToQuoteRate) {
		return true
	}

	return false
}

// SetBaseToQuoteRate gets a reference to the given float32 and assigns it to the BaseToQuoteRate field.
func (o *QuoteDataCurrencyInterface) SetBaseToQuoteRate(v float32) {
	o.BaseToQuoteRate = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *QuoteDataCurrencyInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataCurrencyInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *QuoteDataCurrencyInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *QuoteDataCurrencyInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o QuoteDataCurrencyInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteDataCurrencyInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalCurrencyCode) {
		toSerialize["global_currency_code"] = o.GlobalCurrencyCode
	}
	if !IsNil(o.BaseCurrencyCode) {
		toSerialize["base_currency_code"] = o.BaseCurrencyCode
	}
	if !IsNil(o.StoreCurrencyCode) {
		toSerialize["store_currency_code"] = o.StoreCurrencyCode
	}
	if !IsNil(o.QuoteCurrencyCode) {
		toSerialize["quote_currency_code"] = o.QuoteCurrencyCode
	}
	if !IsNil(o.StoreToBaseRate) {
		toSerialize["store_to_base_rate"] = o.StoreToBaseRate
	}
	if !IsNil(o.StoreToQuoteRate) {
		toSerialize["store_to_quote_rate"] = o.StoreToQuoteRate
	}
	if !IsNil(o.BaseToGlobalRate) {
		toSerialize["base_to_global_rate"] = o.BaseToGlobalRate
	}
	if !IsNil(o.BaseToQuoteRate) {
		toSerialize["base_to_quote_rate"] = o.BaseToQuoteRate
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuoteDataCurrencyInterface) UnmarshalJSON(data []byte) (err error) {
	varQuoteDataCurrencyInterface := _QuoteDataCurrencyInterface{}

	err = json.Unmarshal(data, &varQuoteDataCurrencyInterface)

	if err != nil {
		return err
	}

	*o = QuoteDataCurrencyInterface(varQuoteDataCurrencyInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "global_currency_code")
		delete(additionalProperties, "base_currency_code")
		delete(additionalProperties, "store_currency_code")
		delete(additionalProperties, "quote_currency_code")
		delete(additionalProperties, "store_to_base_rate")
		delete(additionalProperties, "store_to_quote_rate")
		delete(additionalProperties, "base_to_global_rate")
		delete(additionalProperties, "base_to_quote_rate")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *QuoteDataCurrencyInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *QuoteDataCurrencyInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableQuoteDataCurrencyInterface struct {
	value *QuoteDataCurrencyInterface
	isSet bool
}

func (v NullableQuoteDataCurrencyInterface) Get() *QuoteDataCurrencyInterface {
	return v.value
}

func (v *NullableQuoteDataCurrencyInterface) Set(val *QuoteDataCurrencyInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteDataCurrencyInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteDataCurrencyInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteDataCurrencyInterface(val *QuoteDataCurrencyInterface) *NullableQuoteDataCurrencyInterface {
	return &NullableQuoteDataCurrencyInterface{value: val, isSet: true}
}

func (v NullableQuoteDataCurrencyInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteDataCurrencyInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
