/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the NegotiableQuoteDataCommentAttachmentInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegotiableQuoteDataCommentAttachmentInterface{}

// NegotiableQuoteDataCommentAttachmentInterface Interface for quote comment attachment.
type NegotiableQuoteDataCommentAttachmentInterface struct {
	// Attachment ID.
	AttachmentId int32 `json:"attachment_id"`
	// Comment ID.
	CommentId int32 `json:"comment_id"`
	// File name.
	FileName string `json:"file_name"`
	// File path.
	FilePath string `json:"file_path"`
	// File type.
	FileType string `json:"file_type"`
	// ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentAttachmentInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NegotiableQuoteDataCommentAttachmentInterface NegotiableQuoteDataCommentAttachmentInterface

// NewNegotiableQuoteDataCommentAttachmentInterface instantiates a new NegotiableQuoteDataCommentAttachmentInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiableQuoteDataCommentAttachmentInterface(attachmentId int32, commentId int32, fileName string, filePath string, fileType string) *NegotiableQuoteDataCommentAttachmentInterface {
	this := NegotiableQuoteDataCommentAttachmentInterface{}
	this.AttachmentId = attachmentId
	this.CommentId = commentId
	this.FileName = fileName
	this.FilePath = filePath
	this.FileType = fileType
	return &this
}

// NewNegotiableQuoteDataCommentAttachmentInterfaceWithDefaults instantiates a new NegotiableQuoteDataCommentAttachmentInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiableQuoteDataCommentAttachmentInterfaceWithDefaults() *NegotiableQuoteDataCommentAttachmentInterface {
	this := NegotiableQuoteDataCommentAttachmentInterface{}
	return &this
}

// GetAttachmentId returns the AttachmentId field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetAttachmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttachmentId
}

// GetAttachmentIdOk returns a tuple with the AttachmentId field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetAttachmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttachmentId, true
}

// SetAttachmentId sets field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetAttachmentId(v int32) {
	o.AttachmentId = v
}

// GetCommentId returns the CommentId field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetCommentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetCommentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentId, true
}

// SetCommentId sets field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetCommentId(v int32) {
	o.CommentId = v
}

// GetFileName returns the FileName field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetFileName(v string) {
	o.FileName = v
}

// GetFilePath returns the FilePath field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetFilePath(v string) {
	o.FilePath = v
}

// GetFileType returns the FileType field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetFileType(v string) {
	o.FileType = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *NegotiableQuoteDataCommentAttachmentInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o NegotiableQuoteDataCommentAttachmentInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegotiableQuoteDataCommentAttachmentInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attachment_id"] = o.AttachmentId
	toSerialize["comment_id"] = o.CommentId
	toSerialize["file_name"] = o.FileName
	toSerialize["file_path"] = o.FilePath
	toSerialize["file_type"] = o.FileType
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NegotiableQuoteDataCommentAttachmentInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attachment_id",
		"comment_id",
		"file_name",
		"file_path",
		"file_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNegotiableQuoteDataCommentAttachmentInterface := _NegotiableQuoteDataCommentAttachmentInterface{}

	err = json.Unmarshal(data, &varNegotiableQuoteDataCommentAttachmentInterface)

	if err != nil {
		return err
	}

	*o = NegotiableQuoteDataCommentAttachmentInterface(varNegotiableQuoteDataCommentAttachmentInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attachment_id")
		delete(additionalProperties, "comment_id")
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "file_path")
		delete(additionalProperties, "file_type")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *NegotiableQuoteDataCommentAttachmentInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *NegotiableQuoteDataCommentAttachmentInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableNegotiableQuoteDataCommentAttachmentInterface struct {
	value *NegotiableQuoteDataCommentAttachmentInterface
	isSet bool
}

func (v NullableNegotiableQuoteDataCommentAttachmentInterface) Get() *NegotiableQuoteDataCommentAttachmentInterface {
	return v.value
}

func (v *NullableNegotiableQuoteDataCommentAttachmentInterface) Set(val *NegotiableQuoteDataCommentAttachmentInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiableQuoteDataCommentAttachmentInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiableQuoteDataCommentAttachmentInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiableQuoteDataCommentAttachmentInterface(val *NegotiableQuoteDataCommentAttachmentInterface) *NullableNegotiableQuoteDataCommentAttachmentInterface {
	return &NullableNegotiableQuoteDataCommentAttachmentInterface{value: val, isSet: true}
}

func (v NullableNegotiableQuoteDataCommentAttachmentInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiableQuoteDataCommentAttachmentInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
