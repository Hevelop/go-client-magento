/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataCategoryLinkInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataCategoryLinkInterface{}

// CatalogDataCategoryLinkInterface
type CatalogDataCategoryLinkInterface struct {
	Position *int32 `json:"position,omitempty"`
	// Category id
	CategoryId string `json:"category_id"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryLinkInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataCategoryLinkInterface CatalogDataCategoryLinkInterface

// NewCatalogDataCategoryLinkInterface instantiates a new CatalogDataCategoryLinkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataCategoryLinkInterface(categoryId string) *CatalogDataCategoryLinkInterface {
	this := CatalogDataCategoryLinkInterface{}
	this.CategoryId = categoryId
	return &this
}

// NewCatalogDataCategoryLinkInterfaceWithDefaults instantiates a new CatalogDataCategoryLinkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataCategoryLinkInterfaceWithDefaults() *CatalogDataCategoryLinkInterface {
	this := CatalogDataCategoryLinkInterface{}
	return &this
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CatalogDataCategoryLinkInterface) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryLinkInterface) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CatalogDataCategoryLinkInterface) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *CatalogDataCategoryLinkInterface) SetPosition(v int32) {
	o.Position = &v
}

// GetCategoryId returns the CategoryId field value
func (o *CatalogDataCategoryLinkInterface) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryLinkInterface) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *CatalogDataCategoryLinkInterface) SetCategoryId(v string) {
	o.CategoryId = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataCategoryLinkInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataCategoryLinkInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataCategoryLinkInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataCategoryLinkInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogDataCategoryLinkInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataCategoryLinkInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	toSerialize["category_id"] = o.CategoryId
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataCategoryLinkInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataCategoryLinkInterface := _CatalogDataCategoryLinkInterface{}

	err = json.Unmarshal(data, &varCatalogDataCategoryLinkInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataCategoryLinkInterface(varCatalogDataCategoryLinkInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "position")
		delete(additionalProperties, "category_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataCategoryLinkInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataCategoryLinkInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataCategoryLinkInterface struct {
	value *CatalogDataCategoryLinkInterface
	isSet bool
}

func (v NullableCatalogDataCategoryLinkInterface) Get() *CatalogDataCategoryLinkInterface {
	return v.value
}

func (v *NullableCatalogDataCategoryLinkInterface) Set(val *CatalogDataCategoryLinkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataCategoryLinkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataCategoryLinkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataCategoryLinkInterface(val *CatalogDataCategoryLinkInterface) *NullableCatalogDataCategoryLinkInterface {
	return &NullableCatalogDataCategoryLinkInterface{value: val, isSet: true}
}

func (v NullableCatalogDataCategoryLinkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataCategoryLinkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
