/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the TwoFactorAuthProviderInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TwoFactorAuthProviderInterface{}

// TwoFactorAuthProviderInterface 2FA provider interface
type TwoFactorAuthProviderInterface struct {
	// True if this provider has been enabled by admin
	Enabled bool                         `json:"enabled"`
	Engine  TwoFactorAuthEngineInterface `json:"engine"`
	// Provider code
	Code string `json:"code"`
	// Provider name
	Name string `json:"name"`
	// Icon
	Icon string `json:"icon"`
	// True if this provider configuration can be reset
	ResetAllowed bool `json:"reset_allowed"`
	// Configure action
	ConfigureAction string `json:"configure_action"`
	// Auth action
	AuthAction string `json:"auth_action"`
	// Allowed extra actions
	ExtraActions         []string `json:"extra_actions"`
	AdditionalProperties map[string]interface{}
}

type _TwoFactorAuthProviderInterface TwoFactorAuthProviderInterface

// NewTwoFactorAuthProviderInterface instantiates a new TwoFactorAuthProviderInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTwoFactorAuthProviderInterface(enabled bool, engine TwoFactorAuthEngineInterface, code string, name string, icon string, resetAllowed bool, configureAction string, authAction string, extraActions []string) *TwoFactorAuthProviderInterface {
	this := TwoFactorAuthProviderInterface{}
	this.Enabled = enabled
	this.Engine = engine
	this.Code = code
	this.Name = name
	this.Icon = icon
	this.ResetAllowed = resetAllowed
	this.ConfigureAction = configureAction
	this.AuthAction = authAction
	this.ExtraActions = extraActions
	return &this
}

// NewTwoFactorAuthProviderInterfaceWithDefaults instantiates a new TwoFactorAuthProviderInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTwoFactorAuthProviderInterfaceWithDefaults() *TwoFactorAuthProviderInterface {
	this := TwoFactorAuthProviderInterface{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *TwoFactorAuthProviderInterface) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TwoFactorAuthProviderInterface) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEngine returns the Engine field value
func (o *TwoFactorAuthProviderInterface) GetEngine() TwoFactorAuthEngineInterface {
	if o == nil {
		var ret TwoFactorAuthEngineInterface
		return ret
	}

	return o.Engine
}

// GetEngineOk returns a tuple with the Engine field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetEngineOk() (*TwoFactorAuthEngineInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Engine, true
}

// SetEngine sets field value
func (o *TwoFactorAuthProviderInterface) SetEngine(v TwoFactorAuthEngineInterface) {
	o.Engine = v
}

// GetCode returns the Code field value
func (o *TwoFactorAuthProviderInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TwoFactorAuthProviderInterface) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *TwoFactorAuthProviderInterface) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TwoFactorAuthProviderInterface) SetName(v string) {
	o.Name = v
}

// GetIcon returns the Icon field value
func (o *TwoFactorAuthProviderInterface) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *TwoFactorAuthProviderInterface) SetIcon(v string) {
	o.Icon = v
}

// GetResetAllowed returns the ResetAllowed field value
func (o *TwoFactorAuthProviderInterface) GetResetAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ResetAllowed
}

// GetResetAllowedOk returns a tuple with the ResetAllowed field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetResetAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResetAllowed, true
}

// SetResetAllowed sets field value
func (o *TwoFactorAuthProviderInterface) SetResetAllowed(v bool) {
	o.ResetAllowed = v
}

// GetConfigureAction returns the ConfigureAction field value
func (o *TwoFactorAuthProviderInterface) GetConfigureAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigureAction
}

// GetConfigureActionOk returns a tuple with the ConfigureAction field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetConfigureActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigureAction, true
}

// SetConfigureAction sets field value
func (o *TwoFactorAuthProviderInterface) SetConfigureAction(v string) {
	o.ConfigureAction = v
}

// GetAuthAction returns the AuthAction field value
func (o *TwoFactorAuthProviderInterface) GetAuthAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthAction
}

// GetAuthActionOk returns a tuple with the AuthAction field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetAuthActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthAction, true
}

// SetAuthAction sets field value
func (o *TwoFactorAuthProviderInterface) SetAuthAction(v string) {
	o.AuthAction = v
}

// GetExtraActions returns the ExtraActions field value
func (o *TwoFactorAuthProviderInterface) GetExtraActions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExtraActions
}

// GetExtraActionsOk returns a tuple with the ExtraActions field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthProviderInterface) GetExtraActionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraActions, true
}

// SetExtraActions sets field value
func (o *TwoFactorAuthProviderInterface) SetExtraActions(v []string) {
	o.ExtraActions = v
}

func (o TwoFactorAuthProviderInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TwoFactorAuthProviderInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["engine"] = o.Engine
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	toSerialize["icon"] = o.Icon
	toSerialize["reset_allowed"] = o.ResetAllowed
	toSerialize["configure_action"] = o.ConfigureAction
	toSerialize["auth_action"] = o.AuthAction
	toSerialize["extra_actions"] = o.ExtraActions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TwoFactorAuthProviderInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"engine",
		"code",
		"name",
		"icon",
		"reset_allowed",
		"configure_action",
		"auth_action",
		"extra_actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTwoFactorAuthProviderInterface := _TwoFactorAuthProviderInterface{}

	err = json.Unmarshal(data, &varTwoFactorAuthProviderInterface)

	if err != nil {
		return err
	}

	*o = TwoFactorAuthProviderInterface(varTwoFactorAuthProviderInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "engine")
		delete(additionalProperties, "code")
		delete(additionalProperties, "name")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "reset_allowed")
		delete(additionalProperties, "configure_action")
		delete(additionalProperties, "auth_action")
		delete(additionalProperties, "extra_actions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *TwoFactorAuthProviderInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *TwoFactorAuthProviderInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableTwoFactorAuthProviderInterface struct {
	value *TwoFactorAuthProviderInterface
	isSet bool
}

func (v NullableTwoFactorAuthProviderInterface) Get() *TwoFactorAuthProviderInterface {
	return v.value
}

func (v *NullableTwoFactorAuthProviderInterface) Set(val *TwoFactorAuthProviderInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoFactorAuthProviderInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoFactorAuthProviderInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoFactorAuthProviderInterface(val *TwoFactorAuthProviderInterface) *NullableTwoFactorAuthProviderInterface {
	return &NullableTwoFactorAuthProviderInterface{value: val, isSet: true}
}

func (v NullableTwoFactorAuthProviderInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoFactorAuthProviderInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
