/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the PostV1EventingEventSubscribeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostV1EventingEventSubscribeRequest{}

// PostV1EventingEventSubscribeRequest struct for PostV1EventingEventSubscribeRequest
type PostV1EventingEventSubscribeRequest struct {
	Event                AdobeCommerceEventsClientDataEventDataInterface `json:"event"`
	Force                *bool                                           `json:"force,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PostV1EventingEventSubscribeRequest PostV1EventingEventSubscribeRequest

// NewPostV1EventingEventSubscribeRequest instantiates a new PostV1EventingEventSubscribeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostV1EventingEventSubscribeRequest(event AdobeCommerceEventsClientDataEventDataInterface) *PostV1EventingEventSubscribeRequest {
	this := PostV1EventingEventSubscribeRequest{}
	this.Event = event
	return &this
}

// NewPostV1EventingEventSubscribeRequestWithDefaults instantiates a new PostV1EventingEventSubscribeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostV1EventingEventSubscribeRequestWithDefaults() *PostV1EventingEventSubscribeRequest {
	this := PostV1EventingEventSubscribeRequest{}
	return &this
}

// GetEvent returns the Event field value
func (o *PostV1EventingEventSubscribeRequest) GetEvent() AdobeCommerceEventsClientDataEventDataInterface {
	if o == nil {
		var ret AdobeCommerceEventsClientDataEventDataInterface
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *PostV1EventingEventSubscribeRequest) GetEventOk() (*AdobeCommerceEventsClientDataEventDataInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *PostV1EventingEventSubscribeRequest) SetEvent(v AdobeCommerceEventsClientDataEventDataInterface) {
	o.Event = v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *PostV1EventingEventSubscribeRequest) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostV1EventingEventSubscribeRequest) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *PostV1EventingEventSubscribeRequest) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *PostV1EventingEventSubscribeRequest) SetForce(v bool) {
	o.Force = &v
}

func (o PostV1EventingEventSubscribeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostV1EventingEventSubscribeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostV1EventingEventSubscribeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostV1EventingEventSubscribeRequest := _PostV1EventingEventSubscribeRequest{}

	err = json.Unmarshal(data, &varPostV1EventingEventSubscribeRequest)

	if err != nil {
		return err
	}

	*o = PostV1EventingEventSubscribeRequest(varPostV1EventingEventSubscribeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event")
		delete(additionalProperties, "force")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PostV1EventingEventSubscribeRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *PostV1EventingEventSubscribeRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullablePostV1EventingEventSubscribeRequest struct {
	value *PostV1EventingEventSubscribeRequest
	isSet bool
}

func (v NullablePostV1EventingEventSubscribeRequest) Get() *PostV1EventingEventSubscribeRequest {
	return v.value
}

func (v *NullablePostV1EventingEventSubscribeRequest) Set(val *PostV1EventingEventSubscribeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostV1EventingEventSubscribeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostV1EventingEventSubscribeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostV1EventingEventSubscribeRequest(val *PostV1EventingEventSubscribeRequest) *NullablePostV1EventingEventSubscribeRequest {
	return &NullablePostV1EventingEventSubscribeRequest{value: val, isSet: true}
}

func (v NullablePostV1EventingEventSubscribeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostV1EventingEventSubscribeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
