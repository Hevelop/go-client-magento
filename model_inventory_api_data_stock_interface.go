/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the InventoryApiDataStockInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryApiDataStockInterface{}

// InventoryApiDataStockInterface Represents product aggregation among some different physical storages (in technical words, it is an index) Used fully qualified namespaces in annotations for proper work of WebApi request parser
type InventoryApiDataStockInterface struct {
	// Stock id
	StockId *int32 `json:"stock_id,omitempty"`
	// Stock name
	Name                 *string                                  `json:"name,omitempty"`
	ExtensionAttributes  *InventoryApiDataStockExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InventoryApiDataStockInterface InventoryApiDataStockInterface

// NewInventoryApiDataStockInterface instantiates a new InventoryApiDataStockInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryApiDataStockInterface() *InventoryApiDataStockInterface {
	this := InventoryApiDataStockInterface{}
	return &this
}

// NewInventoryApiDataStockInterfaceWithDefaults instantiates a new InventoryApiDataStockInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryApiDataStockInterfaceWithDefaults() *InventoryApiDataStockInterface {
	this := InventoryApiDataStockInterface{}
	return &this
}

// GetStockId returns the StockId field value if set, zero value otherwise.
func (o *InventoryApiDataStockInterface) GetStockId() int32 {
	if o == nil || IsNil(o.StockId) {
		var ret int32
		return ret
	}
	return *o.StockId
}

// GetStockIdOk returns a tuple with the StockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataStockInterface) GetStockIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StockId) {
		return nil, false
	}
	return o.StockId, true
}

// HasStockId returns a boolean if a field has been set.
func (o *InventoryApiDataStockInterface) HasStockId() bool {
	if o != nil && !IsNil(o.StockId) {
		return true
	}

	return false
}

// SetStockId gets a reference to the given int32 and assigns it to the StockId field.
func (o *InventoryApiDataStockInterface) SetStockId(v int32) {
	o.StockId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InventoryApiDataStockInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataStockInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InventoryApiDataStockInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InventoryApiDataStockInterface) SetName(v string) {
	o.Name = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *InventoryApiDataStockInterface) GetExtensionAttributes() InventoryApiDataStockExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret InventoryApiDataStockExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryApiDataStockInterface) GetExtensionAttributesOk() (*InventoryApiDataStockExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *InventoryApiDataStockInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given InventoryApiDataStockExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *InventoryApiDataStockInterface) SetExtensionAttributes(v InventoryApiDataStockExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o InventoryApiDataStockInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryApiDataStockInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StockId) {
		toSerialize["stock_id"] = o.StockId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventoryApiDataStockInterface) UnmarshalJSON(data []byte) (err error) {
	varInventoryApiDataStockInterface := _InventoryApiDataStockInterface{}

	err = json.Unmarshal(data, &varInventoryApiDataStockInterface)

	if err != nil {
		return err
	}

	*o = InventoryApiDataStockInterface(varInventoryApiDataStockInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stock_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *InventoryApiDataStockInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *InventoryApiDataStockInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableInventoryApiDataStockInterface struct {
	value *InventoryApiDataStockInterface
	isSet bool
}

func (v NullableInventoryApiDataStockInterface) Get() *InventoryApiDataStockInterface {
	return v.value
}

func (v *NullableInventoryApiDataStockInterface) Set(val *InventoryApiDataStockInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryApiDataStockInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryApiDataStockInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryApiDataStockInterface(val *InventoryApiDataStockInterface) *NullableInventoryApiDataStockInterface {
	return &NullableInventoryApiDataStockInterface{value: val, isSet: true}
}

func (v NullableInventoryApiDataStockInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryApiDataStockInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
