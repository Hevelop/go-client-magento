/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the InventorySourceSelectionApiDataAddressInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventorySourceSelectionApiDataAddressInterface{}

// InventorySourceSelectionApiDataAddressInterface Data interface for shipping source or shipping destination
type InventorySourceSelectionApiDataAddressInterface struct {
	// Shipping country
	Country string `json:"country"`
	// Shipping postcode
	Postcode string `json:"postcode"`
	// Shipping street address
	Street string `json:"street"`
	// Shipping region
	Region string `json:"region"`
	// Shipping city
	City                 string `json:"city"`
	AdditionalProperties map[string]interface{}
}

type _InventorySourceSelectionApiDataAddressInterface InventorySourceSelectionApiDataAddressInterface

// NewInventorySourceSelectionApiDataAddressInterface instantiates a new InventorySourceSelectionApiDataAddressInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventorySourceSelectionApiDataAddressInterface(country string, postcode string, street string, region string, city string) *InventorySourceSelectionApiDataAddressInterface {
	this := InventorySourceSelectionApiDataAddressInterface{}
	this.Country = country
	this.Postcode = postcode
	this.Street = street
	this.Region = region
	this.City = city
	return &this
}

// NewInventorySourceSelectionApiDataAddressInterfaceWithDefaults instantiates a new InventorySourceSelectionApiDataAddressInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventorySourceSelectionApiDataAddressInterfaceWithDefaults() *InventorySourceSelectionApiDataAddressInterface {
	this := InventorySourceSelectionApiDataAddressInterface{}
	return &this
}

// GetCountry returns the Country field value
func (o *InventorySourceSelectionApiDataAddressInterface) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *InventorySourceSelectionApiDataAddressInterface) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *InventorySourceSelectionApiDataAddressInterface) SetCountry(v string) {
	o.Country = v
}

// GetPostcode returns the Postcode field value
func (o *InventorySourceSelectionApiDataAddressInterface) GetPostcode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value
// and a boolean to check if the value has been set.
func (o *InventorySourceSelectionApiDataAddressInterface) GetPostcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Postcode, true
}

// SetPostcode sets field value
func (o *InventorySourceSelectionApiDataAddressInterface) SetPostcode(v string) {
	o.Postcode = v
}

// GetStreet returns the Street field value
func (o *InventorySourceSelectionApiDataAddressInterface) GetStreet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *InventorySourceSelectionApiDataAddressInterface) GetStreetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *InventorySourceSelectionApiDataAddressInterface) SetStreet(v string) {
	o.Street = v
}

// GetRegion returns the Region field value
func (o *InventorySourceSelectionApiDataAddressInterface) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InventorySourceSelectionApiDataAddressInterface) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InventorySourceSelectionApiDataAddressInterface) SetRegion(v string) {
	o.Region = v
}

// GetCity returns the City field value
func (o *InventorySourceSelectionApiDataAddressInterface) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *InventorySourceSelectionApiDataAddressInterface) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *InventorySourceSelectionApiDataAddressInterface) SetCity(v string) {
	o.City = v
}

func (o InventorySourceSelectionApiDataAddressInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventorySourceSelectionApiDataAddressInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	toSerialize["postcode"] = o.Postcode
	toSerialize["street"] = o.Street
	toSerialize["region"] = o.Region
	toSerialize["city"] = o.City

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventorySourceSelectionApiDataAddressInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country",
		"postcode",
		"street",
		"region",
		"city",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventorySourceSelectionApiDataAddressInterface := _InventorySourceSelectionApiDataAddressInterface{}

	err = json.Unmarshal(data, &varInventorySourceSelectionApiDataAddressInterface)

	if err != nil {
		return err
	}

	*o = InventorySourceSelectionApiDataAddressInterface(varInventorySourceSelectionApiDataAddressInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "country")
		delete(additionalProperties, "postcode")
		delete(additionalProperties, "street")
		delete(additionalProperties, "region")
		delete(additionalProperties, "city")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *InventorySourceSelectionApiDataAddressInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *InventorySourceSelectionApiDataAddressInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableInventorySourceSelectionApiDataAddressInterface struct {
	value *InventorySourceSelectionApiDataAddressInterface
	isSet bool
}

func (v NullableInventorySourceSelectionApiDataAddressInterface) Get() *InventorySourceSelectionApiDataAddressInterface {
	return v.value
}

func (v *NullableInventorySourceSelectionApiDataAddressInterface) Set(val *InventorySourceSelectionApiDataAddressInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableInventorySourceSelectionApiDataAddressInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInventorySourceSelectionApiDataAddressInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventorySourceSelectionApiDataAddressInterface(val *InventorySourceSelectionApiDataAddressInterface) *NullableInventorySourceSelectionApiDataAddressInterface {
	return &NullableInventorySourceSelectionApiDataAddressInterface{value: val, isSet: true}
}

func (v NullableInventorySourceSelectionApiDataAddressInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventorySourceSelectionApiDataAddressInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
