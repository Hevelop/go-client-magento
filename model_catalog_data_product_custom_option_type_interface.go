/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataProductCustomOptionTypeInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductCustomOptionTypeInterface{}

// CatalogDataProductCustomOptionTypeInterface
type CatalogDataProductCustomOptionTypeInterface struct {
	// Option type label
	Label string `json:"label"`
	// Option type code
	Code string `json:"code"`
	// Option type group
	Group string `json:"group"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataProductCustomOptionTypeInterface CatalogDataProductCustomOptionTypeInterface

// NewCatalogDataProductCustomOptionTypeInterface instantiates a new CatalogDataProductCustomOptionTypeInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductCustomOptionTypeInterface(label string, code string, group string) *CatalogDataProductCustomOptionTypeInterface {
	this := CatalogDataProductCustomOptionTypeInterface{}
	this.Label = label
	this.Code = code
	this.Group = group
	return &this
}

// NewCatalogDataProductCustomOptionTypeInterfaceWithDefaults instantiates a new CatalogDataProductCustomOptionTypeInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductCustomOptionTypeInterfaceWithDefaults() *CatalogDataProductCustomOptionTypeInterface {
	this := CatalogDataProductCustomOptionTypeInterface{}
	return &this
}

// GetLabel returns the Label field value
func (o *CatalogDataProductCustomOptionTypeInterface) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionTypeInterface) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CatalogDataProductCustomOptionTypeInterface) SetLabel(v string) {
	o.Label = v
}

// GetCode returns the Code field value
func (o *CatalogDataProductCustomOptionTypeInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionTypeInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CatalogDataProductCustomOptionTypeInterface) SetCode(v string) {
	o.Code = v
}

// GetGroup returns the Group field value
func (o *CatalogDataProductCustomOptionTypeInterface) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionTypeInterface) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *CatalogDataProductCustomOptionTypeInterface) SetGroup(v string) {
	o.Group = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataProductCustomOptionTypeInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductCustomOptionTypeInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataProductCustomOptionTypeInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataProductCustomOptionTypeInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogDataProductCustomOptionTypeInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductCustomOptionTypeInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["code"] = o.Code
	toSerialize["group"] = o.Group
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductCustomOptionTypeInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"code",
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataProductCustomOptionTypeInterface := _CatalogDataProductCustomOptionTypeInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductCustomOptionTypeInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductCustomOptionTypeInterface(varCatalogDataProductCustomOptionTypeInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "code")
		delete(additionalProperties, "group")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductCustomOptionTypeInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductCustomOptionTypeInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductCustomOptionTypeInterface struct {
	value *CatalogDataProductCustomOptionTypeInterface
	isSet bool
}

func (v NullableCatalogDataProductCustomOptionTypeInterface) Get() *CatalogDataProductCustomOptionTypeInterface {
	return v.value
}

func (v *NullableCatalogDataProductCustomOptionTypeInterface) Set(val *CatalogDataProductCustomOptionTypeInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductCustomOptionTypeInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductCustomOptionTypeInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductCustomOptionTypeInterface(val *CatalogDataProductCustomOptionTypeInterface) *NullableCatalogDataProductCustomOptionTypeInterface {
	return &NullableCatalogDataProductCustomOptionTypeInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductCustomOptionTypeInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductCustomOptionTypeInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
