/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the FrameworkDataVideoContentInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameworkDataVideoContentInterface{}

// FrameworkDataVideoContentInterface Video Content data interface
type FrameworkDataVideoContentInterface struct {
	// MIME type
	MediaType string `json:"media_type"`
	// Provider
	VideoProvider string `json:"video_provider"`
	// Video URL
	VideoUrl string `json:"video_url"`
	// Title
	VideoTitle string `json:"video_title"`
	// Video Description
	VideoDescription string `json:"video_description"`
	// Metadata
	VideoMetadata        string `json:"video_metadata"`
	AdditionalProperties map[string]interface{}
}

type _FrameworkDataVideoContentInterface FrameworkDataVideoContentInterface

// NewFrameworkDataVideoContentInterface instantiates a new FrameworkDataVideoContentInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameworkDataVideoContentInterface(mediaType string, videoProvider string, videoUrl string, videoTitle string, videoDescription string, videoMetadata string) *FrameworkDataVideoContentInterface {
	this := FrameworkDataVideoContentInterface{}
	this.MediaType = mediaType
	this.VideoProvider = videoProvider
	this.VideoUrl = videoUrl
	this.VideoTitle = videoTitle
	this.VideoDescription = videoDescription
	this.VideoMetadata = videoMetadata
	return &this
}

// NewFrameworkDataVideoContentInterfaceWithDefaults instantiates a new FrameworkDataVideoContentInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameworkDataVideoContentInterfaceWithDefaults() *FrameworkDataVideoContentInterface {
	this := FrameworkDataVideoContentInterface{}
	return &this
}

// GetMediaType returns the MediaType field value
func (o *FrameworkDataVideoContentInterface) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *FrameworkDataVideoContentInterface) SetMediaType(v string) {
	o.MediaType = v
}

// GetVideoProvider returns the VideoProvider field value
func (o *FrameworkDataVideoContentInterface) GetVideoProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoProvider
}

// GetVideoProviderOk returns a tuple with the VideoProvider field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetVideoProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoProvider, true
}

// SetVideoProvider sets field value
func (o *FrameworkDataVideoContentInterface) SetVideoProvider(v string) {
	o.VideoProvider = v
}

// GetVideoUrl returns the VideoUrl field value
func (o *FrameworkDataVideoContentInterface) GetVideoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoUrl
}

// GetVideoUrlOk returns a tuple with the VideoUrl field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetVideoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoUrl, true
}

// SetVideoUrl sets field value
func (o *FrameworkDataVideoContentInterface) SetVideoUrl(v string) {
	o.VideoUrl = v
}

// GetVideoTitle returns the VideoTitle field value
func (o *FrameworkDataVideoContentInterface) GetVideoTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoTitle
}

// GetVideoTitleOk returns a tuple with the VideoTitle field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetVideoTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoTitle, true
}

// SetVideoTitle sets field value
func (o *FrameworkDataVideoContentInterface) SetVideoTitle(v string) {
	o.VideoTitle = v
}

// GetVideoDescription returns the VideoDescription field value
func (o *FrameworkDataVideoContentInterface) GetVideoDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoDescription
}

// GetVideoDescriptionOk returns a tuple with the VideoDescription field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetVideoDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoDescription, true
}

// SetVideoDescription sets field value
func (o *FrameworkDataVideoContentInterface) SetVideoDescription(v string) {
	o.VideoDescription = v
}

// GetVideoMetadata returns the VideoMetadata field value
func (o *FrameworkDataVideoContentInterface) GetVideoMetadata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoMetadata
}

// GetVideoMetadataOk returns a tuple with the VideoMetadata field value
// and a boolean to check if the value has been set.
func (o *FrameworkDataVideoContentInterface) GetVideoMetadataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoMetadata, true
}

// SetVideoMetadata sets field value
func (o *FrameworkDataVideoContentInterface) SetVideoMetadata(v string) {
	o.VideoMetadata = v
}

func (o FrameworkDataVideoContentInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameworkDataVideoContentInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["media_type"] = o.MediaType
	toSerialize["video_provider"] = o.VideoProvider
	toSerialize["video_url"] = o.VideoUrl
	toSerialize["video_title"] = o.VideoTitle
	toSerialize["video_description"] = o.VideoDescription
	toSerialize["video_metadata"] = o.VideoMetadata

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FrameworkDataVideoContentInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"media_type",
		"video_provider",
		"video_url",
		"video_title",
		"video_description",
		"video_metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFrameworkDataVideoContentInterface := _FrameworkDataVideoContentInterface{}

	err = json.Unmarshal(data, &varFrameworkDataVideoContentInterface)

	if err != nil {
		return err
	}

	*o = FrameworkDataVideoContentInterface(varFrameworkDataVideoContentInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "media_type")
		delete(additionalProperties, "video_provider")
		delete(additionalProperties, "video_url")
		delete(additionalProperties, "video_title")
		delete(additionalProperties, "video_description")
		delete(additionalProperties, "video_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *FrameworkDataVideoContentInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *FrameworkDataVideoContentInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableFrameworkDataVideoContentInterface struct {
	value *FrameworkDataVideoContentInterface
	isSet bool
}

func (v NullableFrameworkDataVideoContentInterface) Get() *FrameworkDataVideoContentInterface {
	return v.value
}

func (v *NullableFrameworkDataVideoContentInterface) Set(val *FrameworkDataVideoContentInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameworkDataVideoContentInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameworkDataVideoContentInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameworkDataVideoContentInterface(val *FrameworkDataVideoContentInterface) *NullableFrameworkDataVideoContentInterface {
	return &NullableFrameworkDataVideoContentInterface{value: val, isSet: true}
}

func (v NullableFrameworkDataVideoContentInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameworkDataVideoContentInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
