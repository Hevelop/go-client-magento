/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the ImportCsvApiDataLocalizedSourceDataInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCsvApiDataLocalizedSourceDataInterface{}

// ImportCsvApiDataLocalizedSourceDataInterface {@inheritdoc} Adds locale field in source data
type ImportCsvApiDataLocalizedSourceDataInterface struct {
	// Import content locale
	Locale *string `json:"locale,omitempty"`
	// Entity
	Entity string `json:"entity"`
	// Behavior
	Behavior string `json:"behavior"`
	// Validation Strategy
	ValidationStrategy string `json:"validation_strategy"`
	// Allowed Error Count
	AllowedErrorCount string `json:"allowed_error_count"`
	// CSV data as string
	CsvData string `json:"csv_data"`
	// Import's Field Separator for CSV
	ImportFieldSeparator *string `json:"import_field_separator,omitempty"`
	// Import's Multiple Value Field Separator for CSV
	ImportMultipleValueSeparator *string `json:"import_multiple_value_separator,omitempty"`
	// Import's Empty Attribute Value Constant
	ImportEmptyAttributeValueConstant *string `json:"import_empty_attribute_value_constant,omitempty"`
	// Import's Images File Directory
	ImportImagesFileDir  *string `json:"import_images_file_dir,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImportCsvApiDataLocalizedSourceDataInterface ImportCsvApiDataLocalizedSourceDataInterface

// NewImportCsvApiDataLocalizedSourceDataInterface instantiates a new ImportCsvApiDataLocalizedSourceDataInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCsvApiDataLocalizedSourceDataInterface(entity string, behavior string, validationStrategy string, allowedErrorCount string, csvData string) *ImportCsvApiDataLocalizedSourceDataInterface {
	this := ImportCsvApiDataLocalizedSourceDataInterface{}
	this.Entity = entity
	this.Behavior = behavior
	this.ValidationStrategy = validationStrategy
	this.AllowedErrorCount = allowedErrorCount
	this.CsvData = csvData
	return &this
}

// NewImportCsvApiDataLocalizedSourceDataInterfaceWithDefaults instantiates a new ImportCsvApiDataLocalizedSourceDataInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCsvApiDataLocalizedSourceDataInterfaceWithDefaults() *ImportCsvApiDataLocalizedSourceDataInterface {
	this := ImportCsvApiDataLocalizedSourceDataInterface{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetLocale(v string) {
	o.Locale = &v
}

// GetEntity returns the Entity field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetEntity(v string) {
	o.Entity = v
}

// GetBehavior returns the Behavior field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Behavior, true
}

// SetBehavior sets field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetBehavior(v string) {
	o.Behavior = v
}

// GetValidationStrategy returns the ValidationStrategy field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetValidationStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidationStrategy
}

// GetValidationStrategyOk returns a tuple with the ValidationStrategy field value
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetValidationStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationStrategy, true
}

// SetValidationStrategy sets field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetValidationStrategy(v string) {
	o.ValidationStrategy = v
}

// GetAllowedErrorCount returns the AllowedErrorCount field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetAllowedErrorCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllowedErrorCount
}

// GetAllowedErrorCountOk returns a tuple with the AllowedErrorCount field value
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetAllowedErrorCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowedErrorCount, true
}

// SetAllowedErrorCount sets field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetAllowedErrorCount(v string) {
	o.AllowedErrorCount = v
}

// GetCsvData returns the CsvData field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetCsvData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CsvData
}

// GetCsvDataOk returns a tuple with the CsvData field value
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetCsvDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CsvData, true
}

// SetCsvData sets field value
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetCsvData(v string) {
	o.CsvData = v
}

// GetImportFieldSeparator returns the ImportFieldSeparator field value if set, zero value otherwise.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportFieldSeparator() string {
	if o == nil || IsNil(o.ImportFieldSeparator) {
		var ret string
		return ret
	}
	return *o.ImportFieldSeparator
}

// GetImportFieldSeparatorOk returns a tuple with the ImportFieldSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportFieldSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ImportFieldSeparator) {
		return nil, false
	}
	return o.ImportFieldSeparator, true
}

// HasImportFieldSeparator returns a boolean if a field has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) HasImportFieldSeparator() bool {
	if o != nil && !IsNil(o.ImportFieldSeparator) {
		return true
	}

	return false
}

// SetImportFieldSeparator gets a reference to the given string and assigns it to the ImportFieldSeparator field.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetImportFieldSeparator(v string) {
	o.ImportFieldSeparator = &v
}

// GetImportMultipleValueSeparator returns the ImportMultipleValueSeparator field value if set, zero value otherwise.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportMultipleValueSeparator() string {
	if o == nil || IsNil(o.ImportMultipleValueSeparator) {
		var ret string
		return ret
	}
	return *o.ImportMultipleValueSeparator
}

// GetImportMultipleValueSeparatorOk returns a tuple with the ImportMultipleValueSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportMultipleValueSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ImportMultipleValueSeparator) {
		return nil, false
	}
	return o.ImportMultipleValueSeparator, true
}

// HasImportMultipleValueSeparator returns a boolean if a field has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) HasImportMultipleValueSeparator() bool {
	if o != nil && !IsNil(o.ImportMultipleValueSeparator) {
		return true
	}

	return false
}

// SetImportMultipleValueSeparator gets a reference to the given string and assigns it to the ImportMultipleValueSeparator field.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetImportMultipleValueSeparator(v string) {
	o.ImportMultipleValueSeparator = &v
}

// GetImportEmptyAttributeValueConstant returns the ImportEmptyAttributeValueConstant field value if set, zero value otherwise.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportEmptyAttributeValueConstant() string {
	if o == nil || IsNil(o.ImportEmptyAttributeValueConstant) {
		var ret string
		return ret
	}
	return *o.ImportEmptyAttributeValueConstant
}

// GetImportEmptyAttributeValueConstantOk returns a tuple with the ImportEmptyAttributeValueConstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportEmptyAttributeValueConstantOk() (*string, bool) {
	if o == nil || IsNil(o.ImportEmptyAttributeValueConstant) {
		return nil, false
	}
	return o.ImportEmptyAttributeValueConstant, true
}

// HasImportEmptyAttributeValueConstant returns a boolean if a field has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) HasImportEmptyAttributeValueConstant() bool {
	if o != nil && !IsNil(o.ImportEmptyAttributeValueConstant) {
		return true
	}

	return false
}

// SetImportEmptyAttributeValueConstant gets a reference to the given string and assigns it to the ImportEmptyAttributeValueConstant field.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetImportEmptyAttributeValueConstant(v string) {
	o.ImportEmptyAttributeValueConstant = &v
}

// GetImportImagesFileDir returns the ImportImagesFileDir field value if set, zero value otherwise.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportImagesFileDir() string {
	if o == nil || IsNil(o.ImportImagesFileDir) {
		var ret string
		return ret
	}
	return *o.ImportImagesFileDir
}

// GetImportImagesFileDirOk returns a tuple with the ImportImagesFileDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetImportImagesFileDirOk() (*string, bool) {
	if o == nil || IsNil(o.ImportImagesFileDir) {
		return nil, false
	}
	return o.ImportImagesFileDir, true
}

// HasImportImagesFileDir returns a boolean if a field has been set.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) HasImportImagesFileDir() bool {
	if o != nil && !IsNil(o.ImportImagesFileDir) {
		return true
	}

	return false
}

// SetImportImagesFileDir gets a reference to the given string and assigns it to the ImportImagesFileDir field.
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetImportImagesFileDir(v string) {
	o.ImportImagesFileDir = &v
}

func (o ImportCsvApiDataLocalizedSourceDataInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCsvApiDataLocalizedSourceDataInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	toSerialize["entity"] = o.Entity
	toSerialize["behavior"] = o.Behavior
	toSerialize["validation_strategy"] = o.ValidationStrategy
	toSerialize["allowed_error_count"] = o.AllowedErrorCount
	toSerialize["csv_data"] = o.CsvData
	if !IsNil(o.ImportFieldSeparator) {
		toSerialize["import_field_separator"] = o.ImportFieldSeparator
	}
	if !IsNil(o.ImportMultipleValueSeparator) {
		toSerialize["import_multiple_value_separator"] = o.ImportMultipleValueSeparator
	}
	if !IsNil(o.ImportEmptyAttributeValueConstant) {
		toSerialize["import_empty_attribute_value_constant"] = o.ImportEmptyAttributeValueConstant
	}
	if !IsNil(o.ImportImagesFileDir) {
		toSerialize["import_images_file_dir"] = o.ImportImagesFileDir
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportCsvApiDataLocalizedSourceDataInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entity",
		"behavior",
		"validation_strategy",
		"allowed_error_count",
		"csv_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportCsvApiDataLocalizedSourceDataInterface := _ImportCsvApiDataLocalizedSourceDataInterface{}

	err = json.Unmarshal(data, &varImportCsvApiDataLocalizedSourceDataInterface)

	if err != nil {
		return err
	}

	*o = ImportCsvApiDataLocalizedSourceDataInterface(varImportCsvApiDataLocalizedSourceDataInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "entity")
		delete(additionalProperties, "behavior")
		delete(additionalProperties, "validation_strategy")
		delete(additionalProperties, "allowed_error_count")
		delete(additionalProperties, "csv_data")
		delete(additionalProperties, "import_field_separator")
		delete(additionalProperties, "import_multiple_value_separator")
		delete(additionalProperties, "import_empty_attribute_value_constant")
		delete(additionalProperties, "import_images_file_dir")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ImportCsvApiDataLocalizedSourceDataInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ImportCsvApiDataLocalizedSourceDataInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableImportCsvApiDataLocalizedSourceDataInterface struct {
	value *ImportCsvApiDataLocalizedSourceDataInterface
	isSet bool
}

func (v NullableImportCsvApiDataLocalizedSourceDataInterface) Get() *ImportCsvApiDataLocalizedSourceDataInterface {
	return v.value
}

func (v *NullableImportCsvApiDataLocalizedSourceDataInterface) Set(val *ImportCsvApiDataLocalizedSourceDataInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCsvApiDataLocalizedSourceDataInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCsvApiDataLocalizedSourceDataInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCsvApiDataLocalizedSourceDataInterface(val *ImportCsvApiDataLocalizedSourceDataInterface) *NullableImportCsvApiDataLocalizedSourceDataInterface {
	return &NullableImportCsvApiDataLocalizedSourceDataInterface{value: val, isSet: true}
}

func (v NullableImportCsvApiDataLocalizedSourceDataInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCsvApiDataLocalizedSourceDataInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
