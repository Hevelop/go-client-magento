/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxDataOrderTaxInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxDataOrderTaxInterface{}

// TaxDataOrderTaxInterface
type TaxDataOrderTaxInterface struct {
	// Tax ID
	TaxId *int32 `json:"tax_id,omitempty"`
	// Order ID
	OrderId *int32 `json:"order_id,omitempty"`
	// Code
	Code *string `json:"code,omitempty"`
	// Title
	Title *string `json:"title,omitempty"`
	// Percent
	Percent float32 `json:"percent"`
	// Amount
	Amount float32 `json:"amount"`
	// Tax amount in base currency
	BaseAmount float32 `json:"base_amount"`
	// Real tax amount in base currency
	BaseRealAmount float32 `json:"base_real_amount"`
	// Priority
	Priority int32 `json:"priority"`
	// Position
	Position int32 `json:"position"`
	// Process
	Process int32 `json:"process"`
	// ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaxDataOrderTaxInterface TaxDataOrderTaxInterface

// NewTaxDataOrderTaxInterface instantiates a new TaxDataOrderTaxInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxDataOrderTaxInterface(percent float32, amount float32, baseAmount float32, baseRealAmount float32, priority int32, position int32, process int32) *TaxDataOrderTaxInterface {
	this := TaxDataOrderTaxInterface{}
	this.Percent = percent
	this.Amount = amount
	this.BaseAmount = baseAmount
	this.BaseRealAmount = baseRealAmount
	this.Priority = priority
	this.Position = position
	this.Process = process
	return &this
}

// NewTaxDataOrderTaxInterfaceWithDefaults instantiates a new TaxDataOrderTaxInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxDataOrderTaxInterfaceWithDefaults() *TaxDataOrderTaxInterface {
	this := TaxDataOrderTaxInterface{}
	return &this
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *TaxDataOrderTaxInterface) GetTaxId() int32 {
	if o == nil || IsNil(o.TaxId) {
		var ret int32
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetTaxIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxId) {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *TaxDataOrderTaxInterface) HasTaxId() bool {
	if o != nil && !IsNil(o.TaxId) {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given int32 and assigns it to the TaxId field.
func (o *TaxDataOrderTaxInterface) SetTaxId(v int32) {
	o.TaxId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *TaxDataOrderTaxInterface) GetOrderId() int32 {
	if o == nil || IsNil(o.OrderId) {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *TaxDataOrderTaxInterface) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *TaxDataOrderTaxInterface) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TaxDataOrderTaxInterface) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TaxDataOrderTaxInterface) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TaxDataOrderTaxInterface) SetCode(v string) {
	o.Code = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TaxDataOrderTaxInterface) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TaxDataOrderTaxInterface) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TaxDataOrderTaxInterface) SetTitle(v string) {
	o.Title = &v
}

// GetPercent returns the Percent field value
func (o *TaxDataOrderTaxInterface) GetPercent() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percent
}

// GetPercentOk returns a tuple with the Percent field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percent, true
}

// SetPercent sets field value
func (o *TaxDataOrderTaxInterface) SetPercent(v float32) {
	o.Percent = v
}

// GetAmount returns the Amount field value
func (o *TaxDataOrderTaxInterface) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TaxDataOrderTaxInterface) SetAmount(v float32) {
	o.Amount = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *TaxDataOrderTaxInterface) GetBaseAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetBaseAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *TaxDataOrderTaxInterface) SetBaseAmount(v float32) {
	o.BaseAmount = v
}

// GetBaseRealAmount returns the BaseRealAmount field value
func (o *TaxDataOrderTaxInterface) GetBaseRealAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseRealAmount
}

// GetBaseRealAmountOk returns a tuple with the BaseRealAmount field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetBaseRealAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseRealAmount, true
}

// SetBaseRealAmount sets field value
func (o *TaxDataOrderTaxInterface) SetBaseRealAmount(v float32) {
	o.BaseRealAmount = v
}

// GetPriority returns the Priority field value
func (o *TaxDataOrderTaxInterface) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *TaxDataOrderTaxInterface) SetPriority(v int32) {
	o.Priority = v
}

// GetPosition returns the Position field value
func (o *TaxDataOrderTaxInterface) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *TaxDataOrderTaxInterface) SetPosition(v int32) {
	o.Position = v
}

// GetProcess returns the Process field value
func (o *TaxDataOrderTaxInterface) GetProcess() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Process
}

// GetProcessOk returns a tuple with the Process field value
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetProcessOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Process, true
}

// SetProcess sets field value
func (o *TaxDataOrderTaxInterface) SetProcess(v int32) {
	o.Process = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *TaxDataOrderTaxInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *TaxDataOrderTaxInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *TaxDataOrderTaxInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o TaxDataOrderTaxInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxDataOrderTaxInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxId) {
		toSerialize["tax_id"] = o.TaxId
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["percent"] = o.Percent
	toSerialize["amount"] = o.Amount
	toSerialize["base_amount"] = o.BaseAmount
	toSerialize["base_real_amount"] = o.BaseRealAmount
	toSerialize["priority"] = o.Priority
	toSerialize["position"] = o.Position
	toSerialize["process"] = o.Process
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaxDataOrderTaxInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"percent",
		"amount",
		"base_amount",
		"base_real_amount",
		"priority",
		"position",
		"process",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxDataOrderTaxInterface := _TaxDataOrderTaxInterface{}

	err = json.Unmarshal(data, &varTaxDataOrderTaxInterface)

	if err != nil {
		return err
	}

	*o = TaxDataOrderTaxInterface(varTaxDataOrderTaxInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tax_id")
		delete(additionalProperties, "order_id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "title")
		delete(additionalProperties, "percent")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "base_amount")
		delete(additionalProperties, "base_real_amount")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "position")
		delete(additionalProperties, "process")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *TaxDataOrderTaxInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *TaxDataOrderTaxInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableTaxDataOrderTaxInterface struct {
	value *TaxDataOrderTaxInterface
	isSet bool
}

func (v NullableTaxDataOrderTaxInterface) Get() *TaxDataOrderTaxInterface {
	return v.value
}

func (v *NullableTaxDataOrderTaxInterface) Set(val *TaxDataOrderTaxInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxDataOrderTaxInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxDataOrderTaxInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxDataOrderTaxInterface(val *TaxDataOrderTaxInterface) *NullableTaxDataOrderTaxInterface {
	return &NullableTaxDataOrderTaxInterface{value: val, isSet: true}
}

func (v NullableTaxDataOrderTaxInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxDataOrderTaxInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
