/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the GiftCardAccountDataGiftCardInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiftCardAccountDataGiftCardInterface{}

// GiftCardAccountDataGiftCardInterface Gift Card data
type GiftCardAccountDataGiftCardInterface struct {
	// Id
	Id int32 `json:"id"`
	// Code
	Code string `json:"code"`
	// Amount
	Amount float32 `json:"amount"`
	// Base Amount
	BaseAmount           float32 `json:"base_amount"`
	AdditionalProperties map[string]interface{}
}

type _GiftCardAccountDataGiftCardInterface GiftCardAccountDataGiftCardInterface

// NewGiftCardAccountDataGiftCardInterface instantiates a new GiftCardAccountDataGiftCardInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardAccountDataGiftCardInterface(id int32, code string, amount float32, baseAmount float32) *GiftCardAccountDataGiftCardInterface {
	this := GiftCardAccountDataGiftCardInterface{}
	this.Id = id
	this.Code = code
	this.Amount = amount
	this.BaseAmount = baseAmount
	return &this
}

// NewGiftCardAccountDataGiftCardInterfaceWithDefaults instantiates a new GiftCardAccountDataGiftCardInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardAccountDataGiftCardInterfaceWithDefaults() *GiftCardAccountDataGiftCardInterface {
	this := GiftCardAccountDataGiftCardInterface{}
	return &this
}

// GetId returns the Id field value
func (o *GiftCardAccountDataGiftCardInterface) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardInterface) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GiftCardAccountDataGiftCardInterface) SetId(v int32) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *GiftCardAccountDataGiftCardInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *GiftCardAccountDataGiftCardInterface) SetCode(v string) {
	o.Code = v
}

// GetAmount returns the Amount field value
func (o *GiftCardAccountDataGiftCardInterface) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardInterface) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *GiftCardAccountDataGiftCardInterface) SetAmount(v float32) {
	o.Amount = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *GiftCardAccountDataGiftCardInterface) GetBaseAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardInterface) GetBaseAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *GiftCardAccountDataGiftCardInterface) SetBaseAmount(v float32) {
	o.BaseAmount = v
}

func (o GiftCardAccountDataGiftCardInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiftCardAccountDataGiftCardInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["amount"] = o.Amount
	toSerialize["base_amount"] = o.BaseAmount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GiftCardAccountDataGiftCardInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"amount",
		"base_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGiftCardAccountDataGiftCardInterface := _GiftCardAccountDataGiftCardInterface{}

	err = json.Unmarshal(data, &varGiftCardAccountDataGiftCardInterface)

	if err != nil {
		return err
	}

	*o = GiftCardAccountDataGiftCardInterface(varGiftCardAccountDataGiftCardInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "base_amount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *GiftCardAccountDataGiftCardInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *GiftCardAccountDataGiftCardInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableGiftCardAccountDataGiftCardInterface struct {
	value *GiftCardAccountDataGiftCardInterface
	isSet bool
}

func (v NullableGiftCardAccountDataGiftCardInterface) Get() *GiftCardAccountDataGiftCardInterface {
	return v.value
}

func (v *NullableGiftCardAccountDataGiftCardInterface) Set(val *GiftCardAccountDataGiftCardInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardAccountDataGiftCardInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardAccountDataGiftCardInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardAccountDataGiftCardInterface(val *GiftCardAccountDataGiftCardInterface) *NullableGiftCardAccountDataGiftCardInterface {
	return &NullableGiftCardAccountDataGiftCardInterface{value: val, isSet: true}
}

func (v NullableGiftCardAccountDataGiftCardInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardAccountDataGiftCardInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
