/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the TaxDataOrderTaxDetailsItemInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxDataOrderTaxDetailsItemInterface{}

// TaxDataOrderTaxDetailsItemInterface Interface OrderTaxDetailsItemInterface
type TaxDataOrderTaxDetailsItemInterface struct {
	// Type (shipping, product, weee, gift wrapping, etc)
	Type *string `json:"type,omitempty"`
	// Item id if this item is a product
	ItemId *int32 `json:"item_id,omitempty"`
	// Associated item id if this item is associated with another item, null otherwise
	AssociatedItemId *int32 `json:"associated_item_id,omitempty"`
	// Applied taxes
	AppliedTaxes []TaxDataOrderTaxDetailsAppliedTaxInterface `json:"applied_taxes,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaxDataOrderTaxDetailsItemInterface TaxDataOrderTaxDetailsItemInterface

// NewTaxDataOrderTaxDetailsItemInterface instantiates a new TaxDataOrderTaxDetailsItemInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxDataOrderTaxDetailsItemInterface() *TaxDataOrderTaxDetailsItemInterface {
	this := TaxDataOrderTaxDetailsItemInterface{}
	return &this
}

// NewTaxDataOrderTaxDetailsItemInterfaceWithDefaults instantiates a new TaxDataOrderTaxDetailsItemInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxDataOrderTaxDetailsItemInterfaceWithDefaults() *TaxDataOrderTaxDetailsItemInterface {
	this := TaxDataOrderTaxDetailsItemInterface{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaxDataOrderTaxDetailsItemInterface) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaxDataOrderTaxDetailsItemInterface) SetType(v string) {
	o.Type = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *TaxDataOrderTaxDetailsItemInterface) GetItemId() int32 {
	if o == nil || IsNil(o.ItemId) {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) GetItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *TaxDataOrderTaxDetailsItemInterface) SetItemId(v int32) {
	o.ItemId = &v
}

// GetAssociatedItemId returns the AssociatedItemId field value if set, zero value otherwise.
func (o *TaxDataOrderTaxDetailsItemInterface) GetAssociatedItemId() int32 {
	if o == nil || IsNil(o.AssociatedItemId) {
		var ret int32
		return ret
	}
	return *o.AssociatedItemId
}

// GetAssociatedItemIdOk returns a tuple with the AssociatedItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) GetAssociatedItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AssociatedItemId) {
		return nil, false
	}
	return o.AssociatedItemId, true
}

// HasAssociatedItemId returns a boolean if a field has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) HasAssociatedItemId() bool {
	if o != nil && !IsNil(o.AssociatedItemId) {
		return true
	}

	return false
}

// SetAssociatedItemId gets a reference to the given int32 and assigns it to the AssociatedItemId field.
func (o *TaxDataOrderTaxDetailsItemInterface) SetAssociatedItemId(v int32) {
	o.AssociatedItemId = &v
}

// GetAppliedTaxes returns the AppliedTaxes field value if set, zero value otherwise.
func (o *TaxDataOrderTaxDetailsItemInterface) GetAppliedTaxes() []TaxDataOrderTaxDetailsAppliedTaxInterface {
	if o == nil || IsNil(o.AppliedTaxes) {
		var ret []TaxDataOrderTaxDetailsAppliedTaxInterface
		return ret
	}
	return o.AppliedTaxes
}

// GetAppliedTaxesOk returns a tuple with the AppliedTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) GetAppliedTaxesOk() ([]TaxDataOrderTaxDetailsAppliedTaxInterface, bool) {
	if o == nil || IsNil(o.AppliedTaxes) {
		return nil, false
	}
	return o.AppliedTaxes, true
}

// HasAppliedTaxes returns a boolean if a field has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) HasAppliedTaxes() bool {
	if o != nil && !IsNil(o.AppliedTaxes) {
		return true
	}

	return false
}

// SetAppliedTaxes gets a reference to the given []TaxDataOrderTaxDetailsAppliedTaxInterface and assigns it to the AppliedTaxes field.
func (o *TaxDataOrderTaxDetailsItemInterface) SetAppliedTaxes(v []TaxDataOrderTaxDetailsAppliedTaxInterface) {
	o.AppliedTaxes = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *TaxDataOrderTaxDetailsItemInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *TaxDataOrderTaxDetailsItemInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *TaxDataOrderTaxDetailsItemInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o TaxDataOrderTaxDetailsItemInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxDataOrderTaxDetailsItemInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ItemId) {
		toSerialize["item_id"] = o.ItemId
	}
	if !IsNil(o.AssociatedItemId) {
		toSerialize["associated_item_id"] = o.AssociatedItemId
	}
	if !IsNil(o.AppliedTaxes) {
		toSerialize["applied_taxes"] = o.AppliedTaxes
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaxDataOrderTaxDetailsItemInterface) UnmarshalJSON(data []byte) (err error) {
	varTaxDataOrderTaxDetailsItemInterface := _TaxDataOrderTaxDetailsItemInterface{}

	err = json.Unmarshal(data, &varTaxDataOrderTaxDetailsItemInterface)

	if err != nil {
		return err
	}

	*o = TaxDataOrderTaxDetailsItemInterface(varTaxDataOrderTaxDetailsItemInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "associated_item_id")
		delete(additionalProperties, "applied_taxes")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *TaxDataOrderTaxDetailsItemInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *TaxDataOrderTaxDetailsItemInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableTaxDataOrderTaxDetailsItemInterface struct {
	value *TaxDataOrderTaxDetailsItemInterface
	isSet bool
}

func (v NullableTaxDataOrderTaxDetailsItemInterface) Get() *TaxDataOrderTaxDetailsItemInterface {
	return v.value
}

func (v *NullableTaxDataOrderTaxDetailsItemInterface) Set(val *TaxDataOrderTaxDetailsItemInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxDataOrderTaxDetailsItemInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxDataOrderTaxDetailsItemInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxDataOrderTaxDetailsItemInterface(val *TaxDataOrderTaxDetailsItemInterface) *NullableTaxDataOrderTaxDetailsItemInterface {
	return &NullableTaxDataOrderTaxDetailsItemInterface{value: val, isSet: true}
}

func (v NullableTaxDataOrderTaxDetailsItemInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxDataOrderTaxDetailsItemInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
