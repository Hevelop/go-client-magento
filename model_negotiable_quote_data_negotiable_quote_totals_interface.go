/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the NegotiableQuoteDataNegotiableQuoteTotalsInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegotiableQuoteDataNegotiableQuoteTotalsInterface{}

// NegotiableQuoteDataNegotiableQuoteTotalsInterface Extension attribute for quote totals model.
type NegotiableQuoteDataNegotiableQuoteTotalsInterface struct {
	// The number of different items or products in the cart.
	ItemsCount int32 `json:"items_count"`
	// Negotiable quote status.
	QuoteStatus string `json:"quote_status"`
	// The cart creation date and time.
	CreatedAt string `json:"created_at"`
	// The cart last update date and time.
	UpdatedAt string `json:"updated_at"`
	// Customer group id.
	CustomerGroup int32 `json:"customer_group"`
	// Base currency to quote currency rate.
	BaseToQuoteRate float32 `json:"base_to_quote_rate"`
	// Total cost for quote.
	CostTotal float32 `json:"cost_total"`
	// Total cost for quote in base currency.
	BaseCostTotal float32 `json:"base_cost_total"`
	// Original quote total.
	OriginalTotal float32 `json:"original_total"`
	// Original quote total in base currency.
	BaseOriginalTotal float32 `json:"base_original_total"`
	// Original tax amount for quote.
	OriginalTax float32 `json:"original_tax"`
	// Original tax amount for quote in base currency.
	BaseOriginalTax float32 `json:"base_original_tax"`
	// Original price with included tax for quote.
	OriginalPriceInclTax float32 `json:"original_price_incl_tax"`
	// Original price with included tax for quote in base currency.
	BaseOriginalPriceInclTax float32 `json:"base_original_price_incl_tax"`
	// Negotiable quote type.
	NegotiatedPriceType int32 `json:"negotiated_price_type"`
	// Negotiable price value for quote.
	NegotiatedPriceValue float32 `json:"negotiated_price_value"`
	AdditionalProperties map[string]interface{}
}

type _NegotiableQuoteDataNegotiableQuoteTotalsInterface NegotiableQuoteDataNegotiableQuoteTotalsInterface

// NewNegotiableQuoteDataNegotiableQuoteTotalsInterface instantiates a new NegotiableQuoteDataNegotiableQuoteTotalsInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiableQuoteDataNegotiableQuoteTotalsInterface(itemsCount int32, quoteStatus string, createdAt string, updatedAt string, customerGroup int32, baseToQuoteRate float32, costTotal float32, baseCostTotal float32, originalTotal float32, baseOriginalTotal float32, originalTax float32, baseOriginalTax float32, originalPriceInclTax float32, baseOriginalPriceInclTax float32, negotiatedPriceType int32, negotiatedPriceValue float32) *NegotiableQuoteDataNegotiableQuoteTotalsInterface {
	this := NegotiableQuoteDataNegotiableQuoteTotalsInterface{}
	this.ItemsCount = itemsCount
	this.QuoteStatus = quoteStatus
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.CustomerGroup = customerGroup
	this.BaseToQuoteRate = baseToQuoteRate
	this.CostTotal = costTotal
	this.BaseCostTotal = baseCostTotal
	this.OriginalTotal = originalTotal
	this.BaseOriginalTotal = baseOriginalTotal
	this.OriginalTax = originalTax
	this.BaseOriginalTax = baseOriginalTax
	this.OriginalPriceInclTax = originalPriceInclTax
	this.BaseOriginalPriceInclTax = baseOriginalPriceInclTax
	this.NegotiatedPriceType = negotiatedPriceType
	this.NegotiatedPriceValue = negotiatedPriceValue
	return &this
}

// NewNegotiableQuoteDataNegotiableQuoteTotalsInterfaceWithDefaults instantiates a new NegotiableQuoteDataNegotiableQuoteTotalsInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiableQuoteDataNegotiableQuoteTotalsInterfaceWithDefaults() *NegotiableQuoteDataNegotiableQuoteTotalsInterface {
	this := NegotiableQuoteDataNegotiableQuoteTotalsInterface{}
	return &this
}

// GetItemsCount returns the ItemsCount field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetItemsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemsCount
}

// GetItemsCountOk returns a tuple with the ItemsCount field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetItemsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsCount, true
}

// SetItemsCount sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetItemsCount(v int32) {
	o.ItemsCount = v
}

// GetQuoteStatus returns the QuoteStatus field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetQuoteStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteStatus
}

// GetQuoteStatusOk returns a tuple with the QuoteStatus field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetQuoteStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteStatus, true
}

// SetQuoteStatus sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetQuoteStatus(v string) {
	o.QuoteStatus = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetCustomerGroup returns the CustomerGroup field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCustomerGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomerGroup
}

// GetCustomerGroupOk returns a tuple with the CustomerGroup field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCustomerGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerGroup, true
}

// SetCustomerGroup sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetCustomerGroup(v int32) {
	o.CustomerGroup = v
}

// GetBaseToQuoteRate returns the BaseToQuoteRate field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseToQuoteRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseToQuoteRate
}

// GetBaseToQuoteRateOk returns a tuple with the BaseToQuoteRate field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseToQuoteRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseToQuoteRate, true
}

// SetBaseToQuoteRate sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetBaseToQuoteRate(v float32) {
	o.BaseToQuoteRate = v
}

// GetCostTotal returns the CostTotal field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCostTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CostTotal
}

// GetCostTotalOk returns a tuple with the CostTotal field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetCostTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostTotal, true
}

// SetCostTotal sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetCostTotal(v float32) {
	o.CostTotal = v
}

// GetBaseCostTotal returns the BaseCostTotal field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseCostTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseCostTotal
}

// GetBaseCostTotalOk returns a tuple with the BaseCostTotal field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseCostTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCostTotal, true
}

// SetBaseCostTotal sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetBaseCostTotal(v float32) {
	o.BaseCostTotal = v
}

// GetOriginalTotal returns the OriginalTotal field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OriginalTotal
}

// GetOriginalTotalOk returns a tuple with the OriginalTotal field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTotal, true
}

// SetOriginalTotal sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetOriginalTotal(v float32) {
	o.OriginalTotal = v
}

// GetBaseOriginalTotal returns the BaseOriginalTotal field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseOriginalTotal
}

// GetBaseOriginalTotalOk returns a tuple with the BaseOriginalTotal field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseOriginalTotal, true
}

// SetBaseOriginalTotal sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetBaseOriginalTotal(v float32) {
	o.BaseOriginalTotal = v
}

// GetOriginalTax returns the OriginalTax field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalTax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OriginalTax
}

// GetOriginalTaxOk returns a tuple with the OriginalTax field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTax, true
}

// SetOriginalTax sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetOriginalTax(v float32) {
	o.OriginalTax = v
}

// GetBaseOriginalTax returns the BaseOriginalTax field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalTax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseOriginalTax
}

// GetBaseOriginalTaxOk returns a tuple with the BaseOriginalTax field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseOriginalTax, true
}

// SetBaseOriginalTax sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetBaseOriginalTax(v float32) {
	o.BaseOriginalTax = v
}

// GetOriginalPriceInclTax returns the OriginalPriceInclTax field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalPriceInclTax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OriginalPriceInclTax
}

// GetOriginalPriceInclTaxOk returns a tuple with the OriginalPriceInclTax field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetOriginalPriceInclTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPriceInclTax, true
}

// SetOriginalPriceInclTax sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetOriginalPriceInclTax(v float32) {
	o.OriginalPriceInclTax = v
}

// GetBaseOriginalPriceInclTax returns the BaseOriginalPriceInclTax field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalPriceInclTax() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseOriginalPriceInclTax
}

// GetBaseOriginalPriceInclTaxOk returns a tuple with the BaseOriginalPriceInclTax field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetBaseOriginalPriceInclTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseOriginalPriceInclTax, true
}

// SetBaseOriginalPriceInclTax sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetBaseOriginalPriceInclTax(v float32) {
	o.BaseOriginalPriceInclTax = v
}

// GetNegotiatedPriceType returns the NegotiatedPriceType field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetNegotiatedPriceType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NegotiatedPriceType
}

// GetNegotiatedPriceTypeOk returns a tuple with the NegotiatedPriceType field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetNegotiatedPriceTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NegotiatedPriceType, true
}

// SetNegotiatedPriceType sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetNegotiatedPriceType(v int32) {
	o.NegotiatedPriceType = v
}

// GetNegotiatedPriceValue returns the NegotiatedPriceValue field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetNegotiatedPriceValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NegotiatedPriceValue
}

// GetNegotiatedPriceValueOk returns a tuple with the NegotiatedPriceValue field value
// and a boolean to check if the value has been set.
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetNegotiatedPriceValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NegotiatedPriceValue, true
}

// SetNegotiatedPriceValue sets field value
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetNegotiatedPriceValue(v float32) {
	o.NegotiatedPriceValue = v
}

func (o NegotiableQuoteDataNegotiableQuoteTotalsInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegotiableQuoteDataNegotiableQuoteTotalsInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items_count"] = o.ItemsCount
	toSerialize["quote_status"] = o.QuoteStatus
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["customer_group"] = o.CustomerGroup
	toSerialize["base_to_quote_rate"] = o.BaseToQuoteRate
	toSerialize["cost_total"] = o.CostTotal
	toSerialize["base_cost_total"] = o.BaseCostTotal
	toSerialize["original_total"] = o.OriginalTotal
	toSerialize["base_original_total"] = o.BaseOriginalTotal
	toSerialize["original_tax"] = o.OriginalTax
	toSerialize["base_original_tax"] = o.BaseOriginalTax
	toSerialize["original_price_incl_tax"] = o.OriginalPriceInclTax
	toSerialize["base_original_price_incl_tax"] = o.BaseOriginalPriceInclTax
	toSerialize["negotiated_price_type"] = o.NegotiatedPriceType
	toSerialize["negotiated_price_value"] = o.NegotiatedPriceValue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items_count",
		"quote_status",
		"created_at",
		"updated_at",
		"customer_group",
		"base_to_quote_rate",
		"cost_total",
		"base_cost_total",
		"original_total",
		"base_original_total",
		"original_tax",
		"base_original_tax",
		"original_price_incl_tax",
		"base_original_price_incl_tax",
		"negotiated_price_type",
		"negotiated_price_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNegotiableQuoteDataNegotiableQuoteTotalsInterface := _NegotiableQuoteDataNegotiableQuoteTotalsInterface{}

	err = json.Unmarshal(data, &varNegotiableQuoteDataNegotiableQuoteTotalsInterface)

	if err != nil {
		return err
	}

	*o = NegotiableQuoteDataNegotiableQuoteTotalsInterface(varNegotiableQuoteDataNegotiableQuoteTotalsInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items_count")
		delete(additionalProperties, "quote_status")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "customer_group")
		delete(additionalProperties, "base_to_quote_rate")
		delete(additionalProperties, "cost_total")
		delete(additionalProperties, "base_cost_total")
		delete(additionalProperties, "original_total")
		delete(additionalProperties, "base_original_total")
		delete(additionalProperties, "original_tax")
		delete(additionalProperties, "base_original_tax")
		delete(additionalProperties, "original_price_incl_tax")
		delete(additionalProperties, "base_original_price_incl_tax")
		delete(additionalProperties, "negotiated_price_type")
		delete(additionalProperties, "negotiated_price_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *NegotiableQuoteDataNegotiableQuoteTotalsInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface struct {
	value *NegotiableQuoteDataNegotiableQuoteTotalsInterface
	isSet bool
}

func (v NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) Get() *NegotiableQuoteDataNegotiableQuoteTotalsInterface {
	return v.value
}

func (v *NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) Set(val *NegotiableQuoteDataNegotiableQuoteTotalsInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiableQuoteDataNegotiableQuoteTotalsInterface(val *NegotiableQuoteDataNegotiableQuoteTotalsInterface) *NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface {
	return &NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface{value: val, isSet: true}
}

func (v NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiableQuoteDataNegotiableQuoteTotalsInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
