/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
)

// checks if the CatalogDataProductOptionExtensionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductOptionExtensionInterface{}

// CatalogDataProductOptionExtensionInterface ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductOptionInterface
type CatalogDataProductOptionExtensionInterface struct {
	CustomOptions           []CatalogDataCustomOptionInterface                            `json:"custom_options,omitempty"`
	BundleOptions           []BundleDataBundleOptionInterface                             `json:"bundle_options,omitempty"`
	DownloadableOption      *DownloadableDataDownloadableOptionInterface                  `json:"downloadable_option,omitempty"`
	GiftcardItemOption      *GiftCardDataGiftCardOptionInterface                          `json:"giftcard_item_option,omitempty"`
	ConfigurableItemOptions []ConfigurableProductDataConfigurableItemOptionValueInterface `json:"configurable_item_options,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _CatalogDataProductOptionExtensionInterface CatalogDataProductOptionExtensionInterface

// NewCatalogDataProductOptionExtensionInterface instantiates a new CatalogDataProductOptionExtensionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductOptionExtensionInterface() *CatalogDataProductOptionExtensionInterface {
	this := CatalogDataProductOptionExtensionInterface{}
	return &this
}

// NewCatalogDataProductOptionExtensionInterfaceWithDefaults instantiates a new CatalogDataProductOptionExtensionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductOptionExtensionInterfaceWithDefaults() *CatalogDataProductOptionExtensionInterface {
	this := CatalogDataProductOptionExtensionInterface{}
	return &this
}

// GetCustomOptions returns the CustomOptions field value if set, zero value otherwise.
func (o *CatalogDataProductOptionExtensionInterface) GetCustomOptions() []CatalogDataCustomOptionInterface {
	if o == nil || IsNil(o.CustomOptions) {
		var ret []CatalogDataCustomOptionInterface
		return ret
	}
	return o.CustomOptions
}

// GetCustomOptionsOk returns a tuple with the CustomOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductOptionExtensionInterface) GetCustomOptionsOk() ([]CatalogDataCustomOptionInterface, bool) {
	if o == nil || IsNil(o.CustomOptions) {
		return nil, false
	}
	return o.CustomOptions, true
}

// HasCustomOptions returns a boolean if a field has been set.
func (o *CatalogDataProductOptionExtensionInterface) HasCustomOptions() bool {
	if o != nil && !IsNil(o.CustomOptions) {
		return true
	}

	return false
}

// SetCustomOptions gets a reference to the given []CatalogDataCustomOptionInterface and assigns it to the CustomOptions field.
func (o *CatalogDataProductOptionExtensionInterface) SetCustomOptions(v []CatalogDataCustomOptionInterface) {
	o.CustomOptions = v
}

// GetBundleOptions returns the BundleOptions field value if set, zero value otherwise.
func (o *CatalogDataProductOptionExtensionInterface) GetBundleOptions() []BundleDataBundleOptionInterface {
	if o == nil || IsNil(o.BundleOptions) {
		var ret []BundleDataBundleOptionInterface
		return ret
	}
	return o.BundleOptions
}

// GetBundleOptionsOk returns a tuple with the BundleOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductOptionExtensionInterface) GetBundleOptionsOk() ([]BundleDataBundleOptionInterface, bool) {
	if o == nil || IsNil(o.BundleOptions) {
		return nil, false
	}
	return o.BundleOptions, true
}

// HasBundleOptions returns a boolean if a field has been set.
func (o *CatalogDataProductOptionExtensionInterface) HasBundleOptions() bool {
	if o != nil && !IsNil(o.BundleOptions) {
		return true
	}

	return false
}

// SetBundleOptions gets a reference to the given []BundleDataBundleOptionInterface and assigns it to the BundleOptions field.
func (o *CatalogDataProductOptionExtensionInterface) SetBundleOptions(v []BundleDataBundleOptionInterface) {
	o.BundleOptions = v
}

// GetDownloadableOption returns the DownloadableOption field value if set, zero value otherwise.
func (o *CatalogDataProductOptionExtensionInterface) GetDownloadableOption() DownloadableDataDownloadableOptionInterface {
	if o == nil || IsNil(o.DownloadableOption) {
		var ret DownloadableDataDownloadableOptionInterface
		return ret
	}
	return *o.DownloadableOption
}

// GetDownloadableOptionOk returns a tuple with the DownloadableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductOptionExtensionInterface) GetDownloadableOptionOk() (*DownloadableDataDownloadableOptionInterface, bool) {
	if o == nil || IsNil(o.DownloadableOption) {
		return nil, false
	}
	return o.DownloadableOption, true
}

// HasDownloadableOption returns a boolean if a field has been set.
func (o *CatalogDataProductOptionExtensionInterface) HasDownloadableOption() bool {
	if o != nil && !IsNil(o.DownloadableOption) {
		return true
	}

	return false
}

// SetDownloadableOption gets a reference to the given DownloadableDataDownloadableOptionInterface and assigns it to the DownloadableOption field.
func (o *CatalogDataProductOptionExtensionInterface) SetDownloadableOption(v DownloadableDataDownloadableOptionInterface) {
	o.DownloadableOption = &v
}

// GetGiftcardItemOption returns the GiftcardItemOption field value if set, zero value otherwise.
func (o *CatalogDataProductOptionExtensionInterface) GetGiftcardItemOption() GiftCardDataGiftCardOptionInterface {
	if o == nil || IsNil(o.GiftcardItemOption) {
		var ret GiftCardDataGiftCardOptionInterface
		return ret
	}
	return *o.GiftcardItemOption
}

// GetGiftcardItemOptionOk returns a tuple with the GiftcardItemOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductOptionExtensionInterface) GetGiftcardItemOptionOk() (*GiftCardDataGiftCardOptionInterface, bool) {
	if o == nil || IsNil(o.GiftcardItemOption) {
		return nil, false
	}
	return o.GiftcardItemOption, true
}

// HasGiftcardItemOption returns a boolean if a field has been set.
func (o *CatalogDataProductOptionExtensionInterface) HasGiftcardItemOption() bool {
	if o != nil && !IsNil(o.GiftcardItemOption) {
		return true
	}

	return false
}

// SetGiftcardItemOption gets a reference to the given GiftCardDataGiftCardOptionInterface and assigns it to the GiftcardItemOption field.
func (o *CatalogDataProductOptionExtensionInterface) SetGiftcardItemOption(v GiftCardDataGiftCardOptionInterface) {
	o.GiftcardItemOption = &v
}

// GetConfigurableItemOptions returns the ConfigurableItemOptions field value if set, zero value otherwise.
func (o *CatalogDataProductOptionExtensionInterface) GetConfigurableItemOptions() []ConfigurableProductDataConfigurableItemOptionValueInterface {
	if o == nil || IsNil(o.ConfigurableItemOptions) {
		var ret []ConfigurableProductDataConfigurableItemOptionValueInterface
		return ret
	}
	return o.ConfigurableItemOptions
}

// GetConfigurableItemOptionsOk returns a tuple with the ConfigurableItemOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductOptionExtensionInterface) GetConfigurableItemOptionsOk() ([]ConfigurableProductDataConfigurableItemOptionValueInterface, bool) {
	if o == nil || IsNil(o.ConfigurableItemOptions) {
		return nil, false
	}
	return o.ConfigurableItemOptions, true
}

// HasConfigurableItemOptions returns a boolean if a field has been set.
func (o *CatalogDataProductOptionExtensionInterface) HasConfigurableItemOptions() bool {
	if o != nil && !IsNil(o.ConfigurableItemOptions) {
		return true
	}

	return false
}

// SetConfigurableItemOptions gets a reference to the given []ConfigurableProductDataConfigurableItemOptionValueInterface and assigns it to the ConfigurableItemOptions field.
func (o *CatalogDataProductOptionExtensionInterface) SetConfigurableItemOptions(v []ConfigurableProductDataConfigurableItemOptionValueInterface) {
	o.ConfigurableItemOptions = v
}

func (o CatalogDataProductOptionExtensionInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductOptionExtensionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomOptions) {
		toSerialize["custom_options"] = o.CustomOptions
	}
	if !IsNil(o.BundleOptions) {
		toSerialize["bundle_options"] = o.BundleOptions
	}
	if !IsNil(o.DownloadableOption) {
		toSerialize["downloadable_option"] = o.DownloadableOption
	}
	if !IsNil(o.GiftcardItemOption) {
		toSerialize["giftcard_item_option"] = o.GiftcardItemOption
	}
	if !IsNil(o.ConfigurableItemOptions) {
		toSerialize["configurable_item_options"] = o.ConfigurableItemOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductOptionExtensionInterface) UnmarshalJSON(data []byte) (err error) {
	varCatalogDataProductOptionExtensionInterface := _CatalogDataProductOptionExtensionInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductOptionExtensionInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductOptionExtensionInterface(varCatalogDataProductOptionExtensionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "custom_options")
		delete(additionalProperties, "bundle_options")
		delete(additionalProperties, "downloadable_option")
		delete(additionalProperties, "giftcard_item_option")
		delete(additionalProperties, "configurable_item_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductOptionExtensionInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductOptionExtensionInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductOptionExtensionInterface struct {
	value *CatalogDataProductOptionExtensionInterface
	isSet bool
}

func (v NullableCatalogDataProductOptionExtensionInterface) Get() *CatalogDataProductOptionExtensionInterface {
	return v.value
}

func (v *NullableCatalogDataProductOptionExtensionInterface) Set(val *CatalogDataProductOptionExtensionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductOptionExtensionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductOptionExtensionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductOptionExtensionInterface(val *CatalogDataProductOptionExtensionInterface) *NullableCatalogDataProductOptionExtensionInterface {
	return &NullableCatalogDataProductOptionExtensionInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductOptionExtensionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductOptionExtensionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
