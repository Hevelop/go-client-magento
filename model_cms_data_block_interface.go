/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CmsDataBlockInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CmsDataBlockInterface{}

// CmsDataBlockInterface CMS block interface.
type CmsDataBlockInterface struct {
	// ID
	Id *int32 `json:"id,omitempty"`
	// Identifier
	Identifier string `json:"identifier"`
	// Title
	Title *string `json:"title,omitempty"`
	// Content
	Content *string `json:"content,omitempty"`
	// Creation time
	CreationTime *string `json:"creation_time,omitempty"`
	// Update time
	UpdateTime *string `json:"update_time,omitempty"`
	// Active
	Active               *bool `json:"active,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CmsDataBlockInterface CmsDataBlockInterface

// NewCmsDataBlockInterface instantiates a new CmsDataBlockInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmsDataBlockInterface(identifier string) *CmsDataBlockInterface {
	this := CmsDataBlockInterface{}
	this.Identifier = identifier
	return &this
}

// NewCmsDataBlockInterfaceWithDefaults instantiates a new CmsDataBlockInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmsDataBlockInterfaceWithDefaults() *CmsDataBlockInterface {
	this := CmsDataBlockInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CmsDataBlockInterface) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value
func (o *CmsDataBlockInterface) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CmsDataBlockInterface) SetIdentifier(v string) {
	o.Identifier = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CmsDataBlockInterface) SetTitle(v string) {
	o.Title = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *CmsDataBlockInterface) SetContent(v string) {
	o.Content = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetCreationTime() string {
	if o == nil || IsNil(o.CreationTime) {
		var ret string
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetCreationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given string and assigns it to the CreationTime field.
func (o *CmsDataBlockInterface) SetCreationTime(v string) {
	o.CreationTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *CmsDataBlockInterface) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CmsDataBlockInterface) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmsDataBlockInterface) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CmsDataBlockInterface) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CmsDataBlockInterface) SetActive(v bool) {
	o.Active = &v
}

func (o CmsDataBlockInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CmsDataBlockInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CmsDataBlockInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCmsDataBlockInterface := _CmsDataBlockInterface{}

	err = json.Unmarshal(data, &varCmsDataBlockInterface)

	if err != nil {
		return err
	}

	*o = CmsDataBlockInterface(varCmsDataBlockInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "title")
		delete(additionalProperties, "content")
		delete(additionalProperties, "creation_time")
		delete(additionalProperties, "update_time")
		delete(additionalProperties, "active")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CmsDataBlockInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CmsDataBlockInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCmsDataBlockInterface struct {
	value *CmsDataBlockInterface
	isSet bool
}

func (v NullableCmsDataBlockInterface) Get() *CmsDataBlockInterface {
	return v.value
}

func (v *NullableCmsDataBlockInterface) Set(val *CmsDataBlockInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCmsDataBlockInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCmsDataBlockInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmsDataBlockInterface(val *CmsDataBlockInterface) *NullableCmsDataBlockInterface {
	return &NullableCmsDataBlockInterface{value: val, isSet: true}
}

func (v NullableCmsDataBlockInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmsDataBlockInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
