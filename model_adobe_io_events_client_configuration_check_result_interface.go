/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the AdobeIoEventsClientConfigurationCheckResultInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdobeIoEventsClientConfigurationCheckResultInterface{}

// AdobeIoEventsClientConfigurationCheckResultInterface Contains configuration status for each necessary config setting
type AdobeIoEventsClientConfigurationCheckResultInterface struct {
	// Ok/error status of the configuration
	Status string `json:"status"`
	// The technical service account is configured
	TechnicalServiceAccountConfigured bool `json:"technical_service_account_configured"`
	// Providers are configured to allow the service account to connect
	TechnicalServiceAccountCanConnectToIoEvents bool `json:"technical_service_account_can_connect_to_io_events"`
	// The provider id if configured
	ProviderIdConfigured string `json:"provider_id_configured"`
	// A configured provider id is valid
	ProviderIdValid      bool `json:"provider_id_valid"`
	AdditionalProperties map[string]interface{}
}

type _AdobeIoEventsClientConfigurationCheckResultInterface AdobeIoEventsClientConfigurationCheckResultInterface

// NewAdobeIoEventsClientConfigurationCheckResultInterface instantiates a new AdobeIoEventsClientConfigurationCheckResultInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdobeIoEventsClientConfigurationCheckResultInterface(status string, technicalServiceAccountConfigured bool, technicalServiceAccountCanConnectToIoEvents bool, providerIdConfigured string, providerIdValid bool) *AdobeIoEventsClientConfigurationCheckResultInterface {
	this := AdobeIoEventsClientConfigurationCheckResultInterface{}
	this.Status = status
	this.TechnicalServiceAccountConfigured = technicalServiceAccountConfigured
	this.TechnicalServiceAccountCanConnectToIoEvents = technicalServiceAccountCanConnectToIoEvents
	this.ProviderIdConfigured = providerIdConfigured
	this.ProviderIdValid = providerIdValid
	return &this
}

// NewAdobeIoEventsClientConfigurationCheckResultInterfaceWithDefaults instantiates a new AdobeIoEventsClientConfigurationCheckResultInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdobeIoEventsClientConfigurationCheckResultInterfaceWithDefaults() *AdobeIoEventsClientConfigurationCheckResultInterface {
	this := AdobeIoEventsClientConfigurationCheckResultInterface{}
	return &this
}

// GetStatus returns the Status field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetStatus(v string) {
	o.Status = v
}

// GetTechnicalServiceAccountConfigured returns the TechnicalServiceAccountConfigured field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetTechnicalServiceAccountConfigured() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TechnicalServiceAccountConfigured
}

// GetTechnicalServiceAccountConfiguredOk returns a tuple with the TechnicalServiceAccountConfigured field value
// and a boolean to check if the value has been set.
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetTechnicalServiceAccountConfiguredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnicalServiceAccountConfigured, true
}

// SetTechnicalServiceAccountConfigured sets field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetTechnicalServiceAccountConfigured(v bool) {
	o.TechnicalServiceAccountConfigured = v
}

// GetTechnicalServiceAccountCanConnectToIoEvents returns the TechnicalServiceAccountCanConnectToIoEvents field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetTechnicalServiceAccountCanConnectToIoEvents() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TechnicalServiceAccountCanConnectToIoEvents
}

// GetTechnicalServiceAccountCanConnectToIoEventsOk returns a tuple with the TechnicalServiceAccountCanConnectToIoEvents field value
// and a boolean to check if the value has been set.
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetTechnicalServiceAccountCanConnectToIoEventsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnicalServiceAccountCanConnectToIoEvents, true
}

// SetTechnicalServiceAccountCanConnectToIoEvents sets field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetTechnicalServiceAccountCanConnectToIoEvents(v bool) {
	o.TechnicalServiceAccountCanConnectToIoEvents = v
}

// GetProviderIdConfigured returns the ProviderIdConfigured field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetProviderIdConfigured() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderIdConfigured
}

// GetProviderIdConfiguredOk returns a tuple with the ProviderIdConfigured field value
// and a boolean to check if the value has been set.
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetProviderIdConfiguredOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderIdConfigured, true
}

// SetProviderIdConfigured sets field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetProviderIdConfigured(v string) {
	o.ProviderIdConfigured = v
}

// GetProviderIdValid returns the ProviderIdValid field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetProviderIdValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ProviderIdValid
}

// GetProviderIdValidOk returns a tuple with the ProviderIdValid field value
// and a boolean to check if the value has been set.
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetProviderIdValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderIdValid, true
}

// SetProviderIdValid sets field value
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetProviderIdValid(v bool) {
	o.ProviderIdValid = v
}

func (o AdobeIoEventsClientConfigurationCheckResultInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdobeIoEventsClientConfigurationCheckResultInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["technical_service_account_configured"] = o.TechnicalServiceAccountConfigured
	toSerialize["technical_service_account_can_connect_to_io_events"] = o.TechnicalServiceAccountCanConnectToIoEvents
	toSerialize["provider_id_configured"] = o.ProviderIdConfigured
	toSerialize["provider_id_valid"] = o.ProviderIdValid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdobeIoEventsClientConfigurationCheckResultInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"technical_service_account_configured",
		"technical_service_account_can_connect_to_io_events",
		"provider_id_configured",
		"provider_id_valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdobeIoEventsClientConfigurationCheckResultInterface := _AdobeIoEventsClientConfigurationCheckResultInterface{}

	err = json.Unmarshal(data, &varAdobeIoEventsClientConfigurationCheckResultInterface)

	if err != nil {
		return err
	}

	*o = AdobeIoEventsClientConfigurationCheckResultInterface(varAdobeIoEventsClientConfigurationCheckResultInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "technical_service_account_configured")
		delete(additionalProperties, "technical_service_account_can_connect_to_io_events")
		delete(additionalProperties, "provider_id_configured")
		delete(additionalProperties, "provider_id_valid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *AdobeIoEventsClientConfigurationCheckResultInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableAdobeIoEventsClientConfigurationCheckResultInterface struct {
	value *AdobeIoEventsClientConfigurationCheckResultInterface
	isSet bool
}

func (v NullableAdobeIoEventsClientConfigurationCheckResultInterface) Get() *AdobeIoEventsClientConfigurationCheckResultInterface {
	return v.value
}

func (v *NullableAdobeIoEventsClientConfigurationCheckResultInterface) Set(val *AdobeIoEventsClientConfigurationCheckResultInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableAdobeIoEventsClientConfigurationCheckResultInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableAdobeIoEventsClientConfigurationCheckResultInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdobeIoEventsClientConfigurationCheckResultInterface(val *AdobeIoEventsClientConfigurationCheckResultInterface) *NullableAdobeIoEventsClientConfigurationCheckResultInterface {
	return &NullableAdobeIoEventsClientConfigurationCheckResultInterface{value: val, isSet: true}
}

func (v NullableAdobeIoEventsClientConfigurationCheckResultInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdobeIoEventsClientConfigurationCheckResultInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
