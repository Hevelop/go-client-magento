/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the RmaDataItemInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmaDataItemInterface{}

// RmaDataItemInterface Interface CategoryInterface
type RmaDataItemInterface struct {
	// Id
	EntityId int32 `json:"entity_id"`
	// RMA id
	RmaEntityId int32 `json:"rma_entity_id"`
	// Order_item_id
	OrderItemId int32 `json:"order_item_id"`
	// Qty_requested
	QtyRequested int32 `json:"qty_requested"`
	// Qty_authorized
	QtyAuthorized int32 `json:"qty_authorized"`
	// Qty_approved
	QtyApproved int32 `json:"qty_approved"`
	// Qty_returned
	QtyReturned int32 `json:"qty_returned"`
	// Reason
	Reason string `json:"reason"`
	// Condition
	Condition string `json:"condition"`
	// Resolution
	Resolution string `json:"resolution"`
	// Status
	Status string `json:"status"`
	// ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RmaDataItemInterface RmaDataItemInterface

// NewRmaDataItemInterface instantiates a new RmaDataItemInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmaDataItemInterface(entityId int32, rmaEntityId int32, orderItemId int32, qtyRequested int32, qtyAuthorized int32, qtyApproved int32, qtyReturned int32, reason string, condition string, resolution string, status string) *RmaDataItemInterface {
	this := RmaDataItemInterface{}
	this.EntityId = entityId
	this.RmaEntityId = rmaEntityId
	this.OrderItemId = orderItemId
	this.QtyRequested = qtyRequested
	this.QtyAuthorized = qtyAuthorized
	this.QtyApproved = qtyApproved
	this.QtyReturned = qtyReturned
	this.Reason = reason
	this.Condition = condition
	this.Resolution = resolution
	this.Status = status
	return &this
}

// NewRmaDataItemInterfaceWithDefaults instantiates a new RmaDataItemInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmaDataItemInterfaceWithDefaults() *RmaDataItemInterface {
	this := RmaDataItemInterface{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *RmaDataItemInterface) GetEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetEntityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *RmaDataItemInterface) SetEntityId(v int32) {
	o.EntityId = v
}

// GetRmaEntityId returns the RmaEntityId field value
func (o *RmaDataItemInterface) GetRmaEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RmaEntityId
}

// GetRmaEntityIdOk returns a tuple with the RmaEntityId field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetRmaEntityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RmaEntityId, true
}

// SetRmaEntityId sets field value
func (o *RmaDataItemInterface) SetRmaEntityId(v int32) {
	o.RmaEntityId = v
}

// GetOrderItemId returns the OrderItemId field value
func (o *RmaDataItemInterface) GetOrderItemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderItemId
}

// GetOrderItemIdOk returns a tuple with the OrderItemId field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetOrderItemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderItemId, true
}

// SetOrderItemId sets field value
func (o *RmaDataItemInterface) SetOrderItemId(v int32) {
	o.OrderItemId = v
}

// GetQtyRequested returns the QtyRequested field value
func (o *RmaDataItemInterface) GetQtyRequested() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QtyRequested
}

// GetQtyRequestedOk returns a tuple with the QtyRequested field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetQtyRequestedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QtyRequested, true
}

// SetQtyRequested sets field value
func (o *RmaDataItemInterface) SetQtyRequested(v int32) {
	o.QtyRequested = v
}

// GetQtyAuthorized returns the QtyAuthorized field value
func (o *RmaDataItemInterface) GetQtyAuthorized() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QtyAuthorized
}

// GetQtyAuthorizedOk returns a tuple with the QtyAuthorized field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetQtyAuthorizedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QtyAuthorized, true
}

// SetQtyAuthorized sets field value
func (o *RmaDataItemInterface) SetQtyAuthorized(v int32) {
	o.QtyAuthorized = v
}

// GetQtyApproved returns the QtyApproved field value
func (o *RmaDataItemInterface) GetQtyApproved() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QtyApproved
}

// GetQtyApprovedOk returns a tuple with the QtyApproved field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetQtyApprovedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QtyApproved, true
}

// SetQtyApproved sets field value
func (o *RmaDataItemInterface) SetQtyApproved(v int32) {
	o.QtyApproved = v
}

// GetQtyReturned returns the QtyReturned field value
func (o *RmaDataItemInterface) GetQtyReturned() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QtyReturned
}

// GetQtyReturnedOk returns a tuple with the QtyReturned field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetQtyReturnedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QtyReturned, true
}

// SetQtyReturned sets field value
func (o *RmaDataItemInterface) SetQtyReturned(v int32) {
	o.QtyReturned = v
}

// GetReason returns the Reason field value
func (o *RmaDataItemInterface) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *RmaDataItemInterface) SetReason(v string) {
	o.Reason = v
}

// GetCondition returns the Condition field value
func (o *RmaDataItemInterface) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *RmaDataItemInterface) SetCondition(v string) {
	o.Condition = v
}

// GetResolution returns the Resolution field value
func (o *RmaDataItemInterface) GetResolution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolution, true
}

// SetResolution sets field value
func (o *RmaDataItemInterface) SetResolution(v string) {
	o.Resolution = v
}

// GetStatus returns the Status field value
func (o *RmaDataItemInterface) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RmaDataItemInterface) SetStatus(v string) {
	o.Status = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *RmaDataItemInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaDataItemInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *RmaDataItemInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *RmaDataItemInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o RmaDataItemInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmaDataItemInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_id"] = o.EntityId
	toSerialize["rma_entity_id"] = o.RmaEntityId
	toSerialize["order_item_id"] = o.OrderItemId
	toSerialize["qty_requested"] = o.QtyRequested
	toSerialize["qty_authorized"] = o.QtyAuthorized
	toSerialize["qty_approved"] = o.QtyApproved
	toSerialize["qty_returned"] = o.QtyReturned
	toSerialize["reason"] = o.Reason
	toSerialize["condition"] = o.Condition
	toSerialize["resolution"] = o.Resolution
	toSerialize["status"] = o.Status
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RmaDataItemInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entity_id",
		"rma_entity_id",
		"order_item_id",
		"qty_requested",
		"qty_authorized",
		"qty_approved",
		"qty_returned",
		"reason",
		"condition",
		"resolution",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRmaDataItemInterface := _RmaDataItemInterface{}

	err = json.Unmarshal(data, &varRmaDataItemInterface)

	if err != nil {
		return err
	}

	*o = RmaDataItemInterface(varRmaDataItemInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entity_id")
		delete(additionalProperties, "rma_entity_id")
		delete(additionalProperties, "order_item_id")
		delete(additionalProperties, "qty_requested")
		delete(additionalProperties, "qty_authorized")
		delete(additionalProperties, "qty_approved")
		delete(additionalProperties, "qty_returned")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "condition")
		delete(additionalProperties, "resolution")
		delete(additionalProperties, "status")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *RmaDataItemInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *RmaDataItemInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableRmaDataItemInterface struct {
	value *RmaDataItemInterface
	isSet bool
}

func (v NullableRmaDataItemInterface) Get() *RmaDataItemInterface {
	return v.value
}

func (v *NullableRmaDataItemInterface) Set(val *RmaDataItemInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaDataItemInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaDataItemInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaDataItemInterface(val *RmaDataItemInterface) *NullableRmaDataItemInterface {
	return &NullableRmaDataItemInterface{value: val, isSet: true}
}

func (v NullableRmaDataItemInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaDataItemInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
