/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the ImportJsonApiDataSourceDataInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportJsonApiDataSourceDataInterface{}

// ImportJsonApiDataSourceDataInterface Import JSON source data interface.
type ImportJsonApiDataSourceDataInterface struct {
	// Entity
	Entity string `json:"entity"`
	// Behavior
	Behavior string `json:"behavior"`
	// Validation Strategy
	ValidationStrategy string `json:"validation_strategy"`
	// Allowed Error Count
	AllowedErrorCount string `json:"allowed_error_count"`
	//
	Items map[string]interface{} `json:"items"`
	// Import's Images File Directory
	ImportImagesFileDir *string `json:"import_images_file_dir,omitempty"`
	// Import content locale
	Locale               *string `json:"locale,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImportJsonApiDataSourceDataInterface ImportJsonApiDataSourceDataInterface

// NewImportJsonApiDataSourceDataInterface instantiates a new ImportJsonApiDataSourceDataInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportJsonApiDataSourceDataInterface(entity string, behavior string, validationStrategy string, allowedErrorCount string, items map[string]interface{}) *ImportJsonApiDataSourceDataInterface {
	this := ImportJsonApiDataSourceDataInterface{}
	this.Entity = entity
	this.Behavior = behavior
	this.ValidationStrategy = validationStrategy
	this.AllowedErrorCount = allowedErrorCount
	this.Items = items
	return &this
}

// NewImportJsonApiDataSourceDataInterfaceWithDefaults instantiates a new ImportJsonApiDataSourceDataInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportJsonApiDataSourceDataInterfaceWithDefaults() *ImportJsonApiDataSourceDataInterface {
	this := ImportJsonApiDataSourceDataInterface{}
	return &this
}

// GetEntity returns the Entity field value
func (o *ImportJsonApiDataSourceDataInterface) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *ImportJsonApiDataSourceDataInterface) SetEntity(v string) {
	o.Entity = v
}

// GetBehavior returns the Behavior field value
func (o *ImportJsonApiDataSourceDataInterface) GetBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Behavior, true
}

// SetBehavior sets field value
func (o *ImportJsonApiDataSourceDataInterface) SetBehavior(v string) {
	o.Behavior = v
}

// GetValidationStrategy returns the ValidationStrategy field value
func (o *ImportJsonApiDataSourceDataInterface) GetValidationStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidationStrategy
}

// GetValidationStrategyOk returns a tuple with the ValidationStrategy field value
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetValidationStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationStrategy, true
}

// SetValidationStrategy sets field value
func (o *ImportJsonApiDataSourceDataInterface) SetValidationStrategy(v string) {
	o.ValidationStrategy = v
}

// GetAllowedErrorCount returns the AllowedErrorCount field value
func (o *ImportJsonApiDataSourceDataInterface) GetAllowedErrorCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllowedErrorCount
}

// GetAllowedErrorCountOk returns a tuple with the AllowedErrorCount field value
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetAllowedErrorCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowedErrorCount, true
}

// SetAllowedErrorCount sets field value
func (o *ImportJsonApiDataSourceDataInterface) SetAllowedErrorCount(v string) {
	o.AllowedErrorCount = v
}

// GetItems returns the Items field value
func (o *ImportJsonApiDataSourceDataInterface) GetItems() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetItemsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ImportJsonApiDataSourceDataInterface) SetItems(v map[string]interface{}) {
	o.Items = v
}

// GetImportImagesFileDir returns the ImportImagesFileDir field value if set, zero value otherwise.
func (o *ImportJsonApiDataSourceDataInterface) GetImportImagesFileDir() string {
	if o == nil || IsNil(o.ImportImagesFileDir) {
		var ret string
		return ret
	}
	return *o.ImportImagesFileDir
}

// GetImportImagesFileDirOk returns a tuple with the ImportImagesFileDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetImportImagesFileDirOk() (*string, bool) {
	if o == nil || IsNil(o.ImportImagesFileDir) {
		return nil, false
	}
	return o.ImportImagesFileDir, true
}

// HasImportImagesFileDir returns a boolean if a field has been set.
func (o *ImportJsonApiDataSourceDataInterface) HasImportImagesFileDir() bool {
	if o != nil && !IsNil(o.ImportImagesFileDir) {
		return true
	}

	return false
}

// SetImportImagesFileDir gets a reference to the given string and assigns it to the ImportImagesFileDir field.
func (o *ImportJsonApiDataSourceDataInterface) SetImportImagesFileDir(v string) {
	o.ImportImagesFileDir = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ImportJsonApiDataSourceDataInterface) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportJsonApiDataSourceDataInterface) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ImportJsonApiDataSourceDataInterface) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ImportJsonApiDataSourceDataInterface) SetLocale(v string) {
	o.Locale = &v
}

func (o ImportJsonApiDataSourceDataInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportJsonApiDataSourceDataInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity"] = o.Entity
	toSerialize["behavior"] = o.Behavior
	toSerialize["validation_strategy"] = o.ValidationStrategy
	toSerialize["allowed_error_count"] = o.AllowedErrorCount
	toSerialize["items"] = o.Items
	if !IsNil(o.ImportImagesFileDir) {
		toSerialize["import_images_file_dir"] = o.ImportImagesFileDir
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportJsonApiDataSourceDataInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entity",
		"behavior",
		"validation_strategy",
		"allowed_error_count",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportJsonApiDataSourceDataInterface := _ImportJsonApiDataSourceDataInterface{}

	err = json.Unmarshal(data, &varImportJsonApiDataSourceDataInterface)

	if err != nil {
		return err
	}

	*o = ImportJsonApiDataSourceDataInterface(varImportJsonApiDataSourceDataInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entity")
		delete(additionalProperties, "behavior")
		delete(additionalProperties, "validation_strategy")
		delete(additionalProperties, "allowed_error_count")
		delete(additionalProperties, "items")
		delete(additionalProperties, "import_images_file_dir")
		delete(additionalProperties, "locale")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ImportJsonApiDataSourceDataInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ImportJsonApiDataSourceDataInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableImportJsonApiDataSourceDataInterface struct {
	value *ImportJsonApiDataSourceDataInterface
	isSet bool
}

func (v NullableImportJsonApiDataSourceDataInterface) Get() *ImportJsonApiDataSourceDataInterface {
	return v.value
}

func (v *NullableImportJsonApiDataSourceDataInterface) Set(val *ImportJsonApiDataSourceDataInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableImportJsonApiDataSourceDataInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableImportJsonApiDataSourceDataInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportJsonApiDataSourceDataInterface(val *ImportJsonApiDataSourceDataInterface) *NullableImportJsonApiDataSourceDataInterface {
	return &NullableImportJsonApiDataSourceDataInterface{value: val, isSet: true}
}

func (v NullableImportJsonApiDataSourceDataInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportJsonApiDataSourceDataInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
