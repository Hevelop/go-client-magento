/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the RmaDataRmaInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmaDataRmaInterface{}

// RmaDataRmaInterface Interface RmaInterface
type RmaDataRmaInterface struct {
	// Entity_id
	IncrementId string `json:"increment_id"`
	// Entity_id
	EntityId int32 `json:"entity_id"`
	// Order_id
	OrderId int32 `json:"order_id"`
	// Order_increment_id
	OrderIncrementId string `json:"order_increment_id"`
	// Store_id
	StoreId int32 `json:"store_id"`
	// Customer_id
	CustomerId int32 `json:"customer_id"`
	// Date_requested
	DateRequested string `json:"date_requested"`
	// Customer_custom_email
	CustomerCustomEmail string `json:"customer_custom_email"`
	// Items
	Items []RmaDataItemInterface `json:"items"`
	// Status
	Status string `json:"status"`
	// Comments list
	Comments []RmaDataCommentInterface `json:"comments"`
	// Tracks list
	Tracks []RmaDataTrackInterface `json:"tracks"`
	// ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\RmaInterface
	ExtensionAttributes map[string]interface{} `json:"extension_attributes,omitempty"`
	// Custom attributes values.
	CustomAttributes     []FrameworkAttributeInterface `json:"custom_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RmaDataRmaInterface RmaDataRmaInterface

// NewRmaDataRmaInterface instantiates a new RmaDataRmaInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmaDataRmaInterface(incrementId string, entityId int32, orderId int32, orderIncrementId string, storeId int32, customerId int32, dateRequested string, customerCustomEmail string, items []RmaDataItemInterface, status string, comments []RmaDataCommentInterface, tracks []RmaDataTrackInterface) *RmaDataRmaInterface {
	this := RmaDataRmaInterface{}
	this.IncrementId = incrementId
	this.EntityId = entityId
	this.OrderId = orderId
	this.OrderIncrementId = orderIncrementId
	this.StoreId = storeId
	this.CustomerId = customerId
	this.DateRequested = dateRequested
	this.CustomerCustomEmail = customerCustomEmail
	this.Items = items
	this.Status = status
	this.Comments = comments
	this.Tracks = tracks
	return &this
}

// NewRmaDataRmaInterfaceWithDefaults instantiates a new RmaDataRmaInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmaDataRmaInterfaceWithDefaults() *RmaDataRmaInterface {
	this := RmaDataRmaInterface{}
	return &this
}

// GetIncrementId returns the IncrementId field value
func (o *RmaDataRmaInterface) GetIncrementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncrementId
}

// GetIncrementIdOk returns a tuple with the IncrementId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetIncrementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncrementId, true
}

// SetIncrementId sets field value
func (o *RmaDataRmaInterface) SetIncrementId(v string) {
	o.IncrementId = v
}

// GetEntityId returns the EntityId field value
func (o *RmaDataRmaInterface) GetEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetEntityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *RmaDataRmaInterface) SetEntityId(v int32) {
	o.EntityId = v
}

// GetOrderId returns the OrderId field value
func (o *RmaDataRmaInterface) GetOrderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetOrderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *RmaDataRmaInterface) SetOrderId(v int32) {
	o.OrderId = v
}

// GetOrderIncrementId returns the OrderIncrementId field value
func (o *RmaDataRmaInterface) GetOrderIncrementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderIncrementId
}

// GetOrderIncrementIdOk returns a tuple with the OrderIncrementId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetOrderIncrementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderIncrementId, true
}

// SetOrderIncrementId sets field value
func (o *RmaDataRmaInterface) SetOrderIncrementId(v string) {
	o.OrderIncrementId = v
}

// GetStoreId returns the StoreId field value
func (o *RmaDataRmaInterface) GetStoreId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetStoreIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreId, true
}

// SetStoreId sets field value
func (o *RmaDataRmaInterface) SetStoreId(v int32) {
	o.StoreId = v
}

// GetCustomerId returns the CustomerId field value
func (o *RmaDataRmaInterface) GetCustomerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetCustomerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *RmaDataRmaInterface) SetCustomerId(v int32) {
	o.CustomerId = v
}

// GetDateRequested returns the DateRequested field value
func (o *RmaDataRmaInterface) GetDateRequested() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateRequested
}

// GetDateRequestedOk returns a tuple with the DateRequested field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetDateRequestedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateRequested, true
}

// SetDateRequested sets field value
func (o *RmaDataRmaInterface) SetDateRequested(v string) {
	o.DateRequested = v
}

// GetCustomerCustomEmail returns the CustomerCustomEmail field value
func (o *RmaDataRmaInterface) GetCustomerCustomEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerCustomEmail
}

// GetCustomerCustomEmailOk returns a tuple with the CustomerCustomEmail field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetCustomerCustomEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerCustomEmail, true
}

// SetCustomerCustomEmail sets field value
func (o *RmaDataRmaInterface) SetCustomerCustomEmail(v string) {
	o.CustomerCustomEmail = v
}

// GetItems returns the Items field value
func (o *RmaDataRmaInterface) GetItems() []RmaDataItemInterface {
	if o == nil {
		var ret []RmaDataItemInterface
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetItemsOk() ([]RmaDataItemInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *RmaDataRmaInterface) SetItems(v []RmaDataItemInterface) {
	o.Items = v
}

// GetStatus returns the Status field value
func (o *RmaDataRmaInterface) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RmaDataRmaInterface) SetStatus(v string) {
	o.Status = v
}

// GetComments returns the Comments field value
func (o *RmaDataRmaInterface) GetComments() []RmaDataCommentInterface {
	if o == nil {
		var ret []RmaDataCommentInterface
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetCommentsOk() ([]RmaDataCommentInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comments, true
}

// SetComments sets field value
func (o *RmaDataRmaInterface) SetComments(v []RmaDataCommentInterface) {
	o.Comments = v
}

// GetTracks returns the Tracks field value
func (o *RmaDataRmaInterface) GetTracks() []RmaDataTrackInterface {
	if o == nil {
		var ret []RmaDataTrackInterface
		return ret
	}

	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetTracksOk() ([]RmaDataTrackInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tracks, true
}

// SetTracks sets field value
func (o *RmaDataRmaInterface) SetTracks(v []RmaDataTrackInterface) {
	o.Tracks = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *RmaDataRmaInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *RmaDataRmaInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *RmaDataRmaInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *RmaDataRmaInterface) GetCustomAttributes() []FrameworkAttributeInterface {
	if o == nil || IsNil(o.CustomAttributes) {
		var ret []FrameworkAttributeInterface
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaDataRmaInterface) GetCustomAttributesOk() ([]FrameworkAttributeInterface, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *RmaDataRmaInterface) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []FrameworkAttributeInterface and assigns it to the CustomAttributes field.
func (o *RmaDataRmaInterface) SetCustomAttributes(v []FrameworkAttributeInterface) {
	o.CustomAttributes = v
}

func (o RmaDataRmaInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmaDataRmaInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["increment_id"] = o.IncrementId
	toSerialize["entity_id"] = o.EntityId
	toSerialize["order_id"] = o.OrderId
	toSerialize["order_increment_id"] = o.OrderIncrementId
	toSerialize["store_id"] = o.StoreId
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["date_requested"] = o.DateRequested
	toSerialize["customer_custom_email"] = o.CustomerCustomEmail
	toSerialize["items"] = o.Items
	toSerialize["status"] = o.Status
	toSerialize["comments"] = o.Comments
	toSerialize["tracks"] = o.Tracks
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.CustomAttributes) {
		toSerialize["custom_attributes"] = o.CustomAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RmaDataRmaInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"increment_id",
		"entity_id",
		"order_id",
		"order_increment_id",
		"store_id",
		"customer_id",
		"date_requested",
		"customer_custom_email",
		"items",
		"status",
		"comments",
		"tracks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRmaDataRmaInterface := _RmaDataRmaInterface{}

	err = json.Unmarshal(data, &varRmaDataRmaInterface)

	if err != nil {
		return err
	}

	*o = RmaDataRmaInterface(varRmaDataRmaInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "increment_id")
		delete(additionalProperties, "entity_id")
		delete(additionalProperties, "order_id")
		delete(additionalProperties, "order_increment_id")
		delete(additionalProperties, "store_id")
		delete(additionalProperties, "customer_id")
		delete(additionalProperties, "date_requested")
		delete(additionalProperties, "customer_custom_email")
		delete(additionalProperties, "items")
		delete(additionalProperties, "status")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "tracks")
		delete(additionalProperties, "extension_attributes")
		delete(additionalProperties, "custom_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *RmaDataRmaInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *RmaDataRmaInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableRmaDataRmaInterface struct {
	value *RmaDataRmaInterface
	isSet bool
}

func (v NullableRmaDataRmaInterface) Get() *RmaDataRmaInterface {
	return v.value
}

func (v *NullableRmaDataRmaInterface) Set(val *RmaDataRmaInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaDataRmaInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaDataRmaInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaDataRmaInterface(val *RmaDataRmaInterface) *NullableRmaDataRmaInterface {
	return &NullableRmaDataRmaInterface{value: val, isSet: true}
}

func (v NullableRmaDataRmaInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaDataRmaInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
