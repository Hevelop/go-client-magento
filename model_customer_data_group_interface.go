/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerDataGroupInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerDataGroupInterface{}

// CustomerDataGroupInterface Customer group interface.
type CustomerDataGroupInterface struct {
	// Id
	Id *int32 `json:"id,omitempty"`
	// Code
	Code string `json:"code"`
	// Tax class id
	TaxClassId int32 `json:"tax_class_id"`
	// Tax class name
	TaxClassName         *string                              `json:"tax_class_name,omitempty"`
	ExtensionAttributes  *CustomerDataGroupExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerDataGroupInterface CustomerDataGroupInterface

// NewCustomerDataGroupInterface instantiates a new CustomerDataGroupInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerDataGroupInterface(code string, taxClassId int32) *CustomerDataGroupInterface {
	this := CustomerDataGroupInterface{}
	this.Code = code
	this.TaxClassId = taxClassId
	return &this
}

// NewCustomerDataGroupInterfaceWithDefaults instantiates a new CustomerDataGroupInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerDataGroupInterfaceWithDefaults() *CustomerDataGroupInterface {
	this := CustomerDataGroupInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerDataGroupInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDataGroupInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerDataGroupInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CustomerDataGroupInterface) SetId(v int32) {
	o.Id = &v
}

// GetCode returns the Code field value
func (o *CustomerDataGroupInterface) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CustomerDataGroupInterface) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CustomerDataGroupInterface) SetCode(v string) {
	o.Code = v
}

// GetTaxClassId returns the TaxClassId field value
func (o *CustomerDataGroupInterface) GetTaxClassId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaxClassId
}

// GetTaxClassIdOk returns a tuple with the TaxClassId field value
// and a boolean to check if the value has been set.
func (o *CustomerDataGroupInterface) GetTaxClassIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxClassId, true
}

// SetTaxClassId sets field value
func (o *CustomerDataGroupInterface) SetTaxClassId(v int32) {
	o.TaxClassId = v
}

// GetTaxClassName returns the TaxClassName field value if set, zero value otherwise.
func (o *CustomerDataGroupInterface) GetTaxClassName() string {
	if o == nil || IsNil(o.TaxClassName) {
		var ret string
		return ret
	}
	return *o.TaxClassName
}

// GetTaxClassNameOk returns a tuple with the TaxClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDataGroupInterface) GetTaxClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.TaxClassName) {
		return nil, false
	}
	return o.TaxClassName, true
}

// HasTaxClassName returns a boolean if a field has been set.
func (o *CustomerDataGroupInterface) HasTaxClassName() bool {
	if o != nil && !IsNil(o.TaxClassName) {
		return true
	}

	return false
}

// SetTaxClassName gets a reference to the given string and assigns it to the TaxClassName field.
func (o *CustomerDataGroupInterface) SetTaxClassName(v string) {
	o.TaxClassName = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CustomerDataGroupInterface) GetExtensionAttributes() CustomerDataGroupExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret CustomerDataGroupExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDataGroupInterface) GetExtensionAttributesOk() (*CustomerDataGroupExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CustomerDataGroupInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given CustomerDataGroupExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *CustomerDataGroupInterface) SetExtensionAttributes(v CustomerDataGroupExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o CustomerDataGroupInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerDataGroupInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["code"] = o.Code
	toSerialize["tax_class_id"] = o.TaxClassId
	if !IsNil(o.TaxClassName) {
		toSerialize["tax_class_name"] = o.TaxClassName
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerDataGroupInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"tax_class_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerDataGroupInterface := _CustomerDataGroupInterface{}

	err = json.Unmarshal(data, &varCustomerDataGroupInterface)

	if err != nil {
		return err
	}

	*o = CustomerDataGroupInterface(varCustomerDataGroupInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "tax_class_id")
		delete(additionalProperties, "tax_class_name")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CustomerDataGroupInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CustomerDataGroupInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCustomerDataGroupInterface struct {
	value *CustomerDataGroupInterface
	isSet bool
}

func (v NullableCustomerDataGroupInterface) Get() *CustomerDataGroupInterface {
	return v.value
}

func (v *NullableCustomerDataGroupInterface) Set(val *CustomerDataGroupInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerDataGroupInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerDataGroupInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerDataGroupInterface(val *CustomerDataGroupInterface) *NullableCustomerDataGroupInterface {
	return &NullableCustomerDataGroupInterface{value: val, isSet: true}
}

func (v NullableCustomerDataGroupInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerDataGroupInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
