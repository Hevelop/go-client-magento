/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the GiftCardAccountDataGiftCardAccountInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiftCardAccountDataGiftCardAccountInterface{}

// GiftCardAccountDataGiftCardAccountInterface Gift Card Account data
type GiftCardAccountDataGiftCardAccountInterface struct {
	// Cards codes.
	GiftCards []string `json:"gift_cards,omitempty"`
	// Cards amount in quote currency.
	GiftCardsAmount float32 `json:"gift_cards_amount"`
	// Cards amount in base currency.
	BaseGiftCardsAmount float32 `json:"base_gift_cards_amount"`
	// Cards amount used in quote currency.
	GiftCardsAmountUsed float32 `json:"gift_cards_amount_used"`
	// Cards amount used in base currency.
	BaseGiftCardsAmountUsed float32 `json:"base_gift_cards_amount_used"`
	// ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GiftCardAccountDataGiftCardAccountInterface GiftCardAccountDataGiftCardAccountInterface

// NewGiftCardAccountDataGiftCardAccountInterface instantiates a new GiftCardAccountDataGiftCardAccountInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardAccountDataGiftCardAccountInterface(giftCardsAmount float32, baseGiftCardsAmount float32, giftCardsAmountUsed float32, baseGiftCardsAmountUsed float32) *GiftCardAccountDataGiftCardAccountInterface {
	this := GiftCardAccountDataGiftCardAccountInterface{}
	this.GiftCardsAmount = giftCardsAmount
	this.BaseGiftCardsAmount = baseGiftCardsAmount
	this.GiftCardsAmountUsed = giftCardsAmountUsed
	this.BaseGiftCardsAmountUsed = baseGiftCardsAmountUsed
	return &this
}

// NewGiftCardAccountDataGiftCardAccountInterfaceWithDefaults instantiates a new GiftCardAccountDataGiftCardAccountInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardAccountDataGiftCardAccountInterfaceWithDefaults() *GiftCardAccountDataGiftCardAccountInterface {
	this := GiftCardAccountDataGiftCardAccountInterface{}
	return &this
}

// GetGiftCards returns the GiftCards field value if set, zero value otherwise.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCards() []string {
	if o == nil || IsNil(o.GiftCards) {
		var ret []string
		return ret
	}
	return o.GiftCards
}

// GetGiftCardsOk returns a tuple with the GiftCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCardsOk() ([]string, bool) {
	if o == nil || IsNil(o.GiftCards) {
		return nil, false
	}
	return o.GiftCards, true
}

// HasGiftCards returns a boolean if a field has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) HasGiftCards() bool {
	if o != nil && !IsNil(o.GiftCards) {
		return true
	}

	return false
}

// SetGiftCards gets a reference to the given []string and assigns it to the GiftCards field.
func (o *GiftCardAccountDataGiftCardAccountInterface) SetGiftCards(v []string) {
	o.GiftCards = v
}

// GetGiftCardsAmount returns the GiftCardsAmount field value
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCardsAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GiftCardsAmount
}

// GetGiftCardsAmountOk returns a tuple with the GiftCardsAmount field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCardsAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GiftCardsAmount, true
}

// SetGiftCardsAmount sets field value
func (o *GiftCardAccountDataGiftCardAccountInterface) SetGiftCardsAmount(v float32) {
	o.GiftCardsAmount = v
}

// GetBaseGiftCardsAmount returns the BaseGiftCardsAmount field value
func (o *GiftCardAccountDataGiftCardAccountInterface) GetBaseGiftCardsAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseGiftCardsAmount
}

// GetBaseGiftCardsAmountOk returns a tuple with the BaseGiftCardsAmount field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetBaseGiftCardsAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseGiftCardsAmount, true
}

// SetBaseGiftCardsAmount sets field value
func (o *GiftCardAccountDataGiftCardAccountInterface) SetBaseGiftCardsAmount(v float32) {
	o.BaseGiftCardsAmount = v
}

// GetGiftCardsAmountUsed returns the GiftCardsAmountUsed field value
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCardsAmountUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GiftCardsAmountUsed
}

// GetGiftCardsAmountUsedOk returns a tuple with the GiftCardsAmountUsed field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetGiftCardsAmountUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GiftCardsAmountUsed, true
}

// SetGiftCardsAmountUsed sets field value
func (o *GiftCardAccountDataGiftCardAccountInterface) SetGiftCardsAmountUsed(v float32) {
	o.GiftCardsAmountUsed = v
}

// GetBaseGiftCardsAmountUsed returns the BaseGiftCardsAmountUsed field value
func (o *GiftCardAccountDataGiftCardAccountInterface) GetBaseGiftCardsAmountUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseGiftCardsAmountUsed
}

// GetBaseGiftCardsAmountUsedOk returns a tuple with the BaseGiftCardsAmountUsed field value
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetBaseGiftCardsAmountUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseGiftCardsAmountUsed, true
}

// SetBaseGiftCardsAmountUsed sets field value
func (o *GiftCardAccountDataGiftCardAccountInterface) SetBaseGiftCardsAmountUsed(v float32) {
	o.BaseGiftCardsAmountUsed = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *GiftCardAccountDataGiftCardAccountInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *GiftCardAccountDataGiftCardAccountInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o GiftCardAccountDataGiftCardAccountInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiftCardAccountDataGiftCardAccountInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GiftCards) {
		toSerialize["gift_cards"] = o.GiftCards
	}
	toSerialize["gift_cards_amount"] = o.GiftCardsAmount
	toSerialize["base_gift_cards_amount"] = o.BaseGiftCardsAmount
	toSerialize["gift_cards_amount_used"] = o.GiftCardsAmountUsed
	toSerialize["base_gift_cards_amount_used"] = o.BaseGiftCardsAmountUsed
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GiftCardAccountDataGiftCardAccountInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gift_cards_amount",
		"base_gift_cards_amount",
		"gift_cards_amount_used",
		"base_gift_cards_amount_used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGiftCardAccountDataGiftCardAccountInterface := _GiftCardAccountDataGiftCardAccountInterface{}

	err = json.Unmarshal(data, &varGiftCardAccountDataGiftCardAccountInterface)

	if err != nil {
		return err
	}

	*o = GiftCardAccountDataGiftCardAccountInterface(varGiftCardAccountDataGiftCardAccountInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "gift_cards")
		delete(additionalProperties, "gift_cards_amount")
		delete(additionalProperties, "base_gift_cards_amount")
		delete(additionalProperties, "gift_cards_amount_used")
		delete(additionalProperties, "base_gift_cards_amount_used")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *GiftCardAccountDataGiftCardAccountInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *GiftCardAccountDataGiftCardAccountInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableGiftCardAccountDataGiftCardAccountInterface struct {
	value *GiftCardAccountDataGiftCardAccountInterface
	isSet bool
}

func (v NullableGiftCardAccountDataGiftCardAccountInterface) Get() *GiftCardAccountDataGiftCardAccountInterface {
	return v.value
}

func (v *NullableGiftCardAccountDataGiftCardAccountInterface) Set(val *GiftCardAccountDataGiftCardAccountInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardAccountDataGiftCardAccountInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardAccountDataGiftCardAccountInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardAccountDataGiftCardAccountInterface(val *GiftCardAccountDataGiftCardAccountInterface) *NullableGiftCardAccountDataGiftCardAccountInterface {
	return &NullableGiftCardAccountDataGiftCardAccountInterface{value: val, isSet: true}
}

func (v NullableGiftCardAccountDataGiftCardAccountInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardAccountDataGiftCardAccountInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
