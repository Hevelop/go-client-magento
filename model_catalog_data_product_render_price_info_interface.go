/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataProductRenderPriceInfoInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataProductRenderPriceInfoInterface{}

// CatalogDataProductRenderPriceInfoInterface Price interface.
type CatalogDataProductRenderPriceInfoInterface struct {
	// Final price
	FinalPrice float32 `json:"final_price"`
	// Max price of a product
	MaxPrice float32 `json:"max_price"`
	// Max regular price
	MaxRegularPrice float32 `json:"max_regular_price"`
	// Minimal regular price
	MinimalRegularPrice float32 `json:"minimal_regular_price"`
	// Special price
	SpecialPrice float32 `json:"special_price"`
	// Minimal price
	MinimalPrice float32 `json:"minimal_price"`
	// Regular price
	RegularPrice         float32                                              `json:"regular_price"`
	FormattedPrices      CatalogDataProductRenderFormattedPriceInfoInterface  `json:"formatted_prices"`
	ExtensionAttributes  *CatalogDataProductRenderPriceInfoExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataProductRenderPriceInfoInterface CatalogDataProductRenderPriceInfoInterface

// NewCatalogDataProductRenderPriceInfoInterface instantiates a new CatalogDataProductRenderPriceInfoInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataProductRenderPriceInfoInterface(finalPrice float32, maxPrice float32, maxRegularPrice float32, minimalRegularPrice float32, specialPrice float32, minimalPrice float32, regularPrice float32, formattedPrices CatalogDataProductRenderFormattedPriceInfoInterface) *CatalogDataProductRenderPriceInfoInterface {
	this := CatalogDataProductRenderPriceInfoInterface{}
	this.FinalPrice = finalPrice
	this.MaxPrice = maxPrice
	this.MaxRegularPrice = maxRegularPrice
	this.MinimalRegularPrice = minimalRegularPrice
	this.SpecialPrice = specialPrice
	this.MinimalPrice = minimalPrice
	this.RegularPrice = regularPrice
	this.FormattedPrices = formattedPrices
	return &this
}

// NewCatalogDataProductRenderPriceInfoInterfaceWithDefaults instantiates a new CatalogDataProductRenderPriceInfoInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataProductRenderPriceInfoInterfaceWithDefaults() *CatalogDataProductRenderPriceInfoInterface {
	this := CatalogDataProductRenderPriceInfoInterface{}
	return &this
}

// GetFinalPrice returns the FinalPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetFinalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FinalPrice
}

// GetFinalPriceOk returns a tuple with the FinalPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetFinalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalPrice, true
}

// SetFinalPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetFinalPrice(v float32) {
	o.FinalPrice = v
}

// GetMaxPrice returns the MaxPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetMaxPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxPrice
}

// GetMaxPriceOk returns a tuple with the MaxPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetMaxPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPrice, true
}

// SetMaxPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetMaxPrice(v float32) {
	o.MaxPrice = v
}

// GetMaxRegularPrice returns the MaxRegularPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetMaxRegularPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxRegularPrice
}

// GetMaxRegularPriceOk returns a tuple with the MaxRegularPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetMaxRegularPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxRegularPrice, true
}

// SetMaxRegularPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetMaxRegularPrice(v float32) {
	o.MaxRegularPrice = v
}

// GetMinimalRegularPrice returns the MinimalRegularPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetMinimalRegularPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinimalRegularPrice
}

// GetMinimalRegularPriceOk returns a tuple with the MinimalRegularPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetMinimalRegularPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimalRegularPrice, true
}

// SetMinimalRegularPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetMinimalRegularPrice(v float32) {
	o.MinimalRegularPrice = v
}

// GetSpecialPrice returns the SpecialPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetSpecialPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpecialPrice
}

// GetSpecialPriceOk returns a tuple with the SpecialPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetSpecialPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecialPrice, true
}

// SetSpecialPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetSpecialPrice(v float32) {
	o.SpecialPrice = v
}

// GetMinimalPrice returns the MinimalPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetMinimalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinimalPrice
}

// GetMinimalPriceOk returns a tuple with the MinimalPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetMinimalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimalPrice, true
}

// SetMinimalPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetMinimalPrice(v float32) {
	o.MinimalPrice = v
}

// GetRegularPrice returns the RegularPrice field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetRegularPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RegularPrice
}

// GetRegularPriceOk returns a tuple with the RegularPrice field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetRegularPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegularPrice, true
}

// SetRegularPrice sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetRegularPrice(v float32) {
	o.RegularPrice = v
}

// GetFormattedPrices returns the FormattedPrices field value
func (o *CatalogDataProductRenderPriceInfoInterface) GetFormattedPrices() CatalogDataProductRenderFormattedPriceInfoInterface {
	if o == nil {
		var ret CatalogDataProductRenderFormattedPriceInfoInterface
		return ret
	}

	return o.FormattedPrices
}

// GetFormattedPricesOk returns a tuple with the FormattedPrices field value
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetFormattedPricesOk() (*CatalogDataProductRenderFormattedPriceInfoInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormattedPrices, true
}

// SetFormattedPrices sets field value
func (o *CatalogDataProductRenderPriceInfoInterface) SetFormattedPrices(v CatalogDataProductRenderFormattedPriceInfoInterface) {
	o.FormattedPrices = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataProductRenderPriceInfoInterface) GetExtensionAttributes() CatalogDataProductRenderPriceInfoExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret CatalogDataProductRenderPriceInfoExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) GetExtensionAttributesOk() (*CatalogDataProductRenderPriceInfoExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataProductRenderPriceInfoInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given CatalogDataProductRenderPriceInfoExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *CatalogDataProductRenderPriceInfoInterface) SetExtensionAttributes(v CatalogDataProductRenderPriceInfoExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o CatalogDataProductRenderPriceInfoInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataProductRenderPriceInfoInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["final_price"] = o.FinalPrice
	toSerialize["max_price"] = o.MaxPrice
	toSerialize["max_regular_price"] = o.MaxRegularPrice
	toSerialize["minimal_regular_price"] = o.MinimalRegularPrice
	toSerialize["special_price"] = o.SpecialPrice
	toSerialize["minimal_price"] = o.MinimalPrice
	toSerialize["regular_price"] = o.RegularPrice
	toSerialize["formatted_prices"] = o.FormattedPrices
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataProductRenderPriceInfoInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"final_price",
		"max_price",
		"max_regular_price",
		"minimal_regular_price",
		"special_price",
		"minimal_price",
		"regular_price",
		"formatted_prices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataProductRenderPriceInfoInterface := _CatalogDataProductRenderPriceInfoInterface{}

	err = json.Unmarshal(data, &varCatalogDataProductRenderPriceInfoInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataProductRenderPriceInfoInterface(varCatalogDataProductRenderPriceInfoInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "final_price")
		delete(additionalProperties, "max_price")
		delete(additionalProperties, "max_regular_price")
		delete(additionalProperties, "minimal_regular_price")
		delete(additionalProperties, "special_price")
		delete(additionalProperties, "minimal_price")
		delete(additionalProperties, "regular_price")
		delete(additionalProperties, "formatted_prices")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataProductRenderPriceInfoInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataProductRenderPriceInfoInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataProductRenderPriceInfoInterface struct {
	value *CatalogDataProductRenderPriceInfoInterface
	isSet bool
}

func (v NullableCatalogDataProductRenderPriceInfoInterface) Get() *CatalogDataProductRenderPriceInfoInterface {
	return v.value
}

func (v *NullableCatalogDataProductRenderPriceInfoInterface) Set(val *CatalogDataProductRenderPriceInfoInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataProductRenderPriceInfoInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataProductRenderPriceInfoInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataProductRenderPriceInfoInterface(val *CatalogDataProductRenderPriceInfoInterface) *NullableCatalogDataProductRenderPriceInfoInterface {
	return &NullableCatalogDataProductRenderPriceInfoInterface{value: val, isSet: true}
}

func (v NullableCatalogDataProductRenderPriceInfoInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataProductRenderPriceInfoInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
