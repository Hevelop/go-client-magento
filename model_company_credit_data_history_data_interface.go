/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyCreditDataHistoryDataInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyCreditDataHistoryDataInterface{}

// CompanyCreditDataHistoryDataInterface History data transfer object interface.
type CompanyCreditDataHistoryDataInterface struct {
	// ID.
	Id *int32 `json:"id,omitempty"`
	// Company credit id.
	CompanyCreditId *int32 `json:"company_credit_id,omitempty"`
	// User Id.
	UserId *int32 `json:"user_id,omitempty"`
	// User type: integration, admin, customer.
	UserType *int32 `json:"user_type,omitempty"`
	// Currency code of credit.
	CurrencyCredit *string `json:"currency_credit,omitempty"`
	// Currency code of operation.
	CurrencyOperation *string `json:"currency_operation,omitempty"`
	// Currency rate between credit and operation currencies.
	Rate float32 `json:"rate"`
	// Rate between credit and base currencies.
	RateCredit *float32 `json:"rate_credit,omitempty"`
	// Amount.
	Amount float32 `json:"amount"`
	// Outstanding balance.
	Balance float32 `json:"balance"`
	// Credit limit.
	CreditLimit float32 `json:"credit_limit"`
	// Available limit.
	AvailableLimit *float32 `json:"available_limit,omitempty"`
	// Type of operation.
	Type *int32 `json:"type,omitempty"`
	// Operation datetime.
	Datetime *string `json:"datetime,omitempty"`
	// Purchase Order number.
	PurchaseOrder *string `json:"purchase_order,omitempty"`
	// Custom Reference number.
	CustomReferenceNumber *string `json:"custom_reference_number,omitempty"`
	// Comment.
	Comment              *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyCreditDataHistoryDataInterface CompanyCreditDataHistoryDataInterface

// NewCompanyCreditDataHistoryDataInterface instantiates a new CompanyCreditDataHistoryDataInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyCreditDataHistoryDataInterface(rate float32, amount float32, balance float32, creditLimit float32) *CompanyCreditDataHistoryDataInterface {
	this := CompanyCreditDataHistoryDataInterface{}
	this.Rate = rate
	this.Amount = amount
	this.Balance = balance
	this.CreditLimit = creditLimit
	return &this
}

// NewCompanyCreditDataHistoryDataInterfaceWithDefaults instantiates a new CompanyCreditDataHistoryDataInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyCreditDataHistoryDataInterfaceWithDefaults() *CompanyCreditDataHistoryDataInterface {
	this := CompanyCreditDataHistoryDataInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyCreditDataHistoryDataInterface) SetId(v int32) {
	o.Id = &v
}

// GetCompanyCreditId returns the CompanyCreditId field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetCompanyCreditId() int32 {
	if o == nil || IsNil(o.CompanyCreditId) {
		var ret int32
		return ret
	}
	return *o.CompanyCreditId
}

// GetCompanyCreditIdOk returns a tuple with the CompanyCreditId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCompanyCreditIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompanyCreditId) {
		return nil, false
	}
	return o.CompanyCreditId, true
}

// HasCompanyCreditId returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasCompanyCreditId() bool {
	if o != nil && !IsNil(o.CompanyCreditId) {
		return true
	}

	return false
}

// SetCompanyCreditId gets a reference to the given int32 and assigns it to the CompanyCreditId field.
func (o *CompanyCreditDataHistoryDataInterface) SetCompanyCreditId(v int32) {
	o.CompanyCreditId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *CompanyCreditDataHistoryDataInterface) SetUserId(v int32) {
	o.UserId = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetUserType() int32 {
	if o == nil || IsNil(o.UserType) {
		var ret int32
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetUserTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given int32 and assigns it to the UserType field.
func (o *CompanyCreditDataHistoryDataInterface) SetUserType(v int32) {
	o.UserType = &v
}

// GetCurrencyCredit returns the CurrencyCredit field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetCurrencyCredit() string {
	if o == nil || IsNil(o.CurrencyCredit) {
		var ret string
		return ret
	}
	return *o.CurrencyCredit
}

// GetCurrencyCreditOk returns a tuple with the CurrencyCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCurrencyCreditOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCredit) {
		return nil, false
	}
	return o.CurrencyCredit, true
}

// HasCurrencyCredit returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasCurrencyCredit() bool {
	if o != nil && !IsNil(o.CurrencyCredit) {
		return true
	}

	return false
}

// SetCurrencyCredit gets a reference to the given string and assigns it to the CurrencyCredit field.
func (o *CompanyCreditDataHistoryDataInterface) SetCurrencyCredit(v string) {
	o.CurrencyCredit = &v
}

// GetCurrencyOperation returns the CurrencyOperation field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetCurrencyOperation() string {
	if o == nil || IsNil(o.CurrencyOperation) {
		var ret string
		return ret
	}
	return *o.CurrencyOperation
}

// GetCurrencyOperationOk returns a tuple with the CurrencyOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCurrencyOperationOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyOperation) {
		return nil, false
	}
	return o.CurrencyOperation, true
}

// HasCurrencyOperation returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasCurrencyOperation() bool {
	if o != nil && !IsNil(o.CurrencyOperation) {
		return true
	}

	return false
}

// SetCurrencyOperation gets a reference to the given string and assigns it to the CurrencyOperation field.
func (o *CompanyCreditDataHistoryDataInterface) SetCurrencyOperation(v string) {
	o.CurrencyOperation = &v
}

// GetRate returns the Rate field value
func (o *CompanyCreditDataHistoryDataInterface) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *CompanyCreditDataHistoryDataInterface) SetRate(v float32) {
	o.Rate = v
}

// GetRateCredit returns the RateCredit field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetRateCredit() float32 {
	if o == nil || IsNil(o.RateCredit) {
		var ret float32
		return ret
	}
	return *o.RateCredit
}

// GetRateCreditOk returns a tuple with the RateCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetRateCreditOk() (*float32, bool) {
	if o == nil || IsNil(o.RateCredit) {
		return nil, false
	}
	return o.RateCredit, true
}

// HasRateCredit returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasRateCredit() bool {
	if o != nil && !IsNil(o.RateCredit) {
		return true
	}

	return false
}

// SetRateCredit gets a reference to the given float32 and assigns it to the RateCredit field.
func (o *CompanyCreditDataHistoryDataInterface) SetRateCredit(v float32) {
	o.RateCredit = &v
}

// GetAmount returns the Amount field value
func (o *CompanyCreditDataHistoryDataInterface) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CompanyCreditDataHistoryDataInterface) SetAmount(v float32) {
	o.Amount = v
}

// GetBalance returns the Balance field value
func (o *CompanyCreditDataHistoryDataInterface) GetBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *CompanyCreditDataHistoryDataInterface) SetBalance(v float32) {
	o.Balance = v
}

// GetCreditLimit returns the CreditLimit field value
func (o *CompanyCreditDataHistoryDataInterface) GetCreditLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCreditLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditLimit, true
}

// SetCreditLimit sets field value
func (o *CompanyCreditDataHistoryDataInterface) SetCreditLimit(v float32) {
	o.CreditLimit = v
}

// GetAvailableLimit returns the AvailableLimit field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetAvailableLimit() float32 {
	if o == nil || IsNil(o.AvailableLimit) {
		var ret float32
		return ret
	}
	return *o.AvailableLimit
}

// GetAvailableLimitOk returns a tuple with the AvailableLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetAvailableLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.AvailableLimit) {
		return nil, false
	}
	return o.AvailableLimit, true
}

// HasAvailableLimit returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasAvailableLimit() bool {
	if o != nil && !IsNil(o.AvailableLimit) {
		return true
	}

	return false
}

// SetAvailableLimit gets a reference to the given float32 and assigns it to the AvailableLimit field.
func (o *CompanyCreditDataHistoryDataInterface) SetAvailableLimit(v float32) {
	o.AvailableLimit = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *CompanyCreditDataHistoryDataInterface) SetType(v int32) {
	o.Type = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetDatetime() string {
	if o == nil || IsNil(o.Datetime) {
		var ret string
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetDatetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given string and assigns it to the Datetime field.
func (o *CompanyCreditDataHistoryDataInterface) SetDatetime(v string) {
	o.Datetime = &v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetPurchaseOrder() string {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret string
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetPurchaseOrderOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given string and assigns it to the PurchaseOrder field.
func (o *CompanyCreditDataHistoryDataInterface) SetPurchaseOrder(v string) {
	o.PurchaseOrder = &v
}

// GetCustomReferenceNumber returns the CustomReferenceNumber field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetCustomReferenceNumber() string {
	if o == nil || IsNil(o.CustomReferenceNumber) {
		var ret string
		return ret
	}
	return *o.CustomReferenceNumber
}

// GetCustomReferenceNumberOk returns a tuple with the CustomReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCustomReferenceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CustomReferenceNumber) {
		return nil, false
	}
	return o.CustomReferenceNumber, true
}

// HasCustomReferenceNumber returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasCustomReferenceNumber() bool {
	if o != nil && !IsNil(o.CustomReferenceNumber) {
		return true
	}

	return false
}

// SetCustomReferenceNumber gets a reference to the given string and assigns it to the CustomReferenceNumber field.
func (o *CompanyCreditDataHistoryDataInterface) SetCustomReferenceNumber(v string) {
	o.CustomReferenceNumber = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CompanyCreditDataHistoryDataInterface) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCreditDataHistoryDataInterface) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CompanyCreditDataHistoryDataInterface) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CompanyCreditDataHistoryDataInterface) SetComment(v string) {
	o.Comment = &v
}

func (o CompanyCreditDataHistoryDataInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyCreditDataHistoryDataInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CompanyCreditId) {
		toSerialize["company_credit_id"] = o.CompanyCreditId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	if !IsNil(o.CurrencyCredit) {
		toSerialize["currency_credit"] = o.CurrencyCredit
	}
	if !IsNil(o.CurrencyOperation) {
		toSerialize["currency_operation"] = o.CurrencyOperation
	}
	toSerialize["rate"] = o.Rate
	if !IsNil(o.RateCredit) {
		toSerialize["rate_credit"] = o.RateCredit
	}
	toSerialize["amount"] = o.Amount
	toSerialize["balance"] = o.Balance
	toSerialize["credit_limit"] = o.CreditLimit
	if !IsNil(o.AvailableLimit) {
		toSerialize["available_limit"] = o.AvailableLimit
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchase_order"] = o.PurchaseOrder
	}
	if !IsNil(o.CustomReferenceNumber) {
		toSerialize["custom_reference_number"] = o.CustomReferenceNumber
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyCreditDataHistoryDataInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rate",
		"amount",
		"balance",
		"credit_limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyCreditDataHistoryDataInterface := _CompanyCreditDataHistoryDataInterface{}

	err = json.Unmarshal(data, &varCompanyCreditDataHistoryDataInterface)

	if err != nil {
		return err
	}

	*o = CompanyCreditDataHistoryDataInterface(varCompanyCreditDataHistoryDataInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "company_credit_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "user_type")
		delete(additionalProperties, "currency_credit")
		delete(additionalProperties, "currency_operation")
		delete(additionalProperties, "rate")
		delete(additionalProperties, "rate_credit")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "balance")
		delete(additionalProperties, "credit_limit")
		delete(additionalProperties, "available_limit")
		delete(additionalProperties, "type")
		delete(additionalProperties, "datetime")
		delete(additionalProperties, "purchase_order")
		delete(additionalProperties, "custom_reference_number")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CompanyCreditDataHistoryDataInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CompanyCreditDataHistoryDataInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCompanyCreditDataHistoryDataInterface struct {
	value *CompanyCreditDataHistoryDataInterface
	isSet bool
}

func (v NullableCompanyCreditDataHistoryDataInterface) Get() *CompanyCreditDataHistoryDataInterface {
	return v.value
}

func (v *NullableCompanyCreditDataHistoryDataInterface) Set(val *CompanyCreditDataHistoryDataInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyCreditDataHistoryDataInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyCreditDataHistoryDataInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyCreditDataHistoryDataInterface(val *CompanyCreditDataHistoryDataInterface) *NullableCompanyCreditDataHistoryDataInterface {
	return &NullableCompanyCreditDataHistoryDataInterface{value: val, isSet: true}
}

func (v NullableCompanyCreditDataHistoryDataInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyCreditDataHistoryDataInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
