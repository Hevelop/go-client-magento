/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the QuoteDataTotalsInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteDataTotalsInterface{}

// QuoteDataTotalsInterface Interface TotalsInterface
type QuoteDataTotalsInterface struct {
	// Grand total in quote currency
	GrandTotal *float32 `json:"grand_total,omitempty"`
	// Grand total in base currency
	BaseGrandTotal *float32 `json:"base_grand_total,omitempty"`
	// Subtotal in quote currency
	Subtotal *float32 `json:"subtotal,omitempty"`
	// Subtotal in base currency
	BaseSubtotal *float32 `json:"base_subtotal,omitempty"`
	// Discount amount in quote currency
	DiscountAmount *float32 `json:"discount_amount,omitempty"`
	// Discount amount in base currency
	BaseDiscountAmount *float32 `json:"base_discount_amount,omitempty"`
	// Subtotal in quote currency with applied discount
	SubtotalWithDiscount *float32 `json:"subtotal_with_discount,omitempty"`
	// Subtotal in base currency with applied discount
	BaseSubtotalWithDiscount *float32 `json:"base_subtotal_with_discount,omitempty"`
	// Shipping amount in quote currency
	ShippingAmount *float32 `json:"shipping_amount,omitempty"`
	// Shipping amount in base currency
	BaseShippingAmount *float32 `json:"base_shipping_amount,omitempty"`
	// Shipping discount amount in quote currency
	ShippingDiscountAmount *float32 `json:"shipping_discount_amount,omitempty"`
	// Shipping discount amount in base currency
	BaseShippingDiscountAmount *float32 `json:"base_shipping_discount_amount,omitempty"`
	// Tax amount in quote currency
	TaxAmount *float32 `json:"tax_amount,omitempty"`
	// Tax amount in base currency
	BaseTaxAmount *float32 `json:"base_tax_amount,omitempty"`
	// Item weee tax applied amount in quote currency.
	WeeeTaxAppliedAmount float32 `json:"weee_tax_applied_amount"`
	// Shipping tax amount in quote currency
	ShippingTaxAmount *float32 `json:"shipping_tax_amount,omitempty"`
	// Shipping tax amount in base currency
	BaseShippingTaxAmount *float32 `json:"base_shipping_tax_amount,omitempty"`
	// Subtotal including tax in quote currency
	SubtotalInclTax *float32 `json:"subtotal_incl_tax,omitempty"`
	// Subtotal including tax in base currency
	BaseSubtotalInclTax *float32 `json:"base_subtotal_incl_tax,omitempty"`
	// Shipping including tax in quote currency
	ShippingInclTax *float32 `json:"shipping_incl_tax,omitempty"`
	// Shipping including tax in base currency
	BaseShippingInclTax *float32 `json:"base_shipping_incl_tax,omitempty"`
	// Base currency code
	BaseCurrencyCode *string `json:"base_currency_code,omitempty"`
	// Quote currency code
	QuoteCurrencyCode *string `json:"quote_currency_code,omitempty"`
	// Applied coupon code
	CouponCode *string `json:"coupon_code,omitempty"`
	// Items qty
	ItemsQty *int32 `json:"items_qty,omitempty"`
	// Totals by items
	Items []QuoteDataTotalsItemInterface `json:"items,omitempty"`
	// Dynamically calculated totals
	TotalSegments        []QuoteDataTotalSegmentInterface   `json:"total_segments"`
	ExtensionAttributes  *QuoteDataTotalsExtensionInterface `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuoteDataTotalsInterface QuoteDataTotalsInterface

// NewQuoteDataTotalsInterface instantiates a new QuoteDataTotalsInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteDataTotalsInterface(weeeTaxAppliedAmount float32, totalSegments []QuoteDataTotalSegmentInterface) *QuoteDataTotalsInterface {
	this := QuoteDataTotalsInterface{}
	this.WeeeTaxAppliedAmount = weeeTaxAppliedAmount
	this.TotalSegments = totalSegments
	return &this
}

// NewQuoteDataTotalsInterfaceWithDefaults instantiates a new QuoteDataTotalsInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteDataTotalsInterfaceWithDefaults() *QuoteDataTotalsInterface {
	this := QuoteDataTotalsInterface{}
	return &this
}

// GetGrandTotal returns the GrandTotal field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetGrandTotal() float32 {
	if o == nil || IsNil(o.GrandTotal) {
		var ret float32
		return ret
	}
	return *o.GrandTotal
}

// GetGrandTotalOk returns a tuple with the GrandTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetGrandTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.GrandTotal) {
		return nil, false
	}
	return o.GrandTotal, true
}

// HasGrandTotal returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasGrandTotal() bool {
	if o != nil && !IsNil(o.GrandTotal) {
		return true
	}

	return false
}

// SetGrandTotal gets a reference to the given float32 and assigns it to the GrandTotal field.
func (o *QuoteDataTotalsInterface) SetGrandTotal(v float32) {
	o.GrandTotal = &v
}

// GetBaseGrandTotal returns the BaseGrandTotal field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseGrandTotal() float32 {
	if o == nil || IsNil(o.BaseGrandTotal) {
		var ret float32
		return ret
	}
	return *o.BaseGrandTotal
}

// GetBaseGrandTotalOk returns a tuple with the BaseGrandTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseGrandTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseGrandTotal) {
		return nil, false
	}
	return o.BaseGrandTotal, true
}

// HasBaseGrandTotal returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseGrandTotal() bool {
	if o != nil && !IsNil(o.BaseGrandTotal) {
		return true
	}

	return false
}

// SetBaseGrandTotal gets a reference to the given float32 and assigns it to the BaseGrandTotal field.
func (o *QuoteDataTotalsInterface) SetBaseGrandTotal(v float32) {
	o.BaseGrandTotal = &v
}

// GetSubtotal returns the Subtotal field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetSubtotal() float32 {
	if o == nil || IsNil(o.Subtotal) {
		var ret float32
		return ret
	}
	return *o.Subtotal
}

// GetSubtotalOk returns a tuple with the Subtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetSubtotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Subtotal) {
		return nil, false
	}
	return o.Subtotal, true
}

// HasSubtotal returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasSubtotal() bool {
	if o != nil && !IsNil(o.Subtotal) {
		return true
	}

	return false
}

// SetSubtotal gets a reference to the given float32 and assigns it to the Subtotal field.
func (o *QuoteDataTotalsInterface) SetSubtotal(v float32) {
	o.Subtotal = &v
}

// GetBaseSubtotal returns the BaseSubtotal field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseSubtotal() float32 {
	if o == nil || IsNil(o.BaseSubtotal) {
		var ret float32
		return ret
	}
	return *o.BaseSubtotal
}

// GetBaseSubtotalOk returns a tuple with the BaseSubtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseSubtotalOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseSubtotal) {
		return nil, false
	}
	return o.BaseSubtotal, true
}

// HasBaseSubtotal returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseSubtotal() bool {
	if o != nil && !IsNil(o.BaseSubtotal) {
		return true
	}

	return false
}

// SetBaseSubtotal gets a reference to the given float32 and assigns it to the BaseSubtotal field.
func (o *QuoteDataTotalsInterface) SetBaseSubtotal(v float32) {
	o.BaseSubtotal = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetDiscountAmount() float32 {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret float32
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given float32 and assigns it to the DiscountAmount field.
func (o *QuoteDataTotalsInterface) SetDiscountAmount(v float32) {
	o.DiscountAmount = &v
}

// GetBaseDiscountAmount returns the BaseDiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseDiscountAmount() float32 {
	if o == nil || IsNil(o.BaseDiscountAmount) {
		var ret float32
		return ret
	}
	return *o.BaseDiscountAmount
}

// GetBaseDiscountAmountOk returns a tuple with the BaseDiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseDiscountAmount) {
		return nil, false
	}
	return o.BaseDiscountAmount, true
}

// HasBaseDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseDiscountAmount() bool {
	if o != nil && !IsNil(o.BaseDiscountAmount) {
		return true
	}

	return false
}

// SetBaseDiscountAmount gets a reference to the given float32 and assigns it to the BaseDiscountAmount field.
func (o *QuoteDataTotalsInterface) SetBaseDiscountAmount(v float32) {
	o.BaseDiscountAmount = &v
}

// GetSubtotalWithDiscount returns the SubtotalWithDiscount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetSubtotalWithDiscount() float32 {
	if o == nil || IsNil(o.SubtotalWithDiscount) {
		var ret float32
		return ret
	}
	return *o.SubtotalWithDiscount
}

// GetSubtotalWithDiscountOk returns a tuple with the SubtotalWithDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetSubtotalWithDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.SubtotalWithDiscount) {
		return nil, false
	}
	return o.SubtotalWithDiscount, true
}

// HasSubtotalWithDiscount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasSubtotalWithDiscount() bool {
	if o != nil && !IsNil(o.SubtotalWithDiscount) {
		return true
	}

	return false
}

// SetSubtotalWithDiscount gets a reference to the given float32 and assigns it to the SubtotalWithDiscount field.
func (o *QuoteDataTotalsInterface) SetSubtotalWithDiscount(v float32) {
	o.SubtotalWithDiscount = &v
}

// GetBaseSubtotalWithDiscount returns the BaseSubtotalWithDiscount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseSubtotalWithDiscount() float32 {
	if o == nil || IsNil(o.BaseSubtotalWithDiscount) {
		var ret float32
		return ret
	}
	return *o.BaseSubtotalWithDiscount
}

// GetBaseSubtotalWithDiscountOk returns a tuple with the BaseSubtotalWithDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseSubtotalWithDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseSubtotalWithDiscount) {
		return nil, false
	}
	return o.BaseSubtotalWithDiscount, true
}

// HasBaseSubtotalWithDiscount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseSubtotalWithDiscount() bool {
	if o != nil && !IsNil(o.BaseSubtotalWithDiscount) {
		return true
	}

	return false
}

// SetBaseSubtotalWithDiscount gets a reference to the given float32 and assigns it to the BaseSubtotalWithDiscount field.
func (o *QuoteDataTotalsInterface) SetBaseSubtotalWithDiscount(v float32) {
	o.BaseSubtotalWithDiscount = &v
}

// GetShippingAmount returns the ShippingAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetShippingAmount() float32 {
	if o == nil || IsNil(o.ShippingAmount) {
		var ret float32
		return ret
	}
	return *o.ShippingAmount
}

// GetShippingAmountOk returns a tuple with the ShippingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetShippingAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingAmount) {
		return nil, false
	}
	return o.ShippingAmount, true
}

// HasShippingAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasShippingAmount() bool {
	if o != nil && !IsNil(o.ShippingAmount) {
		return true
	}

	return false
}

// SetShippingAmount gets a reference to the given float32 and assigns it to the ShippingAmount field.
func (o *QuoteDataTotalsInterface) SetShippingAmount(v float32) {
	o.ShippingAmount = &v
}

// GetBaseShippingAmount returns the BaseShippingAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseShippingAmount() float32 {
	if o == nil || IsNil(o.BaseShippingAmount) {
		var ret float32
		return ret
	}
	return *o.BaseShippingAmount
}

// GetBaseShippingAmountOk returns a tuple with the BaseShippingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseShippingAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseShippingAmount) {
		return nil, false
	}
	return o.BaseShippingAmount, true
}

// HasBaseShippingAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseShippingAmount() bool {
	if o != nil && !IsNil(o.BaseShippingAmount) {
		return true
	}

	return false
}

// SetBaseShippingAmount gets a reference to the given float32 and assigns it to the BaseShippingAmount field.
func (o *QuoteDataTotalsInterface) SetBaseShippingAmount(v float32) {
	o.BaseShippingAmount = &v
}

// GetShippingDiscountAmount returns the ShippingDiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetShippingDiscountAmount() float32 {
	if o == nil || IsNil(o.ShippingDiscountAmount) {
		var ret float32
		return ret
	}
	return *o.ShippingDiscountAmount
}

// GetShippingDiscountAmountOk returns a tuple with the ShippingDiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetShippingDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingDiscountAmount) {
		return nil, false
	}
	return o.ShippingDiscountAmount, true
}

// HasShippingDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasShippingDiscountAmount() bool {
	if o != nil && !IsNil(o.ShippingDiscountAmount) {
		return true
	}

	return false
}

// SetShippingDiscountAmount gets a reference to the given float32 and assigns it to the ShippingDiscountAmount field.
func (o *QuoteDataTotalsInterface) SetShippingDiscountAmount(v float32) {
	o.ShippingDiscountAmount = &v
}

// GetBaseShippingDiscountAmount returns the BaseShippingDiscountAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseShippingDiscountAmount() float32 {
	if o == nil || IsNil(o.BaseShippingDiscountAmount) {
		var ret float32
		return ret
	}
	return *o.BaseShippingDiscountAmount
}

// GetBaseShippingDiscountAmountOk returns a tuple with the BaseShippingDiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseShippingDiscountAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseShippingDiscountAmount) {
		return nil, false
	}
	return o.BaseShippingDiscountAmount, true
}

// HasBaseShippingDiscountAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseShippingDiscountAmount() bool {
	if o != nil && !IsNil(o.BaseShippingDiscountAmount) {
		return true
	}

	return false
}

// SetBaseShippingDiscountAmount gets a reference to the given float32 and assigns it to the BaseShippingDiscountAmount field.
func (o *QuoteDataTotalsInterface) SetBaseShippingDiscountAmount(v float32) {
	o.BaseShippingDiscountAmount = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetTaxAmount() float32 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret float32
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float32 and assigns it to the TaxAmount field.
func (o *QuoteDataTotalsInterface) SetTaxAmount(v float32) {
	o.TaxAmount = &v
}

// GetBaseTaxAmount returns the BaseTaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseTaxAmount() float32 {
	if o == nil || IsNil(o.BaseTaxAmount) {
		var ret float32
		return ret
	}
	return *o.BaseTaxAmount
}

// GetBaseTaxAmountOk returns a tuple with the BaseTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseTaxAmount) {
		return nil, false
	}
	return o.BaseTaxAmount, true
}

// HasBaseTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseTaxAmount() bool {
	if o != nil && !IsNil(o.BaseTaxAmount) {
		return true
	}

	return false
}

// SetBaseTaxAmount gets a reference to the given float32 and assigns it to the BaseTaxAmount field.
func (o *QuoteDataTotalsInterface) SetBaseTaxAmount(v float32) {
	o.BaseTaxAmount = &v
}

// GetWeeeTaxAppliedAmount returns the WeeeTaxAppliedAmount field value
func (o *QuoteDataTotalsInterface) GetWeeeTaxAppliedAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WeeeTaxAppliedAmount
}

// GetWeeeTaxAppliedAmountOk returns a tuple with the WeeeTaxAppliedAmount field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetWeeeTaxAppliedAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeeeTaxAppliedAmount, true
}

// SetWeeeTaxAppliedAmount sets field value
func (o *QuoteDataTotalsInterface) SetWeeeTaxAppliedAmount(v float32) {
	o.WeeeTaxAppliedAmount = v
}

// GetShippingTaxAmount returns the ShippingTaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetShippingTaxAmount() float32 {
	if o == nil || IsNil(o.ShippingTaxAmount) {
		var ret float32
		return ret
	}
	return *o.ShippingTaxAmount
}

// GetShippingTaxAmountOk returns a tuple with the ShippingTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetShippingTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingTaxAmount) {
		return nil, false
	}
	return o.ShippingTaxAmount, true
}

// HasShippingTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasShippingTaxAmount() bool {
	if o != nil && !IsNil(o.ShippingTaxAmount) {
		return true
	}

	return false
}

// SetShippingTaxAmount gets a reference to the given float32 and assigns it to the ShippingTaxAmount field.
func (o *QuoteDataTotalsInterface) SetShippingTaxAmount(v float32) {
	o.ShippingTaxAmount = &v
}

// GetBaseShippingTaxAmount returns the BaseShippingTaxAmount field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseShippingTaxAmount() float32 {
	if o == nil || IsNil(o.BaseShippingTaxAmount) {
		var ret float32
		return ret
	}
	return *o.BaseShippingTaxAmount
}

// GetBaseShippingTaxAmountOk returns a tuple with the BaseShippingTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseShippingTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseShippingTaxAmount) {
		return nil, false
	}
	return o.BaseShippingTaxAmount, true
}

// HasBaseShippingTaxAmount returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseShippingTaxAmount() bool {
	if o != nil && !IsNil(o.BaseShippingTaxAmount) {
		return true
	}

	return false
}

// SetBaseShippingTaxAmount gets a reference to the given float32 and assigns it to the BaseShippingTaxAmount field.
func (o *QuoteDataTotalsInterface) SetBaseShippingTaxAmount(v float32) {
	o.BaseShippingTaxAmount = &v
}

// GetSubtotalInclTax returns the SubtotalInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetSubtotalInclTax() float32 {
	if o == nil || IsNil(o.SubtotalInclTax) {
		var ret float32
		return ret
	}
	return *o.SubtotalInclTax
}

// GetSubtotalInclTaxOk returns a tuple with the SubtotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetSubtotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.SubtotalInclTax) {
		return nil, false
	}
	return o.SubtotalInclTax, true
}

// HasSubtotalInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasSubtotalInclTax() bool {
	if o != nil && !IsNil(o.SubtotalInclTax) {
		return true
	}

	return false
}

// SetSubtotalInclTax gets a reference to the given float32 and assigns it to the SubtotalInclTax field.
func (o *QuoteDataTotalsInterface) SetSubtotalInclTax(v float32) {
	o.SubtotalInclTax = &v
}

// GetBaseSubtotalInclTax returns the BaseSubtotalInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseSubtotalInclTax() float32 {
	if o == nil || IsNil(o.BaseSubtotalInclTax) {
		var ret float32
		return ret
	}
	return *o.BaseSubtotalInclTax
}

// GetBaseSubtotalInclTaxOk returns a tuple with the BaseSubtotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseSubtotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseSubtotalInclTax) {
		return nil, false
	}
	return o.BaseSubtotalInclTax, true
}

// HasBaseSubtotalInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseSubtotalInclTax() bool {
	if o != nil && !IsNil(o.BaseSubtotalInclTax) {
		return true
	}

	return false
}

// SetBaseSubtotalInclTax gets a reference to the given float32 and assigns it to the BaseSubtotalInclTax field.
func (o *QuoteDataTotalsInterface) SetBaseSubtotalInclTax(v float32) {
	o.BaseSubtotalInclTax = &v
}

// GetShippingInclTax returns the ShippingInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetShippingInclTax() float32 {
	if o == nil || IsNil(o.ShippingInclTax) {
		var ret float32
		return ret
	}
	return *o.ShippingInclTax
}

// GetShippingInclTaxOk returns a tuple with the ShippingInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetShippingInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingInclTax) {
		return nil, false
	}
	return o.ShippingInclTax, true
}

// HasShippingInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasShippingInclTax() bool {
	if o != nil && !IsNil(o.ShippingInclTax) {
		return true
	}

	return false
}

// SetShippingInclTax gets a reference to the given float32 and assigns it to the ShippingInclTax field.
func (o *QuoteDataTotalsInterface) SetShippingInclTax(v float32) {
	o.ShippingInclTax = &v
}

// GetBaseShippingInclTax returns the BaseShippingInclTax field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseShippingInclTax() float32 {
	if o == nil || IsNil(o.BaseShippingInclTax) {
		var ret float32
		return ret
	}
	return *o.BaseShippingInclTax
}

// GetBaseShippingInclTaxOk returns a tuple with the BaseShippingInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseShippingInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseShippingInclTax) {
		return nil, false
	}
	return o.BaseShippingInclTax, true
}

// HasBaseShippingInclTax returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseShippingInclTax() bool {
	if o != nil && !IsNil(o.BaseShippingInclTax) {
		return true
	}

	return false
}

// SetBaseShippingInclTax gets a reference to the given float32 and assigns it to the BaseShippingInclTax field.
func (o *QuoteDataTotalsInterface) SetBaseShippingInclTax(v float32) {
	o.BaseShippingInclTax = &v
}

// GetBaseCurrencyCode returns the BaseCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetBaseCurrencyCode() string {
	if o == nil || IsNil(o.BaseCurrencyCode) {
		var ret string
		return ret
	}
	return *o.BaseCurrencyCode
}

// GetBaseCurrencyCodeOk returns a tuple with the BaseCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetBaseCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseCurrencyCode) {
		return nil, false
	}
	return o.BaseCurrencyCode, true
}

// HasBaseCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasBaseCurrencyCode() bool {
	if o != nil && !IsNil(o.BaseCurrencyCode) {
		return true
	}

	return false
}

// SetBaseCurrencyCode gets a reference to the given string and assigns it to the BaseCurrencyCode field.
func (o *QuoteDataTotalsInterface) SetBaseCurrencyCode(v string) {
	o.BaseCurrencyCode = &v
}

// GetQuoteCurrencyCode returns the QuoteCurrencyCode field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetQuoteCurrencyCode() string {
	if o == nil || IsNil(o.QuoteCurrencyCode) {
		var ret string
		return ret
	}
	return *o.QuoteCurrencyCode
}

// GetQuoteCurrencyCodeOk returns a tuple with the QuoteCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetQuoteCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCurrencyCode) {
		return nil, false
	}
	return o.QuoteCurrencyCode, true
}

// HasQuoteCurrencyCode returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasQuoteCurrencyCode() bool {
	if o != nil && !IsNil(o.QuoteCurrencyCode) {
		return true
	}

	return false
}

// SetQuoteCurrencyCode gets a reference to the given string and assigns it to the QuoteCurrencyCode field.
func (o *QuoteDataTotalsInterface) SetQuoteCurrencyCode(v string) {
	o.QuoteCurrencyCode = &v
}

// GetCouponCode returns the CouponCode field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetCouponCode() string {
	if o == nil || IsNil(o.CouponCode) {
		var ret string
		return ret
	}
	return *o.CouponCode
}

// GetCouponCodeOk returns a tuple with the CouponCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetCouponCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CouponCode) {
		return nil, false
	}
	return o.CouponCode, true
}

// HasCouponCode returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasCouponCode() bool {
	if o != nil && !IsNil(o.CouponCode) {
		return true
	}

	return false
}

// SetCouponCode gets a reference to the given string and assigns it to the CouponCode field.
func (o *QuoteDataTotalsInterface) SetCouponCode(v string) {
	o.CouponCode = &v
}

// GetItemsQty returns the ItemsQty field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetItemsQty() int32 {
	if o == nil || IsNil(o.ItemsQty) {
		var ret int32
		return ret
	}
	return *o.ItemsQty
}

// GetItemsQtyOk returns a tuple with the ItemsQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetItemsQtyOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemsQty) {
		return nil, false
	}
	return o.ItemsQty, true
}

// HasItemsQty returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasItemsQty() bool {
	if o != nil && !IsNil(o.ItemsQty) {
		return true
	}

	return false
}

// SetItemsQty gets a reference to the given int32 and assigns it to the ItemsQty field.
func (o *QuoteDataTotalsInterface) SetItemsQty(v int32) {
	o.ItemsQty = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetItems() []QuoteDataTotalsItemInterface {
	if o == nil || IsNil(o.Items) {
		var ret []QuoteDataTotalsItemInterface
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetItemsOk() ([]QuoteDataTotalsItemInterface, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []QuoteDataTotalsItemInterface and assigns it to the Items field.
func (o *QuoteDataTotalsInterface) SetItems(v []QuoteDataTotalsItemInterface) {
	o.Items = v
}

// GetTotalSegments returns the TotalSegments field value
func (o *QuoteDataTotalsInterface) GetTotalSegments() []QuoteDataTotalSegmentInterface {
	if o == nil {
		var ret []QuoteDataTotalSegmentInterface
		return ret
	}

	return o.TotalSegments
}

// GetTotalSegmentsOk returns a tuple with the TotalSegments field value
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetTotalSegmentsOk() ([]QuoteDataTotalSegmentInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSegments, true
}

// SetTotalSegments sets field value
func (o *QuoteDataTotalsInterface) SetTotalSegments(v []QuoteDataTotalSegmentInterface) {
	o.TotalSegments = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *QuoteDataTotalsInterface) GetExtensionAttributes() QuoteDataTotalsExtensionInterface {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret QuoteDataTotalsExtensionInterface
		return ret
	}
	return *o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteDataTotalsInterface) GetExtensionAttributesOk() (*QuoteDataTotalsExtensionInterface, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *QuoteDataTotalsInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given QuoteDataTotalsExtensionInterface and assigns it to the ExtensionAttributes field.
func (o *QuoteDataTotalsInterface) SetExtensionAttributes(v QuoteDataTotalsExtensionInterface) {
	o.ExtensionAttributes = &v
}

func (o QuoteDataTotalsInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteDataTotalsInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GrandTotal) {
		toSerialize["grand_total"] = o.GrandTotal
	}
	if !IsNil(o.BaseGrandTotal) {
		toSerialize["base_grand_total"] = o.BaseGrandTotal
	}
	if !IsNil(o.Subtotal) {
		toSerialize["subtotal"] = o.Subtotal
	}
	if !IsNil(o.BaseSubtotal) {
		toSerialize["base_subtotal"] = o.BaseSubtotal
	}
	if !IsNil(o.DiscountAmount) {
		toSerialize["discount_amount"] = o.DiscountAmount
	}
	if !IsNil(o.BaseDiscountAmount) {
		toSerialize["base_discount_amount"] = o.BaseDiscountAmount
	}
	if !IsNil(o.SubtotalWithDiscount) {
		toSerialize["subtotal_with_discount"] = o.SubtotalWithDiscount
	}
	if !IsNil(o.BaseSubtotalWithDiscount) {
		toSerialize["base_subtotal_with_discount"] = o.BaseSubtotalWithDiscount
	}
	if !IsNil(o.ShippingAmount) {
		toSerialize["shipping_amount"] = o.ShippingAmount
	}
	if !IsNil(o.BaseShippingAmount) {
		toSerialize["base_shipping_amount"] = o.BaseShippingAmount
	}
	if !IsNil(o.ShippingDiscountAmount) {
		toSerialize["shipping_discount_amount"] = o.ShippingDiscountAmount
	}
	if !IsNil(o.BaseShippingDiscountAmount) {
		toSerialize["base_shipping_discount_amount"] = o.BaseShippingDiscountAmount
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["tax_amount"] = o.TaxAmount
	}
	if !IsNil(o.BaseTaxAmount) {
		toSerialize["base_tax_amount"] = o.BaseTaxAmount
	}
	toSerialize["weee_tax_applied_amount"] = o.WeeeTaxAppliedAmount
	if !IsNil(o.ShippingTaxAmount) {
		toSerialize["shipping_tax_amount"] = o.ShippingTaxAmount
	}
	if !IsNil(o.BaseShippingTaxAmount) {
		toSerialize["base_shipping_tax_amount"] = o.BaseShippingTaxAmount
	}
	if !IsNil(o.SubtotalInclTax) {
		toSerialize["subtotal_incl_tax"] = o.SubtotalInclTax
	}
	if !IsNil(o.BaseSubtotalInclTax) {
		toSerialize["base_subtotal_incl_tax"] = o.BaseSubtotalInclTax
	}
	if !IsNil(o.ShippingInclTax) {
		toSerialize["shipping_incl_tax"] = o.ShippingInclTax
	}
	if !IsNil(o.BaseShippingInclTax) {
		toSerialize["base_shipping_incl_tax"] = o.BaseShippingInclTax
	}
	if !IsNil(o.BaseCurrencyCode) {
		toSerialize["base_currency_code"] = o.BaseCurrencyCode
	}
	if !IsNil(o.QuoteCurrencyCode) {
		toSerialize["quote_currency_code"] = o.QuoteCurrencyCode
	}
	if !IsNil(o.CouponCode) {
		toSerialize["coupon_code"] = o.CouponCode
	}
	if !IsNil(o.ItemsQty) {
		toSerialize["items_qty"] = o.ItemsQty
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	toSerialize["total_segments"] = o.TotalSegments
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuoteDataTotalsInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"weee_tax_applied_amount",
		"total_segments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteDataTotalsInterface := _QuoteDataTotalsInterface{}

	err = json.Unmarshal(data, &varQuoteDataTotalsInterface)

	if err != nil {
		return err
	}

	*o = QuoteDataTotalsInterface(varQuoteDataTotalsInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "grand_total")
		delete(additionalProperties, "base_grand_total")
		delete(additionalProperties, "subtotal")
		delete(additionalProperties, "base_subtotal")
		delete(additionalProperties, "discount_amount")
		delete(additionalProperties, "base_discount_amount")
		delete(additionalProperties, "subtotal_with_discount")
		delete(additionalProperties, "base_subtotal_with_discount")
		delete(additionalProperties, "shipping_amount")
		delete(additionalProperties, "base_shipping_amount")
		delete(additionalProperties, "shipping_discount_amount")
		delete(additionalProperties, "base_shipping_discount_amount")
		delete(additionalProperties, "tax_amount")
		delete(additionalProperties, "base_tax_amount")
		delete(additionalProperties, "weee_tax_applied_amount")
		delete(additionalProperties, "shipping_tax_amount")
		delete(additionalProperties, "base_shipping_tax_amount")
		delete(additionalProperties, "subtotal_incl_tax")
		delete(additionalProperties, "base_subtotal_incl_tax")
		delete(additionalProperties, "shipping_incl_tax")
		delete(additionalProperties, "base_shipping_incl_tax")
		delete(additionalProperties, "base_currency_code")
		delete(additionalProperties, "quote_currency_code")
		delete(additionalProperties, "coupon_code")
		delete(additionalProperties, "items_qty")
		delete(additionalProperties, "items")
		delete(additionalProperties, "total_segments")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *QuoteDataTotalsInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *QuoteDataTotalsInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableQuoteDataTotalsInterface struct {
	value *QuoteDataTotalsInterface
	isSet bool
}

func (v NullableQuoteDataTotalsInterface) Get() *QuoteDataTotalsInterface {
	return v.value
}

func (v *NullableQuoteDataTotalsInterface) Set(val *QuoteDataTotalsInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteDataTotalsInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteDataTotalsInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteDataTotalsInterface(val *QuoteDataTotalsInterface) *NullableQuoteDataTotalsInterface {
	return &NullableQuoteDataTotalsInterface{value: val, isSet: true}
}

func (v NullableQuoteDataTotalsInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteDataTotalsInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
