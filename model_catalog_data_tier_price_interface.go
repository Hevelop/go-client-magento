/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogDataTierPriceInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogDataTierPriceInterface{}

// CatalogDataTierPriceInterface Tier price interface.
type CatalogDataTierPriceInterface struct {
	// Tier price.
	Price float32 `json:"price"`
	// Tier price type.
	PriceType string `json:"price_type"`
	// Website id.
	WebsiteId int32 `json:"website_id"`
	// SKU.
	Sku string `json:"sku"`
	// Customer group.
	CustomerGroup string `json:"customer_group"`
	// Quantity.
	Quantity float32 `json:"quantity"`
	// ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\TierPriceInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CatalogDataTierPriceInterface CatalogDataTierPriceInterface

// NewCatalogDataTierPriceInterface instantiates a new CatalogDataTierPriceInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogDataTierPriceInterface(price float32, priceType string, websiteId int32, sku string, customerGroup string, quantity float32) *CatalogDataTierPriceInterface {
	this := CatalogDataTierPriceInterface{}
	this.Price = price
	this.PriceType = priceType
	this.WebsiteId = websiteId
	this.Sku = sku
	this.CustomerGroup = customerGroup
	this.Quantity = quantity
	return &this
}

// NewCatalogDataTierPriceInterfaceWithDefaults instantiates a new CatalogDataTierPriceInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogDataTierPriceInterfaceWithDefaults() *CatalogDataTierPriceInterface {
	this := CatalogDataTierPriceInterface{}
	return &this
}

// GetPrice returns the Price field value
func (o *CatalogDataTierPriceInterface) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *CatalogDataTierPriceInterface) SetPrice(v float32) {
	o.Price = v
}

// GetPriceType returns the PriceType field value
func (o *CatalogDataTierPriceInterface) GetPriceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetPriceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *CatalogDataTierPriceInterface) SetPriceType(v string) {
	o.PriceType = v
}

// GetWebsiteId returns the WebsiteId field value
func (o *CatalogDataTierPriceInterface) GetWebsiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WebsiteId
}

// GetWebsiteIdOk returns a tuple with the WebsiteId field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetWebsiteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteId, true
}

// SetWebsiteId sets field value
func (o *CatalogDataTierPriceInterface) SetWebsiteId(v int32) {
	o.WebsiteId = v
}

// GetSku returns the Sku field value
func (o *CatalogDataTierPriceInterface) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *CatalogDataTierPriceInterface) SetSku(v string) {
	o.Sku = v
}

// GetCustomerGroup returns the CustomerGroup field value
func (o *CatalogDataTierPriceInterface) GetCustomerGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerGroup
}

// GetCustomerGroupOk returns a tuple with the CustomerGroup field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetCustomerGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerGroup, true
}

// SetCustomerGroup sets field value
func (o *CatalogDataTierPriceInterface) SetCustomerGroup(v string) {
	o.CustomerGroup = v
}

// GetQuantity returns the Quantity field value
func (o *CatalogDataTierPriceInterface) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *CatalogDataTierPriceInterface) SetQuantity(v float32) {
	o.Quantity = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CatalogDataTierPriceInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogDataTierPriceInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CatalogDataTierPriceInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CatalogDataTierPriceInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CatalogDataTierPriceInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogDataTierPriceInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	toSerialize["price_type"] = o.PriceType
	toSerialize["website_id"] = o.WebsiteId
	toSerialize["sku"] = o.Sku
	toSerialize["customer_group"] = o.CustomerGroup
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogDataTierPriceInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
		"price_type",
		"website_id",
		"sku",
		"customer_group",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogDataTierPriceInterface := _CatalogDataTierPriceInterface{}

	err = json.Unmarshal(data, &varCatalogDataTierPriceInterface)

	if err != nil {
		return err
	}

	*o = CatalogDataTierPriceInterface(varCatalogDataTierPriceInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "price")
		delete(additionalProperties, "price_type")
		delete(additionalProperties, "website_id")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "customer_group")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogDataTierPriceInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogDataTierPriceInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogDataTierPriceInterface struct {
	value *CatalogDataTierPriceInterface
	isSet bool
}

func (v NullableCatalogDataTierPriceInterface) Get() *CatalogDataTierPriceInterface {
	return v.value
}

func (v *NullableCatalogDataTierPriceInterface) Set(val *CatalogDataTierPriceInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogDataTierPriceInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogDataTierPriceInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogDataTierPriceInterface(val *CatalogDataTierPriceInterface) *NullableCatalogDataTierPriceInterface {
	return &NullableCatalogDataTierPriceInterface{value: val, isSet: true}
}

func (v NullableCatalogDataTierPriceInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogDataTierPriceInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
