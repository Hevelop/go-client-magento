/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogInventoryStockItemCriteriaInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogInventoryStockItemCriteriaInterface{}

// CatalogInventoryStockItemCriteriaInterface Interface StockItemCriteriaInterface
type CatalogInventoryStockItemCriteriaInterface struct {
	// Associated Mapper Interface name
	MapperInterfaceName string `json:"mapper_interface_name"`
	// Criteria objects added to current Composite Criteria
	CriteriaList []FrameworkCriteriaInterface `json:"criteria_list"`
	// List of filters
	Filters []string `json:"filters"`
	// Ordering criteria
	Orders []string `json:"orders"`
	// Limit
	Limit                []string `json:"limit"`
	AdditionalProperties map[string]interface{}
}

type _CatalogInventoryStockItemCriteriaInterface CatalogInventoryStockItemCriteriaInterface

// NewCatalogInventoryStockItemCriteriaInterface instantiates a new CatalogInventoryStockItemCriteriaInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogInventoryStockItemCriteriaInterface(mapperInterfaceName string, criteriaList []FrameworkCriteriaInterface, filters []string, orders []string, limit []string) *CatalogInventoryStockItemCriteriaInterface {
	this := CatalogInventoryStockItemCriteriaInterface{}
	this.MapperInterfaceName = mapperInterfaceName
	this.CriteriaList = criteriaList
	this.Filters = filters
	this.Orders = orders
	this.Limit = limit
	return &this
}

// NewCatalogInventoryStockItemCriteriaInterfaceWithDefaults instantiates a new CatalogInventoryStockItemCriteriaInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogInventoryStockItemCriteriaInterfaceWithDefaults() *CatalogInventoryStockItemCriteriaInterface {
	this := CatalogInventoryStockItemCriteriaInterface{}
	return &this
}

// GetMapperInterfaceName returns the MapperInterfaceName field value
func (o *CatalogInventoryStockItemCriteriaInterface) GetMapperInterfaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapperInterfaceName
}

// GetMapperInterfaceNameOk returns a tuple with the MapperInterfaceName field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryStockItemCriteriaInterface) GetMapperInterfaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapperInterfaceName, true
}

// SetMapperInterfaceName sets field value
func (o *CatalogInventoryStockItemCriteriaInterface) SetMapperInterfaceName(v string) {
	o.MapperInterfaceName = v
}

// GetCriteriaList returns the CriteriaList field value
func (o *CatalogInventoryStockItemCriteriaInterface) GetCriteriaList() []FrameworkCriteriaInterface {
	if o == nil {
		var ret []FrameworkCriteriaInterface
		return ret
	}

	return o.CriteriaList
}

// GetCriteriaListOk returns a tuple with the CriteriaList field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryStockItemCriteriaInterface) GetCriteriaListOk() ([]FrameworkCriteriaInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.CriteriaList, true
}

// SetCriteriaList sets field value
func (o *CatalogInventoryStockItemCriteriaInterface) SetCriteriaList(v []FrameworkCriteriaInterface) {
	o.CriteriaList = v
}

// GetFilters returns the Filters field value
func (o *CatalogInventoryStockItemCriteriaInterface) GetFilters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryStockItemCriteriaInterface) GetFiltersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *CatalogInventoryStockItemCriteriaInterface) SetFilters(v []string) {
	o.Filters = v
}

// GetOrders returns the Orders field value
func (o *CatalogInventoryStockItemCriteriaInterface) GetOrders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryStockItemCriteriaInterface) GetOrdersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Orders, true
}

// SetOrders sets field value
func (o *CatalogInventoryStockItemCriteriaInterface) SetOrders(v []string) {
	o.Orders = v
}

// GetLimit returns the Limit field value
func (o *CatalogInventoryStockItemCriteriaInterface) GetLimit() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *CatalogInventoryStockItemCriteriaInterface) GetLimitOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit, true
}

// SetLimit sets field value
func (o *CatalogInventoryStockItemCriteriaInterface) SetLimit(v []string) {
	o.Limit = v
}

func (o CatalogInventoryStockItemCriteriaInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogInventoryStockItemCriteriaInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mapper_interface_name"] = o.MapperInterfaceName
	toSerialize["criteria_list"] = o.CriteriaList
	toSerialize["filters"] = o.Filters
	toSerialize["orders"] = o.Orders
	toSerialize["limit"] = o.Limit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CatalogInventoryStockItemCriteriaInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mapper_interface_name",
		"criteria_list",
		"filters",
		"orders",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogInventoryStockItemCriteriaInterface := _CatalogInventoryStockItemCriteriaInterface{}

	err = json.Unmarshal(data, &varCatalogInventoryStockItemCriteriaInterface)

	if err != nil {
		return err
	}

	*o = CatalogInventoryStockItemCriteriaInterface(varCatalogInventoryStockItemCriteriaInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mapper_interface_name")
		delete(additionalProperties, "criteria_list")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "orders")
		delete(additionalProperties, "limit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CatalogInventoryStockItemCriteriaInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CatalogInventoryStockItemCriteriaInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCatalogInventoryStockItemCriteriaInterface struct {
	value *CatalogInventoryStockItemCriteriaInterface
	isSet bool
}

func (v NullableCatalogInventoryStockItemCriteriaInterface) Get() *CatalogInventoryStockItemCriteriaInterface {
	return v.value
}

func (v *NullableCatalogInventoryStockItemCriteriaInterface) Set(val *CatalogInventoryStockItemCriteriaInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogInventoryStockItemCriteriaInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogInventoryStockItemCriteriaInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogInventoryStockItemCriteriaInterface(val *CatalogInventoryStockItemCriteriaInterface) *NullableCatalogInventoryStockItemCriteriaInterface {
	return &NullableCatalogInventoryStockItemCriteriaInterface{value: val, isSet: true}
}

func (v NullableCatalogInventoryStockItemCriteriaInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogInventoryStockItemCriteriaInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
