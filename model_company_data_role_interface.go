/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyDataRoleInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyDataRoleInterface{}

// CompanyDataRoleInterface Role data transfer object interface.
type CompanyDataRoleInterface struct {
	// Role id.
	Id *int32 `json:"id,omitempty"`
	// Role name.
	RoleName *string `json:"role_name,omitempty"`
	// Permissions.
	Permissions []CompanyDataPermissionInterface `json:"permissions"`
	// Company id.
	CompanyId *int32 `json:"company_id,omitempty"`
	// ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\RoleInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyDataRoleInterface CompanyDataRoleInterface

// NewCompanyDataRoleInterface instantiates a new CompanyDataRoleInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDataRoleInterface(permissions []CompanyDataPermissionInterface) *CompanyDataRoleInterface {
	this := CompanyDataRoleInterface{}
	this.Permissions = permissions
	return &this
}

// NewCompanyDataRoleInterfaceWithDefaults instantiates a new CompanyDataRoleInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDataRoleInterfaceWithDefaults() *CompanyDataRoleInterface {
	this := CompanyDataRoleInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyDataRoleInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataRoleInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyDataRoleInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyDataRoleInterface) SetId(v int32) {
	o.Id = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *CompanyDataRoleInterface) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataRoleInterface) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *CompanyDataRoleInterface) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *CompanyDataRoleInterface) SetRoleName(v string) {
	o.RoleName = &v
}

// GetPermissions returns the Permissions field value
func (o *CompanyDataRoleInterface) GetPermissions() []CompanyDataPermissionInterface {
	if o == nil {
		var ret []CompanyDataPermissionInterface
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *CompanyDataRoleInterface) GetPermissionsOk() ([]CompanyDataPermissionInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *CompanyDataRoleInterface) SetPermissions(v []CompanyDataPermissionInterface) {
	o.Permissions = v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *CompanyDataRoleInterface) GetCompanyId() int32 {
	if o == nil || IsNil(o.CompanyId) {
		var ret int32
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataRoleInterface) GetCompanyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *CompanyDataRoleInterface) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given int32 and assigns it to the CompanyId field.
func (o *CompanyDataRoleInterface) SetCompanyId(v int32) {
	o.CompanyId = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *CompanyDataRoleInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDataRoleInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *CompanyDataRoleInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *CompanyDataRoleInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o CompanyDataRoleInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyDataRoleInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RoleName) {
		toSerialize["role_name"] = o.RoleName
	}
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyDataRoleInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyDataRoleInterface := _CompanyDataRoleInterface{}

	err = json.Unmarshal(data, &varCompanyDataRoleInterface)

	if err != nil {
		return err
	}

	*o = CompanyDataRoleInterface(varCompanyDataRoleInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "role_name")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "company_id")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CompanyDataRoleInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *CompanyDataRoleInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableCompanyDataRoleInterface struct {
	value *CompanyDataRoleInterface
	isSet bool
}

func (v NullableCompanyDataRoleInterface) Get() *CompanyDataRoleInterface {
	return v.value
}

func (v *NullableCompanyDataRoleInterface) Set(val *CompanyDataRoleInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDataRoleInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDataRoleInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDataRoleInterface(val *CompanyDataRoleInterface) *NullableCompanyDataRoleInterface {
	return &NullableCompanyDataRoleInterface{value: val, isSet: true}
}

func (v NullableCompanyDataRoleInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDataRoleInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
