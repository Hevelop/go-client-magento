/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the VaultDataPaymentTokenInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultDataPaymentTokenInterface{}

// VaultDataPaymentTokenInterface Gateway vault payment token interface.
type VaultDataPaymentTokenInterface struct {
	// Entity ID.
	EntityId *int32 `json:"entity_id,omitempty"`
	// Customer ID.
	CustomerId *int32 `json:"customer_id,omitempty"`
	// Public hash
	PublicHash string `json:"public_hash"`
	// Payment method code
	PaymentMethodCode string `json:"payment_method_code"`
	// Type
	Type string `json:"type"`
	// Token creation timestamp
	CreatedAt *string `json:"created_at,omitempty"`
	// Token expiration timestamp
	ExpiresAt *string `json:"expires_at,omitempty"`
	// Gateway token ID
	GatewayToken string `json:"gateway_token"`
	// Token details
	TokenDetails string `json:"token_details"`
	// Is active.
	IsActive bool `json:"is_active"`
	// Is visible.
	IsVisible bool `json:"is_visible"`
	// website id.
	WebsiteId            int32 `json:"website_id"`
	AdditionalProperties map[string]interface{}
}

type _VaultDataPaymentTokenInterface VaultDataPaymentTokenInterface

// NewVaultDataPaymentTokenInterface instantiates a new VaultDataPaymentTokenInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultDataPaymentTokenInterface(publicHash string, paymentMethodCode string, type_ string, gatewayToken string, tokenDetails string, isActive bool, isVisible bool, websiteId int32) *VaultDataPaymentTokenInterface {
	this := VaultDataPaymentTokenInterface{}
	this.PublicHash = publicHash
	this.PaymentMethodCode = paymentMethodCode
	this.Type = type_
	this.GatewayToken = gatewayToken
	this.TokenDetails = tokenDetails
	this.IsActive = isActive
	this.IsVisible = isVisible
	this.WebsiteId = websiteId
	return &this
}

// NewVaultDataPaymentTokenInterfaceWithDefaults instantiates a new VaultDataPaymentTokenInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultDataPaymentTokenInterfaceWithDefaults() *VaultDataPaymentTokenInterface {
	this := VaultDataPaymentTokenInterface{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *VaultDataPaymentTokenInterface) GetEntityId() int32 {
	if o == nil || IsNil(o.EntityId) {
		var ret int32
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetEntityIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *VaultDataPaymentTokenInterface) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given int32 and assigns it to the EntityId field.
func (o *VaultDataPaymentTokenInterface) SetEntityId(v int32) {
	o.EntityId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *VaultDataPaymentTokenInterface) GetCustomerId() int32 {
	if o == nil || IsNil(o.CustomerId) {
		var ret int32
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetCustomerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *VaultDataPaymentTokenInterface) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given int32 and assigns it to the CustomerId field.
func (o *VaultDataPaymentTokenInterface) SetCustomerId(v int32) {
	o.CustomerId = &v
}

// GetPublicHash returns the PublicHash field value
func (o *VaultDataPaymentTokenInterface) GetPublicHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicHash
}

// GetPublicHashOk returns a tuple with the PublicHash field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetPublicHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicHash, true
}

// SetPublicHash sets field value
func (o *VaultDataPaymentTokenInterface) SetPublicHash(v string) {
	o.PublicHash = v
}

// GetPaymentMethodCode returns the PaymentMethodCode field value
func (o *VaultDataPaymentTokenInterface) GetPaymentMethodCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodCode
}

// GetPaymentMethodCodeOk returns a tuple with the PaymentMethodCode field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetPaymentMethodCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodCode, true
}

// SetPaymentMethodCode sets field value
func (o *VaultDataPaymentTokenInterface) SetPaymentMethodCode(v string) {
	o.PaymentMethodCode = v
}

// GetType returns the Type field value
func (o *VaultDataPaymentTokenInterface) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VaultDataPaymentTokenInterface) SetType(v string) {
	o.Type = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *VaultDataPaymentTokenInterface) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *VaultDataPaymentTokenInterface) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *VaultDataPaymentTokenInterface) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *VaultDataPaymentTokenInterface) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *VaultDataPaymentTokenInterface) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *VaultDataPaymentTokenInterface) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetGatewayToken returns the GatewayToken field value
func (o *VaultDataPaymentTokenInterface) GetGatewayToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GatewayToken
}

// GetGatewayTokenOk returns a tuple with the GatewayToken field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetGatewayTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GatewayToken, true
}

// SetGatewayToken sets field value
func (o *VaultDataPaymentTokenInterface) SetGatewayToken(v string) {
	o.GatewayToken = v
}

// GetTokenDetails returns the TokenDetails field value
func (o *VaultDataPaymentTokenInterface) GetTokenDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenDetails
}

// GetTokenDetailsOk returns a tuple with the TokenDetails field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetTokenDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenDetails, true
}

// SetTokenDetails sets field value
func (o *VaultDataPaymentTokenInterface) SetTokenDetails(v string) {
	o.TokenDetails = v
}

// GetIsActive returns the IsActive field value
func (o *VaultDataPaymentTokenInterface) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *VaultDataPaymentTokenInterface) SetIsActive(v bool) {
	o.IsActive = v
}

// GetIsVisible returns the IsVisible field value
func (o *VaultDataPaymentTokenInterface) GetIsVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetIsVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVisible, true
}

// SetIsVisible sets field value
func (o *VaultDataPaymentTokenInterface) SetIsVisible(v bool) {
	o.IsVisible = v
}

// GetWebsiteId returns the WebsiteId field value
func (o *VaultDataPaymentTokenInterface) GetWebsiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WebsiteId
}

// GetWebsiteIdOk returns a tuple with the WebsiteId field value
// and a boolean to check if the value has been set.
func (o *VaultDataPaymentTokenInterface) GetWebsiteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteId, true
}

// SetWebsiteId sets field value
func (o *VaultDataPaymentTokenInterface) SetWebsiteId(v int32) {
	o.WebsiteId = v
}

func (o VaultDataPaymentTokenInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultDataPaymentTokenInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityId) {
		toSerialize["entity_id"] = o.EntityId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	toSerialize["public_hash"] = o.PublicHash
	toSerialize["payment_method_code"] = o.PaymentMethodCode
	toSerialize["type"] = o.Type
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	toSerialize["gateway_token"] = o.GatewayToken
	toSerialize["token_details"] = o.TokenDetails
	toSerialize["is_active"] = o.IsActive
	toSerialize["is_visible"] = o.IsVisible
	toSerialize["website_id"] = o.WebsiteId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VaultDataPaymentTokenInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public_hash",
		"payment_method_code",
		"type",
		"gateway_token",
		"token_details",
		"is_active",
		"is_visible",
		"website_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVaultDataPaymentTokenInterface := _VaultDataPaymentTokenInterface{}

	err = json.Unmarshal(data, &varVaultDataPaymentTokenInterface)

	if err != nil {
		return err
	}

	*o = VaultDataPaymentTokenInterface(varVaultDataPaymentTokenInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entity_id")
		delete(additionalProperties, "customer_id")
		delete(additionalProperties, "public_hash")
		delete(additionalProperties, "payment_method_code")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "gateway_token")
		delete(additionalProperties, "token_details")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_visible")
		delete(additionalProperties, "website_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *VaultDataPaymentTokenInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *VaultDataPaymentTokenInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableVaultDataPaymentTokenInterface struct {
	value *VaultDataPaymentTokenInterface
	isSet bool
}

func (v NullableVaultDataPaymentTokenInterface) Get() *VaultDataPaymentTokenInterface {
	return v.value
}

func (v *NullableVaultDataPaymentTokenInterface) Set(val *VaultDataPaymentTokenInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultDataPaymentTokenInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultDataPaymentTokenInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultDataPaymentTokenInterface(val *VaultDataPaymentTokenInterface) *NullableVaultDataPaymentTokenInterface {
	return &NullableVaultDataPaymentTokenInterface{value: val, isSet: true}
}

func (v NullableVaultDataPaymentTokenInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultDataPaymentTokenInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
