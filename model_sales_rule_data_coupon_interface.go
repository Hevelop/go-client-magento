/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the SalesRuleDataCouponInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesRuleDataCouponInterface{}

// SalesRuleDataCouponInterface Interface CouponInterface
type SalesRuleDataCouponInterface struct {
	// Coupon id
	CouponId *int32 `json:"coupon_id,omitempty"`
	// The id of the rule associated with the coupon
	RuleId int32 `json:"rule_id"`
	// Coupon code
	Code *string `json:"code,omitempty"`
	// Usage limit
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	// Usage limit per customer
	UsagePerCustomer *int32 `json:"usage_per_customer,omitempty"`
	// The number of times the coupon has been used
	TimesUsed int32 `json:"times_used"`
	// Expiration date
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// The coupon is primary coupon for the rule that it's associated with
	IsPrimary bool `json:"is_primary"`
	// When the coupon is created
	CreatedAt *string `json:"created_at,omitempty"`
	// Of coupon
	Type *int32 `json:"type,omitempty"`
	// ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SalesRuleDataCouponInterface SalesRuleDataCouponInterface

// NewSalesRuleDataCouponInterface instantiates a new SalesRuleDataCouponInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesRuleDataCouponInterface(ruleId int32, timesUsed int32, isPrimary bool) *SalesRuleDataCouponInterface {
	this := SalesRuleDataCouponInterface{}
	this.RuleId = ruleId
	this.TimesUsed = timesUsed
	this.IsPrimary = isPrimary
	return &this
}

// NewSalesRuleDataCouponInterfaceWithDefaults instantiates a new SalesRuleDataCouponInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesRuleDataCouponInterfaceWithDefaults() *SalesRuleDataCouponInterface {
	this := SalesRuleDataCouponInterface{}
	return &this
}

// GetCouponId returns the CouponId field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetCouponId() int32 {
	if o == nil || IsNil(o.CouponId) {
		var ret int32
		return ret
	}
	return *o.CouponId
}

// GetCouponIdOk returns a tuple with the CouponId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetCouponIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CouponId) {
		return nil, false
	}
	return o.CouponId, true
}

// HasCouponId returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasCouponId() bool {
	if o != nil && !IsNil(o.CouponId) {
		return true
	}

	return false
}

// SetCouponId gets a reference to the given int32 and assigns it to the CouponId field.
func (o *SalesRuleDataCouponInterface) SetCouponId(v int32) {
	o.CouponId = &v
}

// GetRuleId returns the RuleId field value
func (o *SalesRuleDataCouponInterface) GetRuleId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetRuleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *SalesRuleDataCouponInterface) SetRuleId(v int32) {
	o.RuleId = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SalesRuleDataCouponInterface) SetCode(v string) {
	o.Code = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *SalesRuleDataCouponInterface) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsagePerCustomer returns the UsagePerCustomer field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetUsagePerCustomer() int32 {
	if o == nil || IsNil(o.UsagePerCustomer) {
		var ret int32
		return ret
	}
	return *o.UsagePerCustomer
}

// GetUsagePerCustomerOk returns a tuple with the UsagePerCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetUsagePerCustomerOk() (*int32, bool) {
	if o == nil || IsNil(o.UsagePerCustomer) {
		return nil, false
	}
	return o.UsagePerCustomer, true
}

// HasUsagePerCustomer returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasUsagePerCustomer() bool {
	if o != nil && !IsNil(o.UsagePerCustomer) {
		return true
	}

	return false
}

// SetUsagePerCustomer gets a reference to the given int32 and assigns it to the UsagePerCustomer field.
func (o *SalesRuleDataCouponInterface) SetUsagePerCustomer(v int32) {
	o.UsagePerCustomer = &v
}

// GetTimesUsed returns the TimesUsed field value
func (o *SalesRuleDataCouponInterface) GetTimesUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimesUsed
}

// GetTimesUsedOk returns a tuple with the TimesUsed field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetTimesUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimesUsed, true
}

// SetTimesUsed sets field value
func (o *SalesRuleDataCouponInterface) SetTimesUsed(v int32) {
	o.TimesUsed = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *SalesRuleDataCouponInterface) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetIsPrimary returns the IsPrimary field value
func (o *SalesRuleDataCouponInterface) GetIsPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetIsPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrimary, true
}

// SetIsPrimary sets field value
func (o *SalesRuleDataCouponInterface) SetIsPrimary(v bool) {
	o.IsPrimary = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SalesRuleDataCouponInterface) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *SalesRuleDataCouponInterface) SetType(v int32) {
	o.Type = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *SalesRuleDataCouponInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesRuleDataCouponInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *SalesRuleDataCouponInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *SalesRuleDataCouponInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o SalesRuleDataCouponInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesRuleDataCouponInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CouponId) {
		toSerialize["coupon_id"] = o.CouponId
	}
	toSerialize["rule_id"] = o.RuleId
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsagePerCustomer) {
		toSerialize["usage_per_customer"] = o.UsagePerCustomer
	}
	toSerialize["times_used"] = o.TimesUsed
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	toSerialize["is_primary"] = o.IsPrimary
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SalesRuleDataCouponInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rule_id",
		"times_used",
		"is_primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSalesRuleDataCouponInterface := _SalesRuleDataCouponInterface{}

	err = json.Unmarshal(data, &varSalesRuleDataCouponInterface)

	if err != nil {
		return err
	}

	*o = SalesRuleDataCouponInterface(varSalesRuleDataCouponInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "coupon_id")
		delete(additionalProperties, "rule_id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "usage_limit")
		delete(additionalProperties, "usage_per_customer")
		delete(additionalProperties, "times_used")
		delete(additionalProperties, "expiration_date")
		delete(additionalProperties, "is_primary")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "type")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SalesRuleDataCouponInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SalesRuleDataCouponInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSalesRuleDataCouponInterface struct {
	value *SalesRuleDataCouponInterface
	isSet bool
}

func (v NullableSalesRuleDataCouponInterface) Get() *SalesRuleDataCouponInterface {
	return v.value
}

func (v *NullableSalesRuleDataCouponInterface) Set(val *SalesRuleDataCouponInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesRuleDataCouponInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesRuleDataCouponInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesRuleDataCouponInterface(val *SalesRuleDataCouponInterface) *NullableSalesRuleDataCouponInterface {
	return &NullableSalesRuleDataCouponInterface{value: val, isSet: true}
}

func (v NullableSalesRuleDataCouponInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesRuleDataCouponInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
