/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the AdobeStockAssetApiDataAssetInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdobeStockAssetApiDataAssetInterface{}

// AdobeStockAssetApiDataAssetInterface Adobe Stock Asset data class interface
type AdobeStockAssetApiDataAssetInterface struct {
	// ID
	Id *int32 `json:"id,omitempty"`
	// Media gallery asset id
	MediaGalleryId int32 `json:"media_gallery_id"`
	// Category
	CategoryId *int32                                   `json:"category_id,omitempty"`
	Category   *AdobeStockAssetApiDataCategoryInterface `json:"category,omitempty"`
	// The creator
	CreatorId *int32                                  `json:"creator_id,omitempty"`
	Creator   *AdobeStockAssetApiDataCreatorInterface `json:"creator,omitempty"`
	// Licensed
	IsLicensed int32 `json:"is_licensed"`
	// Creation date
	CreationDate string `json:"creation_date"`
	// ExtensionInterface class for @see \\Magento\\AdobeStockAssetApi\\Api\\Data\\AssetInterface
	ExtensionAttributes  map[string]interface{} `json:"extension_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdobeStockAssetApiDataAssetInterface AdobeStockAssetApiDataAssetInterface

// NewAdobeStockAssetApiDataAssetInterface instantiates a new AdobeStockAssetApiDataAssetInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdobeStockAssetApiDataAssetInterface(mediaGalleryId int32, isLicensed int32, creationDate string) *AdobeStockAssetApiDataAssetInterface {
	this := AdobeStockAssetApiDataAssetInterface{}
	this.MediaGalleryId = mediaGalleryId
	this.IsLicensed = isLicensed
	this.CreationDate = creationDate
	return &this
}

// NewAdobeStockAssetApiDataAssetInterfaceWithDefaults instantiates a new AdobeStockAssetApiDataAssetInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdobeStockAssetApiDataAssetInterfaceWithDefaults() *AdobeStockAssetApiDataAssetInterface {
	this := AdobeStockAssetApiDataAssetInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AdobeStockAssetApiDataAssetInterface) SetId(v int32) {
	o.Id = &v
}

// GetMediaGalleryId returns the MediaGalleryId field value
func (o *AdobeStockAssetApiDataAssetInterface) GetMediaGalleryId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MediaGalleryId
}

// GetMediaGalleryIdOk returns a tuple with the MediaGalleryId field value
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetMediaGalleryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaGalleryId, true
}

// SetMediaGalleryId sets field value
func (o *AdobeStockAssetApiDataAssetInterface) SetMediaGalleryId(v int32) {
	o.MediaGalleryId = v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetCategoryId() int32 {
	if o == nil || IsNil(o.CategoryId) {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *AdobeStockAssetApiDataAssetInterface) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetCategory() AdobeStockAssetApiDataCategoryInterface {
	if o == nil || IsNil(o.Category) {
		var ret AdobeStockAssetApiDataCategoryInterface
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetCategoryOk() (*AdobeStockAssetApiDataCategoryInterface, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given AdobeStockAssetApiDataCategoryInterface and assigns it to the Category field.
func (o *AdobeStockAssetApiDataAssetInterface) SetCategory(v AdobeStockAssetApiDataCategoryInterface) {
	o.Category = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetCreatorId() int32 {
	if o == nil || IsNil(o.CreatorId) {
		var ret int32
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetCreatorIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given int32 and assigns it to the CreatorId field.
func (o *AdobeStockAssetApiDataAssetInterface) SetCreatorId(v int32) {
	o.CreatorId = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetCreator() AdobeStockAssetApiDataCreatorInterface {
	if o == nil || IsNil(o.Creator) {
		var ret AdobeStockAssetApiDataCreatorInterface
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetCreatorOk() (*AdobeStockAssetApiDataCreatorInterface, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given AdobeStockAssetApiDataCreatorInterface and assigns it to the Creator field.
func (o *AdobeStockAssetApiDataAssetInterface) SetCreator(v AdobeStockAssetApiDataCreatorInterface) {
	o.Creator = &v
}

// GetIsLicensed returns the IsLicensed field value
func (o *AdobeStockAssetApiDataAssetInterface) GetIsLicensed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsLicensed
}

// GetIsLicensedOk returns a tuple with the IsLicensed field value
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetIsLicensedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLicensed, true
}

// SetIsLicensed sets field value
func (o *AdobeStockAssetApiDataAssetInterface) SetIsLicensed(v int32) {
	o.IsLicensed = v
}

// GetCreationDate returns the CreationDate field value
func (o *AdobeStockAssetApiDataAssetInterface) GetCreationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetCreationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *AdobeStockAssetApiDataAssetInterface) SetCreationDate(v string) {
	o.CreationDate = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *AdobeStockAssetApiDataAssetInterface) GetExtensionAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdobeStockAssetApiDataAssetInterface) GetExtensionAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *AdobeStockAssetApiDataAssetInterface) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given map[string]interface{} and assigns it to the ExtensionAttributes field.
func (o *AdobeStockAssetApiDataAssetInterface) SetExtensionAttributes(v map[string]interface{}) {
	o.ExtensionAttributes = v
}

func (o AdobeStockAssetApiDataAssetInterface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdobeStockAssetApiDataAssetInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["media_gallery_id"] = o.MediaGalleryId
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creator_id"] = o.CreatorId
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	toSerialize["is_licensed"] = o.IsLicensed
	toSerialize["creation_date"] = o.CreationDate
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extension_attributes"] = o.ExtensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdobeStockAssetApiDataAssetInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"media_gallery_id",
		"is_licensed",
		"creation_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdobeStockAssetApiDataAssetInterface := _AdobeStockAssetApiDataAssetInterface{}

	err = json.Unmarshal(data, &varAdobeStockAssetApiDataAssetInterface)

	if err != nil {
		return err
	}

	*o = AdobeStockAssetApiDataAssetInterface(varAdobeStockAssetApiDataAssetInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "media_gallery_id")
		delete(additionalProperties, "category_id")
		delete(additionalProperties, "category")
		delete(additionalProperties, "creator_id")
		delete(additionalProperties, "creator")
		delete(additionalProperties, "is_licensed")
		delete(additionalProperties, "creation_date")
		delete(additionalProperties, "extension_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *AdobeStockAssetApiDataAssetInterface) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *AdobeStockAssetApiDataAssetInterface) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableAdobeStockAssetApiDataAssetInterface struct {
	value *AdobeStockAssetApiDataAssetInterface
	isSet bool
}

func (v NullableAdobeStockAssetApiDataAssetInterface) Get() *AdobeStockAssetApiDataAssetInterface {
	return v.value
}

func (v *NullableAdobeStockAssetApiDataAssetInterface) Set(val *AdobeStockAssetApiDataAssetInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableAdobeStockAssetApiDataAssetInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableAdobeStockAssetApiDataAssetInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdobeStockAssetApiDataAssetInterface(val *AdobeStockAssetApiDataAssetInterface) *NullableAdobeStockAssetApiDataAssetInterface {
	return &NullableAdobeStockAssetApiDataAssetInterface{value: val, isSet: true}
}

func (v NullableAdobeStockAssetApiDataAssetInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdobeStockAssetApiDataAssetInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
