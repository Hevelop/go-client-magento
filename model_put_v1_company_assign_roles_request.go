/*
Commerce Admin REST endpoints - All inclusive

The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.  You can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.

API version: 2.4.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package magento

import (
	"encoding/json"
	"fmt"
)

// checks if the PutV1CompanyAssignRolesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutV1CompanyAssignRolesRequest{}

// PutV1CompanyAssignRolesRequest struct for PutV1CompanyAssignRolesRequest
type PutV1CompanyAssignRolesRequest struct {
	UserId               int32                      `json:"userId"`
	Roles                []CompanyDataRoleInterface `json:"roles"`
	AdditionalProperties map[string]interface{}
}

type _PutV1CompanyAssignRolesRequest PutV1CompanyAssignRolesRequest

// NewPutV1CompanyAssignRolesRequest instantiates a new PutV1CompanyAssignRolesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutV1CompanyAssignRolesRequest(userId int32, roles []CompanyDataRoleInterface) *PutV1CompanyAssignRolesRequest {
	this := PutV1CompanyAssignRolesRequest{}
	this.UserId = userId
	this.Roles = roles
	return &this
}

// NewPutV1CompanyAssignRolesRequestWithDefaults instantiates a new PutV1CompanyAssignRolesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutV1CompanyAssignRolesRequestWithDefaults() *PutV1CompanyAssignRolesRequest {
	this := PutV1CompanyAssignRolesRequest{}
	return &this
}

// GetUserId returns the UserId field value
func (o *PutV1CompanyAssignRolesRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *PutV1CompanyAssignRolesRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *PutV1CompanyAssignRolesRequest) SetUserId(v int32) {
	o.UserId = v
}

// GetRoles returns the Roles field value
func (o *PutV1CompanyAssignRolesRequest) GetRoles() []CompanyDataRoleInterface {
	if o == nil {
		var ret []CompanyDataRoleInterface
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *PutV1CompanyAssignRolesRequest) GetRolesOk() ([]CompanyDataRoleInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *PutV1CompanyAssignRolesRequest) SetRoles(v []CompanyDataRoleInterface) {
	o.Roles = v
}

func (o PutV1CompanyAssignRolesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutV1CompanyAssignRolesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["roles"] = o.Roles

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PutV1CompanyAssignRolesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"roles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutV1CompanyAssignRolesRequest := _PutV1CompanyAssignRolesRequest{}

	err = json.Unmarshal(data, &varPutV1CompanyAssignRolesRequest)

	if err != nil {
		return err
	}

	*o = PutV1CompanyAssignRolesRequest(varPutV1CompanyAssignRolesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userId")
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PutV1CompanyAssignRolesRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *PutV1CompanyAssignRolesRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullablePutV1CompanyAssignRolesRequest struct {
	value *PutV1CompanyAssignRolesRequest
	isSet bool
}

func (v NullablePutV1CompanyAssignRolesRequest) Get() *PutV1CompanyAssignRolesRequest {
	return v.value
}

func (v *NullablePutV1CompanyAssignRolesRequest) Set(val *PutV1CompanyAssignRolesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutV1CompanyAssignRolesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutV1CompanyAssignRolesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutV1CompanyAssignRolesRequest(val *PutV1CompanyAssignRolesRequest) *NullablePutV1CompanyAssignRolesRequest {
	return &NullablePutV1CompanyAssignRolesRequest{value: val, isSet: true}
}

func (v NullablePutV1CompanyAssignRolesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutV1CompanyAssignRolesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
